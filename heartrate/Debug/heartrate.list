
heartrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008318  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080084b8  080084b8  000094b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008554  08008554  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800855c  0800855c  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800855c  0800855c  0000955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008560  08008560  00009560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008564  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000068  080085cc  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  080085cc  0000a3c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1a9  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d2  00000000  00000000  00018241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0001a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b6  00000000  00000000  0001b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018359  00000000  00000000  0001ba4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6dd  00000000  00000000  00033da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009670b  00000000  00000000  00043484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9b8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e90  00000000  00000000  000d9bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000dda64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084a0 	.word	0x080084a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080084a0 	.word	0x080084a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 8000d5a:	f107 010f 	add.w	r1, r7, #15
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d62:	2201      	movs	r2, #1
 8000d64:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <__io_putchar+0x28>)
 8000d66:	f005 fabf 	bl	80062e8 <HAL_UART_Transmit>
  return ch;
 8000d6a:	687b      	ldr	r3, [r7, #4]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000120 	.word	0x20000120

08000d78 <max30102_plot>:

// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir:%u,r:%u\n", ir_sample, red_sample); // Print IR and Red
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <max30102_plot+0x1c>)
 8000d88:	f006 fc14 	bl	80075b4 <iprintf>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	080084b8 	.word	0x080084b8

08000d98 <ADC_Select_CH0>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH0(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <ADC_Select_CH0+0x3c>)
 8000dbc:	f001 fb4c 	bl	8002458 <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8000dc6:	f000 fb39 	bl	800143c <Error_Handler>
	  }


}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000084 	.word	0x20000084

08000dd8 <ADC_Select_CH1>:
void ADC_Select_CH1(void){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
	 sConfig.Channel = ADC_CHANNEL_1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000df2:	2301      	movs	r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <ADC_Select_CH1+0x3c>)
 8000dfc:	f001 fb2c 	bl	8002458 <HAL_ADC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 8000e06:	f000 fb19 	bl	800143c <Error_Handler>
	  }


}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000084 	.word	0x20000084

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f001 f8c1 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f8bf 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 f9df 	bl	80011e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e2a:	f000 f985 	bl	8001138 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e2e:	f000 f9b1 	bl	8001194 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e32:	f000 f91f 	bl	8001074 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  max30102_init(&max30102, &hi2c1);
 8000e36:	4954      	ldr	r1, [pc, #336]	@ (8000f88 <main+0x170>)
 8000e38:	4854      	ldr	r0, [pc, #336]	@ (8000f8c <main+0x174>)
 8000e3a:	f000 fb05 	bl	8001448 <max30102_init>
  max30102_reset(&max30102);
 8000e3e:	4853      	ldr	r0, [pc, #332]	@ (8000f8c <main+0x174>)
 8000e40:	f000 fb79 	bl	8001536 <max30102_reset>
  max30102_clear_fifo(&max30102);
 8000e44:	4851      	ldr	r0, [pc, #324]	@ (8000f8c <main+0x174>)
 8000e46:	f000 fd69 	bl	800191c <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2103      	movs	r1, #3
 8000e50:	484e      	ldr	r0, [pc, #312]	@ (8000f8c <main+0x174>)
 8000e52:	f000 fd29 	bl	80018a8 <max30102_set_fifo_config>

  // Sensor settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8000e56:	2101      	movs	r1, #1
 8000e58:	484c      	ldr	r0, [pc, #304]	@ (8000f8c <main+0x174>)
 8000e5a:	f000 fc8d 	bl	8001778 <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	484a      	ldr	r0, [pc, #296]	@ (8000f8c <main+0x174>)
 8000e62:	f000 fcac 	bl	80017be <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8000e66:	2104      	movs	r1, #4
 8000e68:	4848      	ldr	r0, [pc, #288]	@ (8000f8c <main+0x174>)
 8000e6a:	f000 fc66 	bl	800173a <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 8000e6e:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8000f90 <main+0x178>
 8000e72:	4846      	ldr	r0, [pc, #280]	@ (8000f8c <main+0x174>)
 8000e74:	f000 fcc8 	bl	8001808 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 8000e78:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 8000f90 <main+0x178>
 8000e7c:	4843      	ldr	r0, [pc, #268]	@ (8000f8c <main+0x174>)
 8000e7e:	f000 fceb 	bl	8001858 <max30102_set_led_current_2>

  // Enter SpO2 mode
  max30102_set_mode(&max30102, max30102_spo2);
 8000e82:	2103      	movs	r1, #3
 8000e84:	4841      	ldr	r0, [pc, #260]	@ (8000f8c <main+0x174>)
 8000e86:	f000 fc32 	bl	80016ee <max30102_set_mode>
  max30102_set_a_full(&max30102, 1);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	483f      	ldr	r0, [pc, #252]	@ (8000f8c <main+0x174>)
 8000e8e:	f000 fb63 	bl	8001558 <max30102_set_a_full>

  // Initiate 1 temperature measurement
  max30102_set_die_temp_en(&max30102, 1);
 8000e92:	2101      	movs	r1, #1
 8000e94:	483d      	ldr	r0, [pc, #244]	@ (8000f8c <main+0x174>)
 8000e96:	f000 fb9f 	bl	80015d8 <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	483b      	ldr	r0, [pc, #236]	@ (8000f8c <main+0x174>)
 8000e9e:	f000 fb83 	bl	80015a8 <max30102_set_die_temp_rdy>

  uint8_t en_reg[2] = {0};
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	80bb      	strh	r3, [r7, #4]
  max30102_read(&max30102, 0x00, en_reg, 1);
 8000ea6:	1d3a      	adds	r2, r7, #4
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4837      	ldr	r0, [pc, #220]	@ (8000f8c <main+0x174>)
 8000eae:	f000 fb1d 	bl	80014ec <max30102_read>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADC_Select_CH1();
 8000eb2:	f7ff ff91 	bl	8000dd8 <ADC_Select_CH1>
	  	      	  	         HAL_ADC_Start(&hadc1);
 8000eb6:	4837      	ldr	r0, [pc, #220]	@ (8000f94 <main+0x17c>)
 8000eb8:	f001 f94e 	bl	8002158 <HAL_ADC_Start>
	  	      	  	      	   	HAL_ADC_PollForConversion(&hadc1, 100);
 8000ebc:	2164      	movs	r1, #100	@ 0x64
 8000ebe:	4835      	ldr	r0, [pc, #212]	@ (8000f94 <main+0x17c>)
 8000ec0:	f001 fa31 	bl	8002326 <HAL_ADC_PollForConversion>

	  	      	  	      	   	adc_val[2]= HAL_ADC_GetValue(&hadc1);
 8000ec4:	4833      	ldr	r0, [pc, #204]	@ (8000f94 <main+0x17c>)
 8000ec6:	f001 fab9 	bl	800243c <HAL_ADC_GetValue>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	80bb      	strh	r3, [r7, #4]
	  	      	  	      	   	HAL_ADC_Stop(&hadc1);
 8000ed0:	4830      	ldr	r0, [pc, #192]	@ (8000f94 <main+0x17c>)
 8000ed2:	f001 f9f5 	bl	80022c0 <HAL_ADC_Stop>
	  	      	  	      	HAL_UART_Transmit(&huart1, "GLUCOSE: ", 9, 10);
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	2209      	movs	r2, #9
 8000eda:	492f      	ldr	r1, [pc, #188]	@ (8000f98 <main+0x180>)
 8000edc:	482f      	ldr	r0, [pc, #188]	@ (8000f9c <main+0x184>)
 8000ede:	f005 fa03 	bl	80062e8 <HAL_UART_Transmit>
	  	      	  	      	   print_char(adc_val[1]);
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fa5b 	bl	80013a0 <print_char>
	  	      	   	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000eea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eee:	482c      	ldr	r0, [pc, #176]	@ (8000fa0 <main+0x188>)
 8000ef0:	f002 f82f 	bl	8002f52 <HAL_GPIO_TogglePin>
	  // Get the last calculated heart rate
	  if (max30102_has_interrupt(&max30102))
 8000ef4:	4825      	ldr	r0, [pc, #148]	@ (8000f8c <main+0x174>)
 8000ef6:	f000 fb95 	bl	8001624 <max30102_has_interrupt>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <main+0xee>
	      {
	        max30102_interrupt_handler(&max30102);
 8000f00:	4822      	ldr	r0, [pc, #136]	@ (8000f8c <main+0x174>)
 8000f02:	f000 fb9c 	bl	800163e <max30102_interrupt_handler>
	      }

	  float heartRate = max30102_get_last_heart_rate(&max30102);
 8000f06:	4821      	ldr	r0, [pc, #132]	@ (8000f8c <main+0x174>)
 8000f08:	f000 fd8c 	bl	8001a24 <max30102_get_last_heart_rate>
 8000f0c:	ee07 0a90 	vmov	s15, r0
 8000f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f14:	edc7 7a03 	vstr	s15, [r7, #12]
	         // Get the last calculated SpO2
	         float spo2 = max30102_get_last_spO2(&max30102);
 8000f18:	481c      	ldr	r0, [pc, #112]	@ (8000f8c <main+0x174>)
 8000f1a:	f000 fdab 	bl	8001a74 <max30102_get_last_spO2>
 8000f1e:	ee07 0a90 	vmov	s15, r0
 8000f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f26:	edc7 7a02 	vstr	s15, [r7, #8]

	         // Print heart rate and SpO2 to UART
	         printHeartRateAndSpO2(heartRate, spo2);
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff fb0c 	bl	8000548 <__aeabi_f2d>
 8000f30:	4604      	mov	r4, r0
 8000f32:	460d      	mov	r5, r1
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff fb07 	bl	8000548 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	ec43 2b11 	vmov	d1, r2, r3
 8000f42:	ec45 4b10 	vmov	d0, r4, r5
 8000f46:	f000 f9c7 	bl	80012d8 <printHeartRateAndSpO2>

	         // Delay for a short period to avoid overwhelming the UART
	         HAL_Delay(1000);
 8000f4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f4e:	f001 f89b 	bl	8002088 <HAL_Delay>
	         ADC_Select_CH0();
 8000f52:	f7ff ff21 	bl	8000d98 <ADC_Select_CH0>
	         HAL_ADC_Start(&hadc1);
 8000f56:	480f      	ldr	r0, [pc, #60]	@ (8000f94 <main+0x17c>)
 8000f58:	f001 f8fe 	bl	8002158 <HAL_ADC_Start>
	      	   	HAL_ADC_PollForConversion(&hadc1, 100);
 8000f5c:	2164      	movs	r1, #100	@ 0x64
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <main+0x17c>)
 8000f60:	f001 f9e1 	bl	8002326 <HAL_ADC_PollForConversion>

	      	   	adc_val[1]= HAL_ADC_GetValue(&hadc1);
 8000f64:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <main+0x17c>)
 8000f66:	f001 fa69 	bl	800243c <HAL_ADC_GetValue>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	807b      	strh	r3, [r7, #2]
	      	   	HAL_ADC_Stop(&hadc1);
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <main+0x17c>)
 8000f72:	f001 f9a5 	bl	80022c0 <HAL_ADC_Stop>
	      	   	temp_conv(adc_val[1]);
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f9e1 	bl	8001340 <temp_conv>
	      	   	HAL_Delay(1000);
 8000f7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f82:	f001 f881 	bl	8002088 <HAL_Delay>
  {
 8000f86:	e794      	b.n	8000eb2 <main+0x9a>
 8000f88:	200000cc 	.word	0x200000cc
 8000f8c:	20000168 	.word	0x20000168
 8000f90:	40c66666 	.word	0x40c66666
 8000f94:	20000084 	.word	0x20000084
 8000f98:	080084c4 	.word	0x080084c4
 8000f9c:	20000120 	.word	0x20000120
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	@ 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	@ 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 fb10 	bl	80075d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b27      	ldr	r3, [pc, #156]	@ (800106c <SystemClock_Config+0xc8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	4a26      	ldr	r2, [pc, #152]	@ (800106c <SystemClock_Config+0xc8>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <SystemClock_Config+0xc8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <SystemClock_Config+0xcc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a20      	ldr	r2, [pc, #128]	@ (8001070 <SystemClock_Config+0xcc>)
 8000fee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <SystemClock_Config+0xcc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001000:	2301      	movs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001004:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001014:	2310      	movs	r3, #16
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001018:	23c0      	movs	r3, #192	@ 0xc0
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800101c:	2304      	movs	r3, #4
 800101e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fcb5 	bl	8005998 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001034:	f000 fa02 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f004 ff17 	bl	8005e88 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001060:	f000 f9ec 	bl	800143c <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	3750      	adds	r7, #80	@ 0x50
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	463b      	mov	r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001086:	4b29      	ldr	r3, [pc, #164]	@ (800112c <MX_ADC1_Init+0xb8>)
 8001088:	4a29      	ldr	r2, [pc, #164]	@ (8001130 <MX_ADC1_Init+0xbc>)
 800108a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_ADC1_Init+0xb8>)
 800108e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001092:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001094:	4b25      	ldr	r3, [pc, #148]	@ (800112c <MX_ADC1_Init+0xb8>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <MX_ADC1_Init+0xb8>)
 800109c:	2201      	movs	r2, #1
 800109e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a0:	4b22      	ldr	r3, [pc, #136]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001134 <MX_ADC1_Init+0xc0>)
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d4:	4815      	ldr	r0, [pc, #84]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010d6:	f000 fffb 	bl	80020d0 <HAL_ADC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e0:	f000 f9ac 	bl	800143c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	4619      	mov	r1, r3
 80010f4:	480d      	ldr	r0, [pc, #52]	@ (800112c <MX_ADC1_Init+0xb8>)
 80010f6:	f001 f9af 	bl	8002458 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001100:	f000 f99c 	bl	800143c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001104:	2301      	movs	r3, #1
 8001106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800110c:	2301      	movs	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_ADC1_Init+0xb8>)
 8001116:	f001 f99f 	bl	8002458 <HAL_ADC_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001120:	f000 f98c 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000084 	.word	0x20000084
 8001130:	40012000 	.word	0x40012000
 8001134:	0f000001 	.word	0x0f000001

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_I2C1_Init+0x50>)
 800113e:	4a13      	ldr	r2, [pc, #76]	@ (800118c <MX_I2C1_Init+0x54>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_I2C1_Init+0x50>)
 8001144:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <MX_I2C1_Init+0x58>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_I2C1_Init+0x50>)
 8001156:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800115a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_I2C1_Init+0x50>)
 8001176:	f001 ff2b 	bl	8002fd0 <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 f95c 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000cc 	.word	0x200000cc
 800118c:	40005400 	.word	0x40005400
 8001190:	000186a0 	.word	0x000186a0

08001194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <MX_USART1_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011cc:	f005 f83c 	bl	8006248 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f000 f931 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000120 	.word	0x20000120
 80011e4:	40011000 	.word	0x40011000

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a31      	ldr	r2, [pc, #196]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a2a      	ldr	r2, [pc, #168]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <MX_GPIO_Init+0xe4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <MX_GPIO_Init+0xe4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a23      	ldr	r2, [pc, #140]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a1c      	ldr	r2, [pc, #112]	@ (80012cc <MX_GPIO_Init+0xe4>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <MX_GPIO_Init+0xe4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001274:	4816      	ldr	r0, [pc, #88]	@ (80012d0 <MX_GPIO_Init+0xe8>)
 8001276:	f001 fe53 	bl	8002f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800127a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <MX_GPIO_Init+0xe8>)
 8001294:	f001 fcc0 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <MX_GPIO_Init+0xec>)
 80012b0:	f001 fcb2 	bl	8002c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2017      	movs	r0, #23
 80012ba:	f001 fbd6 	bl	8002a6a <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012be:	2017      	movs	r0, #23
 80012c0:	f001 fbef 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020400 	.word	0x40020400

080012d8 <printHeartRateAndSpO2>:

/* USER CODE BEGIN 4 */
void printHeartRateAndSpO2(float heartRate, float spo2)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b0a0      	sub	sp, #128	@ 0x80
 80012dc:	af04      	add	r7, sp, #16
 80012de:	ed87 0a01 	vstr	s0, [r7, #4]
 80012e2:	edc7 0a00 	vstr	s1, [r7]
    char buffer[100];

    int len = snprintf(buffer, sizeof(buffer), "Heart Rate: %d bpm, SpO2: %d%%\r\n", heartRate, spo2);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff f92e 	bl	8000548 <__aeabi_f2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	6838      	ldr	r0, [r7, #0]
 80012f2:	f7ff f929 	bl	8000548 <__aeabi_f2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	f107 0008 	add.w	r0, r7, #8
 80012fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001302:	e9cd 4500 	strd	r4, r5, [sp]
 8001306:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <printHeartRateAndSpO2+0x5c>)
 8001308:	2164      	movs	r1, #100	@ 0x64
 800130a:	f006 f851 	bl	80073b0 <sniprintf>
 800130e:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (len < 0)
 8001310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001312:	2b00      	cmp	r3, #0
 8001314:	db09      	blt.n	800132a <printHeartRateAndSpO2+0x52>
    {
        // Error handling: snprintf failed
        return;
    }
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8001316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001318:	b29a      	uxth	r2, r3
 800131a:	f107 0108 	add.w	r1, r7, #8
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <printHeartRateAndSpO2+0x60>)
 8001324:	f004 ffe0 	bl	80062e8 <HAL_UART_Transmit>
 8001328:	e000      	b.n	800132c <printHeartRateAndSpO2+0x54>
        return;
 800132a:	bf00      	nop
}
 800132c:	3770      	adds	r7, #112	@ 0x70
 800132e:	46bd      	mov	sp, r7
 8001330:	bdb0      	pop	{r4, r5, r7, pc}
 8001332:	bf00      	nop
 8001334:	080084d0 	.word	0x080084d0
 8001338:	20000120 	.word	0x20000120
 800133c:	00000000 	.word	0x00000000

08001340 <temp_conv>:
void temp_conv(uint16_t tempvar)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
	uint32_t var=0;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
	var=(tempvar*8.05);
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8e7 	bl	8000524 <__aeabi_i2d>
 8001356:	a310      	add	r3, pc, #64	@ (adr r3, 8001398 <temp_conv+0x58>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f94c 	bl	80005f8 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fb58 	bl	8000a1c <__aeabi_d2uiz>
 800136c:	4603      	mov	r3, r0
 800136e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, "temp: ", 6, 10);
 8001370:	230a      	movs	r3, #10
 8001372:	2206      	movs	r2, #6
 8001374:	4906      	ldr	r1, [pc, #24]	@ (8001390 <temp_conv+0x50>)
 8001376:	4807      	ldr	r0, [pc, #28]	@ (8001394 <temp_conv+0x54>)
 8001378:	f004 ffb6 	bl	80062e8 <HAL_UART_Transmit>
	print_char(var);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f80f 	bl	80013a0 <print_char>

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	f3af 8000 	nop.w
 8001390:	080084f4 	.word	0x080084f4
 8001394:	20000120 	.word	0x20000120
 8001398:	9999999a 	.word	0x9999999a
 800139c:	40201999 	.word	0x40201999

080013a0 <print_char>:
void print_char(uint32_t num_var) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    uint8_t char_num_var[] = "0000000\r\n"; // Initialize as string
 80013a8:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <print_char+0x90>)
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80013b0:	c303      	stmia	r3!, {r0, r1}
 80013b2:	801a      	strh	r2, [r3, #0]
    uint8_t i = 6; // Index of least significant digit in char_num_var
 80013b4:	2306      	movs	r3, #6
 80013b6:	75fb      	strb	r3, [r7, #23]

    // Convert digits of num_var to ASCII characters
    do {
        i--; // Decrement index
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
        if (i == 3) {
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d108      	bne.n	80013d6 <print_char+0x36>
            char_num_var[i] = '.'; // Insert '.' at index 3
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	3318      	adds	r3, #24
 80013c8:	443b      	add	r3, r7
 80013ca:	222e      	movs	r2, #46	@ 0x2e
 80013cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
            i--; // Decrement index
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
        }
        char_num_var[i] = (num_var % 10) + '0'; // Convert digit to ASCII and store
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <print_char+0x94>)
 80013da:	fba3 2301 	umull	r2, r3, r3, r1
 80013de:	08da      	lsrs	r2, r3, #3
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1aca      	subs	r2, r1, r3
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	3230      	adds	r2, #48	@ 0x30
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	3318      	adds	r3, #24
 80013f4:	443b      	add	r3, r7
 80013f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
        num_var /= 10; // Remove least significant digit
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <print_char+0x94>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	607b      	str	r3, [r7, #4]
    } while (num_var != 0 && i > 0); // Continue until num_var is 0 or array is full
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <print_char+0x72>
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1d2      	bne.n	80013b8 <print_char+0x18>

    // Transmit the string via UART
    HAL_UART_Transmit(&huart1, char_num_var, 8, 15);
 8001412:	f107 010c 	add.w	r1, r7, #12
 8001416:	230f      	movs	r3, #15
 8001418:	2208      	movs	r2, #8
 800141a:	4807      	ldr	r0, [pc, #28]	@ (8001438 <print_char+0x98>)
 800141c:	f004 ff64 	bl	80062e8 <HAL_UART_Transmit>
    HAL_Delay(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f000 fe31 	bl	8002088 <HAL_Delay>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	080084fc 	.word	0x080084fc
 8001434:	cccccccd 	.word	0xcccccccd
 8001438:	20000120 	.word	0x20000120

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <Error_Handler+0x8>

08001448 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3304      	adds	r3, #4
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f006 f8b5 	bl	80075d8 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3384      	adds	r3, #132	@ 0x84
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f006 f8ae 	bl	80075d8 <memset>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	461a      	mov	r2, r3
 8001490:	460b      	mov	r3, r1
 8001492:	72fb      	strb	r3, [r7, #11]
 8001494:	4613      	mov	r3, r2
 8001496:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8001498:	893b      	ldrh	r3, [r7, #8]
 800149a:	3301      	adds	r3, #1
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fed5 	bl	800724c <malloc>
 80014a2:	4603      	mov	r3, r0
 80014a4:	617b      	str	r3, [r7, #20]
    *payload = reg;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	7afa      	ldrb	r2, [r7, #11]
 80014aa:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <max30102_write+0x42>
 80014b2:	893b      	ldrh	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	893a      	ldrh	r2, [r7, #8]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 f8ce 	bl	8007662 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	893b      	ldrh	r3, [r7, #8]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014d4:	9200      	str	r2, [sp, #0]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	21ae      	movs	r1, #174	@ 0xae
 80014da:	f001 fed3 	bl	8003284 <HAL_I2C_Master_Transmit>
    free(payload);
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f005 febc 	bl	800725c <free>
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	460b      	mov	r3, r1
 80014fa:	72fb      	strb	r3, [r7, #11]
 80014fc:	4613      	mov	r3, r2
 80014fe:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	f107 0217 	add.w	r2, r7, #23
 800150c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2301      	movs	r3, #1
 8001514:	21ae      	movs	r1, #174	@ 0xae
 8001516:	f001 feb5 	bl	8003284 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	893b      	ldrh	r3, [r7, #8]
 8001520:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	21ae      	movs	r1, #174	@ 0xae
 800152a:	f001 ffa9 	bl	8003480 <HAL_I2C_Master_Receive>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 800153e:	2340      	movs	r3, #64	@ 0x40
 8001540:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8001542:	f107 020f 	add.w	r2, r7, #15
 8001546:	2301      	movs	r3, #1
 8001548:	2109      	movs	r1, #9
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff9a 	bl	8001484 <max30102_write>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001568:	f107 020f 	add.w	r2, r7, #15
 800156c:	2301      	movs	r3, #1
 800156e:	2102      	movs	r1, #2
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffbb 	bl	80014ec <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800157c:	b2db      	uxtb	r3, r3
 800157e:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	01db      	lsls	r3, r3, #7
 8001584:	b25a      	sxtb	r2, r3
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	b25b      	sxtb	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b25b      	sxtb	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001592:	f107 020f 	add.w	r2, r7, #15
 8001596:	2301      	movs	r3, #1
 8001598:	2102      	movs	r1, #2
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff72 	bl	8001484 <max30102_write>
}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 80015c2:	f107 020f 	add.w	r2, r7, #15
 80015c6:	2301      	movs	r3, #1
 80015c8:	2103      	movs	r1, #3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff5a 	bl	8001484 <max30102_write>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 80015f2:	f107 020f 	add.w	r2, r7, #15
 80015f6:	2301      	movs	r3, #1
 80015f8:	2121      	movs	r1, #33	@ 0x21
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ff42 	bl	8001484 <max30102_write>
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8001646:	2300      	movs	r3, #0
 8001648:	823b      	strh	r3, [r7, #16]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800164a:	f107 0210 	add.w	r2, r7, #16
 800164e:	2302      	movs	r3, #2
 8001650:	2100      	movs	r1, #0
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff4a 	bl	80014ec <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8001658:	7c3b      	ldrb	r3, [r7, #16]
 800165a:	09db      	lsrs	r3, r3, #7
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f977 	bl	800195a <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800166c:	7c7b      	ldrb	r3, [r7, #17]
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800167a:	f107 020e 	add.w	r2, r7, #14
 800167e:	f107 030f 	add.w	r3, r7, #15
 8001682:	4619      	mov	r1, r3
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fa27 	bl	8001ad8 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104

    // Update sample arrays with new data
    if (max30102_has_interrupt(obj))
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffc6 	bl	8001624 <max30102_has_interrupt>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d023      	beq.n	80016e6 <max30102_interrupt_handler+0xa8>
    {
        // Check if there is new data available
        // Update sample arrays with new data
        for (int i = 0; i < MAX30102_SAMPLE_LEN_MAX; i++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e01a      	b.n	80016da <max30102_interrupt_handler+0x9c>
        {
            obj->_ir_samples[i] = obj->_ir_samples[i + 1];
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	605a      	str	r2, [r3, #4]
            obj->_red_samples[i] = obj->_red_samples[i + 1];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	3320      	adds	r3, #32
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3320      	adds	r3, #32
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	605a      	str	r2, [r3, #4]
        for (int i = 0; i < MAX30102_SAMPLE_LEN_MAX; i++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b1f      	cmp	r3, #31
 80016de:	dde1      	ble.n	80016a4 <max30102_interrupt_handler+0x66>
        }

        // Read new samples from FIFO
        max30102_read_fifo(obj);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f93a 	bl	800195a <max30102_read_fifo>
    }
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 80016fa:	f107 020f 	add.w	r2, r7, #15
 80016fe:	2301      	movs	r3, #1
 8001700:	2109      	movs	r1, #9
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fef2 	bl	80014ec <max30102_read>
    config = (config & 0xf8) | mode;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	f023 0307 	bic.w	r3, r3, #7
 8001710:	b25a      	sxtb	r2, r3
 8001712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001716:	4313      	orrs	r3, r2
 8001718:	b25b      	sxtb	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800171e:	f107 020f 	add.w	r2, r7, #15
 8001722:	2301      	movs	r3, #1
 8001724:	2109      	movs	r1, #9
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff feac 	bl	8001484 <max30102_write>
    max30102_clear_fifo(obj);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8f5 	bl	800191c <max30102_clear_fifo>
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001746:	f107 020f 	add.w	r2, r7, #15
 800174a:	2301      	movs	r3, #1
 800174c:	210a      	movs	r1, #10
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fecc 	bl	80014ec <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800175e:	b2db      	uxtb	r3, r3
 8001760:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001762:	f107 020f 	add.w	r2, r7, #15
 8001766:	2301      	movs	r3, #1
 8001768:	210a      	movs	r1, #10
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fe8a 	bl	8001484 <max30102_write>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001784:	f107 020f 	add.w	r2, r7, #15
 8001788:	2301      	movs	r3, #1
 800178a:	210a      	movs	r1, #10
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fead 	bl	80014ec <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	b25b      	sxtb	r3, r3
 8001796:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800179a:	b25a      	sxtb	r2, r3
 800179c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80017a8:	f107 020f 	add.w	r2, r7, #15
 80017ac:	2301      	movs	r3, #1
 80017ae:	210a      	movs	r1, #10
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe67 	bl	8001484 <max30102_write>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80017ca:	f107 020f 	add.w	r2, r7, #15
 80017ce:	2301      	movs	r3, #1
 80017d0:	210a      	movs	r1, #10
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fe8a 	bl	80014ec <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	b25a      	sxtb	r2, r3
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	015b      	lsls	r3, r3, #5
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80017f0:	f107 020f 	add.w	r2, r7, #15
 80017f4:	2301      	movs	r3, #1
 80017f6:	210a      	movs	r1, #10
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fe43 	bl	8001484 <max30102_write>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8001814:	6838      	ldr	r0, [r7, #0]
 8001816:	f7fe fe97 	bl	8000548 <__aeabi_f2d>
 800181a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001850 <max30102_set_led_current_1+0x48>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7ff f814 	bl	800084c <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f8f6 	bl	8000a1c <__aeabi_d2uiz>
 8001830:	4603      	mov	r3, r0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8001836:	f107 020f 	add.w	r2, r7, #15
 800183a:	2301      	movs	r3, #1
 800183c:	210c      	movs	r1, #12
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fe20 	bl	8001484 <max30102_write>
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	f3af 8000 	nop.w
 8001850:	9999999a 	.word	0x9999999a
 8001854:	3fc99999 	.word	0x3fc99999

08001858 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7fe fe6f 	bl	8000548 <__aeabi_f2d>
 800186a:	a30d      	add	r3, pc, #52	@ (adr r3, 80018a0 <max30102_set_led_current_2+0x48>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe ffec 	bl	800084c <__aeabi_ddiv>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f8ce 	bl	8000a1c <__aeabi_d2uiz>
 8001880:	4603      	mov	r3, r0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8001886:	f107 020f 	add.w	r2, r7, #15
 800188a:	2301      	movs	r3, #1
 800188c:	210d      	movs	r1, #13
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fdf8 	bl	8001484 <max30102_write>
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	9999999a 	.word	0x9999999a
 80018a4:	3fc99999 	.word	0x3fc99999

080018a8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	70fb      	strb	r3, [r7, #3]
 80018ba:	460b      	mov	r3, r1
 80018bc:	70bb      	strb	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	015b      	lsls	r3, r3, #5
 80018ca:	b25a      	sxtb	r2, r3
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 80018d8:	78bb      	ldrb	r3, [r7, #2]
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	b25a      	sxtb	r2, r3
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 80018f0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	b25a      	sxtb	r2, r3
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b25b      	sxtb	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8001906:	f107 020f 	add.w	r2, r7, #15
 800190a:	2301      	movs	r3, #1
 800190c:	2108      	movs	r1, #8
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fdb8 	bl	8001484 <max30102_write>
}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8001928:	f107 020f 	add.w	r2, r7, #15
 800192c:	2303      	movs	r3, #3
 800192e:	2104      	movs	r1, #4
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fda7 	bl	8001484 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8001936:	f107 020f 	add.w	r2, r7, #15
 800193a:	2303      	movs	r3, #3
 800193c:	2106      	movs	r1, #6
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fda0 	bl	8001484 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8001944:	f107 020f 	add.w	r2, r7, #15
 8001948:	2303      	movs	r3, #3
 800194a:	2105      	movs	r1, #5
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fd99 	bl	8001484 <max30102_write>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b088      	sub	sp, #32
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	74fb      	strb	r3, [r7, #19]
 8001966:	2300      	movs	r3, #0
 8001968:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800196a:	f107 0213 	add.w	r2, r7, #19
 800196e:	2301      	movs	r3, #1
 8001970:	2104      	movs	r1, #4
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fdba 	bl	80014ec <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8001978:	f107 0212 	add.w	r2, r7, #18
 800197c:	2301      	movs	r3, #1
 800197e:	2106      	movs	r1, #6
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fdb3 	bl	80014ec <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8001986:	7cfa      	ldrb	r2, [r7, #19]
 8001988:	7cbb      	ldrb	r3, [r7, #18]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8001990:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001994:	2b00      	cmp	r3, #0
 8001996:	dc03      	bgt.n	80019a0 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8001998:	7ffb      	ldrb	r3, [r7, #31]
 800199a:	3320      	adds	r3, #32
 800199c:	b2db      	uxtb	r3, r3
 800199e:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	77bb      	strb	r3, [r7, #30]
 80019a4:	e033      	b.n	8001a0e <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 80019a6:	f107 020c 	add.w	r2, r7, #12
 80019aa:	2306      	movs	r3, #6
 80019ac:	2107      	movs	r1, #7
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fd9c 	bl	80014ec <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 80019b4:	7b3b      	ldrb	r3, [r7, #12]
 80019b6:	041a      	lsls	r2, r3, #16
 80019b8:	7b7b      	ldrb	r3, [r7, #13]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	4313      	orrs	r3, r2
 80019be:	7bba      	ldrb	r2, [r7, #14]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80019c6:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	041a      	lsls	r2, r3, #16
 80019cc:	7c3b      	ldrb	r3, [r7, #16]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	4313      	orrs	r3, r2
 80019d2:	7c7a      	ldrb	r2, [r7, #17]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80019da:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 80019dc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80019ea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	3320      	adds	r3, #32
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 80019fa:	6979      	ldr	r1, [r7, #20]
 80019fc:	69b8      	ldr	r0, [r7, #24]
 80019fe:	f7ff f9bb 	bl	8000d78 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8001a02:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	77bb      	strb	r3, [r7, #30]
 8001a0e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbc5      	blt.n	80019a6 <max30102_read_fifo+0x4c>
    }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <max30102_get_last_heart_rate>:
#include <stdio.h>

// Function to calculate heart rate based on the last few samples
float max30102_get_last_heart_rate(max30102_t *obj)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    // Calculate heart rate based on last few samples
    // For simplicity, let's assume the heart rate is the same as the last IR sample
    // You can implement more sophisticated algorithms here

    // Check if interrupt flag is set, indicating new data is available
    if (obj->_interrupt_flag)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <max30102_get_last_heart_rate+0x34>
    {
        // Calculate heart rate based on last sample
        uint32_t last_ir_sample = obj->_ir_samples[MAX30102_SAMPLE_LEN_MAX - 1];
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a3c:	60fb      	str	r3, [r7, #12]
        // Convert IR sample to heart rate (example conversion, replace with actual algorithm)
        float heart_rate = last_ir_sample * 0.6f; // Example conversion
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a48:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001a70 <max30102_get_last_heart_rate+0x4c>
 8001a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a50:	edc7 7a02 	vstr	s15, [r7, #8]
        return heart_rate;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	e001      	b.n	8001a5c <max30102_get_last_heart_rate+0x38>
    }
    else
    {
        // No new data available, return 0
        return 0.0f;
 8001a58:	f04f 0300 	mov.w	r3, #0
    }
}
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb0 0a67 	vmov.f32	s0, s15
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	3f19999a 	.word	0x3f19999a

08001a74 <max30102_get_last_spO2>:

// Function to calculate SpO2 based on the last few samples
float max30102_get_last_spO2(max30102_t *obj)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    // Calculate SpO2 based on last few samples
    // For simplicity, let's assume the SpO2 is calculated based on IR and red samples
    // You can implement more sophisticated algorithms here

    // Ensure there are enough samples in the buffer to calculate SpO2
    if (obj->_interrupt_flag)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01b      	beq.n	8001abe <max30102_get_last_spO2+0x4a>
    {
        // Calculate SpO2 based on last samples
        uint32_t last_ir_sample = obj->_ir_samples[MAX30102_SAMPLE_LEN_MAX - 1];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a8c:	617b      	str	r3, [r7, #20]
        uint32_t last_red_sample = obj->_red_samples[MAX30102_SAMPLE_LEN_MAX - 1];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001a94:	613b      	str	r3, [r7, #16]

        // Convert IR and red samples to SpO2 (example conversion, replace with actual algorithm)
        float spo2 = (last_red_sample / (float)last_ir_sample) * 100.0f; // Example conversion
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aae:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001ad4 <max30102_get_last_spO2+0x60>
 8001ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab6:	edc7 7a03 	vstr	s15, [r7, #12]
        return spo2;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	e001      	b.n	8001ac2 <max30102_get_last_spO2+0x4e>
    }
    else
    {
        // No new data available, return 0
        return 0.0f;
 8001abe:	f04f 0300 	mov.w	r3, #0
    }
}
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	42c80000 	.word	0x42c80000

08001ad8 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	211f      	movs	r1, #31
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fcfe 	bl	80014ec <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8001af0:	2301      	movs	r3, #1
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	2120      	movs	r1, #32
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff fcf8 	bl	80014ec <max30102_read>
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <HAL_ADC_MspInit+0x7c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d127      	bne.n	8001bc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_ADC_MspInit+0x80>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a15      	ldr	r2, [pc, #84]	@ (8001bd4 <HAL_ADC_MspInit+0x80>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_ADC_MspInit+0x80>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_ADC_MspInit+0x80>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <HAL_ADC_MspInit+0x80>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <HAL_ADC_MspInit+0x80>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <HAL_ADC_MspInit+0x84>)
 8001bc2:	f001 f829 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	@ 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40012000 	.word	0x40012000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	@ 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <HAL_I2C_MspInit+0xa4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d13b      	bne.n	8001c76 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_I2C_MspInit+0xa8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a1f      	ldr	r2, [pc, #124]	@ (8001c84 <HAL_I2C_MspInit+0xa8>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_I2C_MspInit+0xa8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c1a:	23c0      	movs	r3, #192	@ 0xc0
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1e:	2312      	movs	r3, #18
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4814      	ldr	r0, [pc, #80]	@ (8001c88 <HAL_I2C_MspInit+0xac>)
 8001c36:	f000 ffef 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_I2C_MspInit+0xa8>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <HAL_I2C_MspInit+0xa8>)
 8001c44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <HAL_I2C_MspInit+0xa8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	201f      	movs	r0, #31
 8001c5c:	f000 ff05 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c60:	201f      	movs	r0, #31
 8001c62:	f000 ff1e 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2020      	movs	r0, #32
 8001c6c:	f000 fefd 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c70:	2020      	movs	r0, #32
 8001c72:	f000 ff16 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	@ 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40005400 	.word	0x40005400
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	@ 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d20 <HAL_UART_MspInit+0x94>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d134      	bne.n	8001d18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_UART_MspInit+0x98>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	@ (8001d28 <HAL_UART_MspInit+0x9c>)
 8001d04:	f000 ff88 	bl	8002c18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2025      	movs	r0, #37	@ 0x25
 8001d0e:	f000 feac 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d12:	2025      	movs	r0, #37	@ 0x25
 8001d14:	f000 fec5 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	@ 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <NMI_Handler+0x4>

08001d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <MemManage_Handler+0x4>

08001d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 f961 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <I2C1_EV_IRQHandler+0x10>)
 8001d92:	f001 fda7 	bl	80038e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200000cc 	.word	0x200000cc

08001da0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <I2C1_ER_IRQHandler+0x10>)
 8001da6:	f001 fef0 	bl	8003b8a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200000cc 	.word	0x200000cc

08001db4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <USART1_IRQHandler+0x10>)
 8001dba:	f004 fb21 	bl	8006400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000120 	.word	0x20000120

08001dc8 <EXTI9_5_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI9_5_IRQn 0 */
    max30102_on_interrupt(&max30102);
 8001dcc:	4804      	ldr	r0, [pc, #16]	@ (8001de0 <EXTI9_5_IRQHandler+0x18>)
 8001dce:	f7ff fc1b 	bl	8001608 <max30102_on_interrupt>
    /* USER CODE END EXTI9_5_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001dd2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001dd6:	f001 f8d7 	bl	8002f88 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI9_5_IRQn 1 */
    /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000168 	.word	0x20000168

08001de4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e00a      	b.n	8001e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df6:	f3af 8000 	nop.w
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf0      	blt.n	8001df6 <_read+0x12>
  }

  return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e009      	b.n	8001e44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe ff87 	bl	8000d4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf1      	blt.n	8001e30 <_write+0x12>
  }
  return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_close>:

int _close(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_isatty>:

int _isatty(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <_sbrk+0x5c>)
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <_sbrk+0x60>)
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <_sbrk+0x64>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <_sbrk+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d207      	bcs.n	8001f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef0:	f005 fb8a 	bl	8007608 <__errno>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001efe:	e009      	b.n	8001f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f06:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <_sbrk+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20020000 	.word	0x20020000
 8001f20:	00000400 	.word	0x00000400
 8001f24:	20000270 	.word	0x20000270
 8001f28:	200003c8 	.word	0x200003c8

08001f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <SystemInit+0x20>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <SystemInit+0x20>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f54:	f7ff ffea 	bl	8001f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f5a:	490d      	ldr	r1, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f70:	4c0a      	ldr	r4, [pc, #40]	@ (8001f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f005 fb49 	bl	8007614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f82:	f7fe ff49 	bl	8000e18 <main>
  bx  lr    
 8001f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f94:	08008564 	.word	0x08008564
  ldr r2, =_sbss
 8001f98:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f9c:	200003c4 	.word	0x200003c4

08001fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC_IRQHandler>
	...

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <HAL_Init+0x40>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <HAL_Init+0x40>)
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	@ (8001fe4 <HAL_Init+0x40>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 fd41 	bl	8002a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f000 f808 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff fd94 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fd59 	bl	8002abe <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002024:	f000 fd21 	bl	8002a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	@ (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000000 	.word	0x20000000
 8002040:	20000008 	.word	0x20000008
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000008 	.word	0x20000008
 800206c:	20000274 	.word	0x20000274

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000274 	.word	0x20000274

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000008 	.word	0x20000008

080020d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e033      	b.n	800214e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fd30 	bl	8001b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d118      	bne.n	8002140 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002116:	f023 0302 	bic.w	r3, r3, #2
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 faca 	bl	80026bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
 800213e:	e001      	b.n	8002144 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_ADC_Start+0x1a>
 800216e:	2302      	movs	r3, #2
 8002170:	e097      	b.n	80022a2 <HAL_ADC_Start+0x14a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d018      	beq.n	80021ba <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002198:	4b45      	ldr	r3, [pc, #276]	@ (80022b0 <HAL_ADC_Start+0x158>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a45      	ldr	r2, [pc, #276]	@ (80022b4 <HAL_ADC_Start+0x15c>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0c9a      	lsrs	r2, r3, #18
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021ac:	e002      	b.n	80021b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f9      	bne.n	80021ae <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d15f      	bne.n	8002288 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002206:	d106      	bne.n	8002216 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220c:	f023 0206 	bic.w	r2, r3, #6
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	645a      	str	r2, [r3, #68]	@ 0x44
 8002214:	e002      	b.n	800221c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002224:	4b24      	ldr	r3, [pc, #144]	@ (80022b8 <HAL_ADC_Start+0x160>)
 8002226:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002230:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d129      	bne.n	80022a0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e020      	b.n	80022a0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_ADC_Start+0x164>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d11b      	bne.n	80022a0 <HAL_ADC_Start+0x148>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d114      	bne.n	80022a0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	e00b      	b.n	80022a0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	f043 0210 	orr.w	r2, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000
 80022b4:	431bde83 	.word	0x431bde83
 80022b8:	40012300 	.word	0x40012300
 80022bc:	40012000 	.word	0x40012000

080022c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Stop+0x16>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e021      	b.n	800231a <HAL_ADC_Stop+0x5a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002342:	d113      	bne.n	800236c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800234e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002352:	d10b      	bne.n	800236c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e063      	b.n	8002434 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800236c:	f7ff fe80 	bl	8002070 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002372:	e021      	b.n	80023b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800237a:	d01d      	beq.n	80023b8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_ADC_PollForConversion+0x6c>
 8002382:	f7ff fe75 	bl	8002070 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d212      	bcs.n	80023b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d00b      	beq.n	80023b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03d      	b.n	8002434 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d1d6      	bne.n	8002374 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0212 	mvn.w	r2, #18
 80023ce:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d123      	bne.n	8002432 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11f      	bne.n	8002432 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800240a:	2b00      	cmp	r3, #0
 800240c:	d111      	bne.n	8002432 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1c>
 8002470:	2302      	movs	r3, #2
 8002472:	e113      	b.n	800269c <HAL_ADC_ConfigChannel+0x244>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b09      	cmp	r3, #9
 8002482:	d925      	bls.n	80024d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68d9      	ldr	r1, [r3, #12]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	3b1e      	subs	r3, #30
 800249a:	2207      	movs	r2, #7
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43da      	mvns	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	400a      	ands	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68d9      	ldr	r1, [r3, #12]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4403      	add	r3, r0
 80024c2:	3b1e      	subs	r3, #30
 80024c4:	409a      	lsls	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	e022      	b.n	8002516 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6919      	ldr	r1, [r3, #16]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	2207      	movs	r2, #7
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6919      	ldr	r1, [r3, #16]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	4603      	mov	r3, r0
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4403      	add	r3, r0
 800250c:	409a      	lsls	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b06      	cmp	r3, #6
 800251c:	d824      	bhi.n	8002568 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b05      	subs	r3, #5
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	400a      	ands	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b05      	subs	r3, #5
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	635a      	str	r2, [r3, #52]	@ 0x34
 8002566:	e04c      	b.n	8002602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d824      	bhi.n	80025ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b23      	subs	r3, #35	@ 0x23
 8002582:	221f      	movs	r2, #31
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43da      	mvns	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	400a      	ands	r2, r1
 8002590:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b23      	subs	r3, #35	@ 0x23
 80025ac:	fa00 f203 	lsl.w	r2, r0, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80025b8:	e023      	b.n	8002602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b41      	subs	r3, #65	@ 0x41
 80025cc:	221f      	movs	r2, #31
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	400a      	ands	r2, r1
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b41      	subs	r3, #65	@ 0x41
 80025f6:	fa00 f203 	lsl.w	r2, r0, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002602:	4b29      	ldr	r3, [pc, #164]	@ (80026a8 <HAL_ADC_ConfigChannel+0x250>)
 8002604:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a28      	ldr	r2, [pc, #160]	@ (80026ac <HAL_ADC_ConfigChannel+0x254>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10f      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1d8>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b12      	cmp	r3, #18
 8002616:	d10b      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1d      	ldr	r2, [pc, #116]	@ (80026ac <HAL_ADC_ConfigChannel+0x254>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12b      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <HAL_ADC_ConfigChannel+0x258>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <HAL_ADC_ConfigChannel+0x1f4>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b11      	cmp	r3, #17
 800264a:	d122      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a11      	ldr	r2, [pc, #68]	@ (80026b0 <HAL_ADC_ConfigChannel+0x258>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800266e:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <HAL_ADC_ConfigChannel+0x25c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <HAL_ADC_ConfigChannel+0x260>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9a      	lsrs	r2, r3, #18
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002684:	e002      	b.n	800268c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3b01      	subs	r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f9      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40012300 	.word	0x40012300
 80026ac:	40012000 	.word	0x40012000
 80026b0:	10000012 	.word	0x10000012
 80026b4:	20000000 	.word	0x20000000
 80026b8:	431bde83 	.word	0x431bde83

080026bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c4:	4b79      	ldr	r3, [pc, #484]	@ (80028ac <ADC_Init+0x1f0>)
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	021a      	lsls	r2, r3, #8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	4a58      	ldr	r2, [pc, #352]	@ (80028b0 <ADC_Init+0x1f4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6899      	ldr	r1, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e00f      	b.n	80027ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0202 	bic.w	r2, r2, #2
 80027c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7e1b      	ldrb	r3, [r3, #24]
 80027d4:	005a      	lsls	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	3b01      	subs	r3, #1
 8002814:	035a      	lsls	r2, r3, #13
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e007      	b.n	8002830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800282e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800283e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	3b01      	subs	r3, #1
 800284c:	051a      	lsls	r2, r3, #20
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002872:	025a      	lsls	r2, r3, #9
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800288a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	029a      	lsls	r2, r3, #10
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012300 	.word	0x40012300
 80028b0:	0f000001 	.word	0x0f000001

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4907      	ldr	r1, [pc, #28]	@ (8002950 <__NVIC_EnableIRQ+0x38>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db0a      	blt.n	800297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	490c      	ldr	r1, [pc, #48]	@ (80029a0 <__NVIC_SetPriority+0x4c>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	440b      	add	r3, r1
 8002978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800297c:	e00a      	b.n	8002994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4908      	ldr	r1, [pc, #32]	@ (80029a4 <__NVIC_SetPriority+0x50>)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3b04      	subs	r3, #4
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	440b      	add	r3, r1
 8002992:	761a      	strb	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	@ 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f1c3 0307 	rsb	r3, r3, #7
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	bf28      	it	cs
 80029c6:	2304      	movcs	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <NVIC_EncodePriority+0x30>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3b03      	subs	r3, #3
 80029d6:	e000      	b.n	80029da <NVIC_EncodePriority+0x32>
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	4313      	orrs	r3, r2
         );
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	@ 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a20:	d301      	bcc.n	8002a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a26:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <SysTick_Config+0x40>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2e:	210f      	movs	r1, #15
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a34:	f7ff ff8e 	bl	8002954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <SysTick_Config+0x40>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3e:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <SysTick_Config+0x40>)
 8002a40:	2207      	movs	r2, #7
 8002a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff29 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a7c:	f7ff ff3e 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f7ff ff8e 	bl	80029a8 <NVIC_EncodePriority>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff5d 	bl	8002954 <__NVIC_SetPriority>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff31 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffa2 	bl	8002a10 <SysTick_Config>
 8002acc:	4603      	mov	r3, r0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff fac4 	bl	8002070 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d008      	beq.n	8002b08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e052      	b.n	8002bae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0216 	bic.w	r2, r2, #22
 8002b16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <HAL_DMA_Abort+0x62>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0208 	bic.w	r2, r2, #8
 8002b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b58:	e013      	b.n	8002b82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5a:	f7ff fa89 	bl	8002070 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d90c      	bls.n	8002b82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2203      	movs	r2, #3
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e015      	b.n	8002bae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e4      	bne.n	8002b5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	223f      	movs	r2, #63	@ 0x3f
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2280      	movs	r2, #128	@ 0x80
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e00c      	b.n	8002bee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c08:	b2db      	uxtb	r3, r3
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	@ 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e159      	b.n	8002ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 8148 	bne.w	8002ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d005      	beq.n	8002c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d130      	bne.n	8002ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	2203      	movs	r2, #3
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 0201 	and.w	r2, r3, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d017      	beq.n	8002d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d123      	bne.n	8002d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	08da      	lsrs	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3208      	adds	r2, #8
 8002d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	69b9      	ldr	r1, [r7, #24]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80a2 	beq.w	8002ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b57      	ldr	r3, [pc, #348]	@ (8002f00 <HAL_GPIO_Init+0x2e8>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	4a56      	ldr	r2, [pc, #344]	@ (8002f00 <HAL_GPIO_Init+0x2e8>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dae:	4b54      	ldr	r3, [pc, #336]	@ (8002f00 <HAL_GPIO_Init+0x2e8>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dba:	4a52      	ldr	r2, [pc, #328]	@ (8002f04 <HAL_GPIO_Init+0x2ec>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a49      	ldr	r2, [pc, #292]	@ (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d019      	beq.n	8002e1a <HAL_GPIO_Init+0x202>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a48      	ldr	r2, [pc, #288]	@ (8002f0c <HAL_GPIO_Init+0x2f4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0x1fe>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a47      	ldr	r2, [pc, #284]	@ (8002f10 <HAL_GPIO_Init+0x2f8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00d      	beq.n	8002e12 <HAL_GPIO_Init+0x1fa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a46      	ldr	r2, [pc, #280]	@ (8002f14 <HAL_GPIO_Init+0x2fc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <HAL_GPIO_Init+0x1f6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a45      	ldr	r2, [pc, #276]	@ (8002f18 <HAL_GPIO_Init+0x300>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_GPIO_Init+0x1f2>
 8002e06:	2304      	movs	r3, #4
 8002e08:	e008      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e0a:	2307      	movs	r3, #7
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e004      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	f002 0203 	and.w	r2, r2, #3
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	4093      	lsls	r3, r2
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e2c:	4935      	ldr	r1, [pc, #212]	@ (8002f04 <HAL_GPIO_Init+0x2ec>)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	3302      	adds	r3, #2
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e3a:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <HAL_GPIO_Init+0x304>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f1c <HAL_GPIO_Init+0x304>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e64:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <HAL_GPIO_Init+0x304>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e88:	4a24      	ldr	r2, [pc, #144]	@ (8002f1c <HAL_GPIO_Init+0x304>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e8e:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <HAL_GPIO_Init+0x304>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f1c <HAL_GPIO_Init+0x304>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb8:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <HAL_GPIO_Init+0x304>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002edc:	4a0f      	ldr	r2, [pc, #60]	@ (8002f1c <HAL_GPIO_Init+0x304>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	f67f aea2 	bls.w	8002c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3724      	adds	r7, #36	@ 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40013800 	.word	0x40013800
 8002f08:	40020000 	.word	0x40020000
 8002f0c:	40020400 	.word	0x40020400
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020c00 	.word	0x40020c00
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40013c00 	.word	0x40013c00

08002f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f30:	787b      	ldrb	r3, [r7, #1]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f3c:	e003      	b.n	8002f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	041a      	lsls	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	619a      	str	r2, [r3, #24]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f64:	887a      	ldrh	r2, [r7, #2]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	041a      	lsls	r2, r3, #16
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	400b      	ands	r3, r1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	619a      	str	r2, [r3, #24]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f9e:	4a05      	ldr	r2, [pc, #20]	@ (8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f806 	bl	8002fb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40013c00 	.word	0x40013c00

08002fb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e12b      	b.n	800323a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fdf0 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	@ 0x24
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003034:	f003 f8e0 	bl	80061f8 <HAL_RCC_GetPCLK1Freq>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a81      	ldr	r2, [pc, #516]	@ (8003244 <HAL_I2C_Init+0x274>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d807      	bhi.n	8003054 <HAL_I2C_Init+0x84>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a80      	ldr	r2, [pc, #512]	@ (8003248 <HAL_I2C_Init+0x278>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e006      	b.n	8003062 <HAL_I2C_Init+0x92>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a7d      	ldr	r2, [pc, #500]	@ (800324c <HAL_I2C_Init+0x27c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0e7      	b.n	800323a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a78      	ldr	r2, [pc, #480]	@ (8003250 <HAL_I2C_Init+0x280>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9b      	lsrs	r3, r3, #18
 8003074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a6a      	ldr	r2, [pc, #424]	@ (8003244 <HAL_I2C_Init+0x274>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d802      	bhi.n	80030a4 <HAL_I2C_Init+0xd4>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	e009      	b.n	80030b8 <HAL_I2C_Init+0xe8>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	4a69      	ldr	r2, [pc, #420]	@ (8003254 <HAL_I2C_Init+0x284>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	3301      	adds	r3, #1
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	495c      	ldr	r1, [pc, #368]	@ (8003244 <HAL_I2C_Init+0x274>)
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d819      	bhi.n	800310c <HAL_I2C_Init+0x13c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e59      	subs	r1, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030ec:	400b      	ands	r3, r1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_I2C_Init+0x138>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1e59      	subs	r1, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003100:	3301      	adds	r3, #1
 8003102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003106:	e051      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003108:	2304      	movs	r3, #4
 800310a:	e04f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <HAL_I2C_Init+0x168>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e012      	b.n	800315e <HAL_I2C_Init+0x18e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	0099      	lsls	r1, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x196>
 8003162:	2301      	movs	r3, #1
 8003164:	e022      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10e      	bne.n	800318c <HAL_I2C_Init+0x1bc>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e58      	subs	r0, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	440b      	add	r3, r1
 800317c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800318a:	e00f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e58      	subs	r0, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	6809      	ldr	r1, [r1, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6911      	ldr	r1, [r2, #16]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	000186a0 	.word	0x000186a0
 8003248:	001e847f 	.word	0x001e847f
 800324c:	003d08ff 	.word	0x003d08ff
 8003250:	431bde83 	.word	0x431bde83
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326a:	2b80      	cmp	r3, #128	@ 0x80
 800326c:	d103      	bne.n	8003276 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	461a      	mov	r2, r3
 8003290:	460b      	mov	r3, r1
 8003292:	817b      	strh	r3, [r7, #10]
 8003294:	4613      	mov	r3, r2
 8003296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7fe feea 	bl	8002070 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	f040 80e0 	bne.w	800346c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2319      	movs	r3, #25
 80032b2:	2201      	movs	r2, #1
 80032b4:	4970      	ldr	r1, [pc, #448]	@ (8003478 <HAL_I2C_Master_Transmit+0x1f4>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f002 f8ea 	bl	8005490 <I2C_WaitOnFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
 80032c4:	e0d3      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_I2C_Master_Transmit+0x50>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0cc      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d007      	beq.n	80032fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2221      	movs	r2, #33	@ 0x21
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2210      	movs	r2, #16
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	893a      	ldrh	r2, [r7, #8]
 800332a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a50      	ldr	r2, [pc, #320]	@ (800347c <HAL_I2C_Master_Transmit+0x1f8>)
 800333a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800333c:	8979      	ldrh	r1, [r7, #10]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f001 feac 	bl	80050a0 <I2C_MasterRequestWrite>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e08d      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003368:	e066      	b.n	8003438 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	6a39      	ldr	r1, [r7, #32]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f002 f9a8 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	2b04      	cmp	r3, #4
 8003380:	d107      	bne.n	8003392 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e06b      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d11b      	bne.n	800340c <HAL_I2C_Master_Transmit+0x188>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d017      	beq.n	800340c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	6a39      	ldr	r1, [r7, #32]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f002 f99f 	bl	8005754 <I2C_WaitOnBTFFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2b04      	cmp	r3, #4
 8003422:	d107      	bne.n	8003434 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003432:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e01a      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d194      	bne.n	800336a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	00100002 	.word	0x00100002
 800347c:	ffff0000 	.word	0xffff0000

08003480 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08c      	sub	sp, #48	@ 0x30
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	461a      	mov	r2, r3
 800348c:	460b      	mov	r3, r1
 800348e:	817b      	strh	r3, [r7, #10]
 8003490:	4613      	mov	r3, r2
 8003492:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003494:	f7fe fdec 	bl	8002070 <HAL_GetTick>
 8003498:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	f040 8217 	bne.w	80038d6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2319      	movs	r3, #25
 80034ae:	2201      	movs	r2, #1
 80034b0:	497c      	ldr	r1, [pc, #496]	@ (80036a4 <HAL_I2C_Master_Receive+0x224>)
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f001 ffec 	bl	8005490 <I2C_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
 80034c0:	e20a      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_I2C_Master_Receive+0x50>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e203      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d007      	beq.n	80034f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003504:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2222      	movs	r2, #34	@ 0x22
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2210      	movs	r2, #16
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	893a      	ldrh	r2, [r7, #8]
 8003526:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4a5c      	ldr	r2, [pc, #368]	@ (80036a8 <HAL_I2C_Master_Receive+0x228>)
 8003536:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003538:	8979      	ldrh	r1, [r7, #10]
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f001 fe30 	bl	80051a4 <I2C_MasterRequestRead>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e1c4      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d113      	bne.n	800357e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e198      	b.n	80038b0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003582:	2b01      	cmp	r3, #1
 8003584:	d11b      	bne.n	80035be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e178      	b.n	80038b0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d11b      	bne.n	80035fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	e158      	b.n	80038b0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800360c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003624:	e144      	b.n	80038b0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	2b03      	cmp	r3, #3
 800362c:	f200 80f1 	bhi.w	8003812 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003634:	2b01      	cmp	r3, #1
 8003636:	d123      	bne.n	8003680 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f002 f903 	bl	8005848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e145      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800367e:	e117      	b.n	80038b0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	2b02      	cmp	r3, #2
 8003686:	d14e      	bne.n	8003726 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	2200      	movs	r2, #0
 8003690:	4906      	ldr	r1, [pc, #24]	@ (80036ac <HAL_I2C_Master_Receive+0x22c>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f001 fefc 	bl	8005490 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e11a      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
 80036a2:	bf00      	nop
 80036a4:	00100002 	.word	0x00100002
 80036a8:	ffff0000 	.word	0xffff0000
 80036ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003724:	e0c4      	b.n	80038b0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	2200      	movs	r2, #0
 800372e:	496c      	ldr	r1, [pc, #432]	@ (80038e0 <HAL_I2C_Master_Receive+0x460>)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f001 fead 	bl	8005490 <I2C_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0cb      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800374e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	2200      	movs	r2, #0
 800378a:	4955      	ldr	r1, [pc, #340]	@ (80038e0 <HAL_I2C_Master_Receive+0x460>)
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f001 fe7f 	bl	8005490 <I2C_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e09d      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003810:	e04e      	b.n	80038b0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f002 f816 	bl	8005848 <I2C_WaitOnRXNEFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e058      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d124      	bne.n	80038b0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	2b03      	cmp	r3, #3
 800386c:	d107      	bne.n	800387e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800387c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f aeb6 	bne.w	8003626 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3728      	adds	r7, #40	@ 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	00010004 	.word	0x00010004

080038e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003904:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b10      	cmp	r3, #16
 8003912:	d003      	beq.n	800391c <HAL_I2C_EV_IRQHandler+0x38>
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b40      	cmp	r3, #64	@ 0x40
 8003918:	f040 80b1 	bne.w	8003a7e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <HAL_I2C_EV_IRQHandler+0x6e>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800393c:	d003      	beq.n	8003946 <HAL_I2C_EV_IRQHandler+0x62>
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003944:	d101      	bne.n	800394a <HAL_I2C_EV_IRQHandler+0x66>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_I2C_EV_IRQHandler+0x68>
 800394a:	2300      	movs	r3, #0
 800394c:	2b01      	cmp	r3, #1
 800394e:	f000 8114 	beq.w	8003b7a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x90>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f001 fffa 	bl	8005960 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fd7a 	bl	8004466 <I2C_Master_SB>
 8003972:	e083      	b.n	8003a7c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_I2C_EV_IRQHandler+0xac>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fdf2 	bl	8004572 <I2C_Master_ADD10>
 800398e:	e075      	b.n	8003a7c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_I2C_EV_IRQHandler+0xc8>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fe0e 	bl	80045c6 <I2C_Master_ADDR>
 80039aa:	e067      	b.n	8003a7c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d036      	beq.n	8003a24 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c4:	f000 80db 	beq.w	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_I2C_EV_IRQHandler+0x10a>
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_I2C_EV_IRQHandler+0x10a>
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f9d6 	bl	8003d98 <I2C_MasterTransmit_TXE>
 80039ec:	e046      	b.n	8003a7c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80c2 	beq.w	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80bc 	beq.w	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a06:	7bbb      	ldrb	r3, [r7, #14]
 8003a08:	2b21      	cmp	r3, #33	@ 0x21
 8003a0a:	d103      	bne.n	8003a14 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fa5f 	bl	8003ed0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a12:	e0b4      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b40      	cmp	r3, #64	@ 0x40
 8003a18:	f040 80b1 	bne.w	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 facd 	bl	8003fbc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a22:	e0ac      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a32:	f000 80a4 	beq.w	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00d      	beq.n	8003a5c <HAL_I2C_EV_IRQHandler+0x178>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_I2C_EV_IRQHandler+0x178>
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fb49 	bl	80040ec <I2C_MasterReceive_RXNE>
 8003a5a:	e00f      	b.n	8003a7c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 808b 	beq.w	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8085 	beq.w	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fc01 	bl	800427c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7a:	e080      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
 8003a7c:	e07f      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	e007      	b.n	8003aa0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d011      	beq.n	8003ace <HAL_I2C_EV_IRQHandler+0x1ea>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 ffcc 	bl	8004a64 <I2C_Slave_ADDR>
 8003acc:	e05a      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_I2C_EV_IRQHandler+0x206>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f001 f806 	bl	8004af4 <I2C_Slave_STOPF>
 8003ae8:	e04c      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aea:	7bbb      	ldrb	r3, [r7, #14]
 8003aec:	2b21      	cmp	r3, #33	@ 0x21
 8003aee:	d002      	beq.n	8003af6 <HAL_I2C_EV_IRQHandler+0x212>
 8003af0:	7bbb      	ldrb	r3, [r7, #14]
 8003af2:	2b29      	cmp	r3, #41	@ 0x29
 8003af4:	d120      	bne.n	8003b38 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00d      	beq.n	8003b1c <HAL_I2C_EV_IRQHandler+0x238>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_I2C_EV_IRQHandler+0x238>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d103      	bne.n	8003b1c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fee7 	bl	80048e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b1a:	e032      	b.n	8003b82 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d02d      	beq.n	8003b82 <HAL_I2C_EV_IRQHandler+0x29e>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d028      	beq.n	8003b82 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 ff16 	bl	8004962 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b36:	e024      	b.n	8003b82 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <HAL_I2C_EV_IRQHandler+0x27a>
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_I2C_EV_IRQHandler+0x27a>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 ff24 	bl	80049a4 <I2C_SlaveReceive_RXNE>
 8003b5c:	e012      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 ff54 	bl	8004a20 <I2C_SlaveReceive_BTF>
 8003b78:	e004      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b08a      	sub	sp, #40	@ 0x28
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_I2C_ER_IRQHandler+0x4a>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003bd2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_I2C_ER_IRQHandler+0x70>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	f043 0302 	orr.w	r3, r3, #2
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003bf8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d03e      	beq.n	8003c82 <HAL_I2C_ER_IRQHandler+0xf8>
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d039      	beq.n	8003c82 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003c0e:	7efb      	ldrb	r3, [r7, #27]
 8003c10:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c28:	7ebb      	ldrb	r3, [r7, #26]
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d112      	bne.n	8003c54 <HAL_I2C_ER_IRQHandler+0xca>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10f      	bne.n	8003c54 <HAL_I2C_ER_IRQHandler+0xca>
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b21      	cmp	r3, #33	@ 0x21
 8003c38:	d008      	beq.n	8003c4c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	2b29      	cmp	r3, #41	@ 0x29
 8003c3e:	d005      	beq.n	8003c4c <HAL_I2C_ER_IRQHandler+0xc2>
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b28      	cmp	r3, #40	@ 0x28
 8003c44:	d106      	bne.n	8003c54 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b21      	cmp	r3, #33	@ 0x21
 8003c4a:	d103      	bne.n	8003c54 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f001 f881 	bl	8004d54 <I2C_Slave_AF>
 8003c52:	e016      	b.n	8003c82 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c5c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c66:	7efb      	ldrb	r3, [r7, #27]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d002      	beq.n	8003c72 <HAL_I2C_ER_IRQHandler+0xe8>
 8003c6c:	7efb      	ldrb	r3, [r7, #27]
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d107      	bne.n	8003c82 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c80:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_I2C_ER_IRQHandler+0x11e>
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003ca6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 f8be 	bl	8004e3c <I2C_ITError>
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	3728      	adds	r7, #40	@ 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
 8003d24:	4613      	mov	r3, r2
 8003d26:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d150      	bne.n	8003e60 <I2C_MasterTransmit_TXE+0xc8>
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b21      	cmp	r3, #33	@ 0x21
 8003dc2:	d14d      	bne.n	8003e60 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d01d      	beq.n	8003e06 <I2C_MasterTransmit_TXE+0x6e>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d01a      	beq.n	8003e06 <I2C_MasterTransmit_TXE+0x6e>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dd6:	d016      	beq.n	8003e06 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003de6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2211      	movs	r2, #17
 8003dec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ff62 	bl	8003cc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e04:	e060      	b.n	8003ec8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e14:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e24:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b40      	cmp	r3, #64	@ 0x40
 8003e3e:	d107      	bne.n	8003e50 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff7d 	bl	8003d48 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e4e:	e03b      	b.n	8003ec8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ff35 	bl	8003cc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e5e:	e033      	b.n	8003ec8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b21      	cmp	r3, #33	@ 0x21
 8003e64:	d005      	beq.n	8003e72 <I2C_MasterTransmit_TXE+0xda>
 8003e66:	7bbb      	ldrb	r3, [r7, #14]
 8003e68:	2b40      	cmp	r3, #64	@ 0x40
 8003e6a:	d12d      	bne.n	8003ec8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b22      	cmp	r3, #34	@ 0x22
 8003e70:	d12a      	bne.n	8003ec8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e8c:	e01c      	b.n	8003ec8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b40      	cmp	r3, #64	@ 0x40
 8003e98:	d103      	bne.n	8003ea2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f88e 	bl	8003fbc <I2C_MemoryTransmit_TXE_BTF>
}
 8003ea0:	e012      	b.n	8003ec8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ec6:	e7ff      	b.n	8003ec8 <I2C_MasterTransmit_TXE+0x130>
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b21      	cmp	r3, #33	@ 0x21
 8003ee8:	d164      	bne.n	8003fb4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d012      	beq.n	8003f1a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f18:	e04c      	b.n	8003fb4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d01d      	beq.n	8003f5c <I2C_MasterTransmit_BTF+0x8c>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d01a      	beq.n	8003f5c <I2C_MasterTransmit_BTF+0x8c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f2c:	d016      	beq.n	8003f5c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f3c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2211      	movs	r2, #17
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff feb7 	bl	8003cc8 <HAL_I2C_MasterTxCpltCallback>
}
 8003f5a:	e02b      	b.n	8003fb4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f6a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f7a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b40      	cmp	r3, #64	@ 0x40
 8003f94:	d107      	bne.n	8003fa6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fed2 	bl	8003d48 <HAL_I2C_MemTxCpltCallback>
}
 8003fa4:	e006      	b.n	8003fb4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fe8a 	bl	8003cc8 <HAL_I2C_MasterTxCpltCallback>
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11d      	bne.n	8004010 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10b      	bne.n	8003ff4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003ff2:	e077      	b.n	80040e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	121b      	asrs	r3, r3, #8
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800400e:	e069      	b.n	80040e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10b      	bne.n	8004030 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800401c:	b2da      	uxtb	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800402e:	e059      	b.n	80040e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004034:	2b02      	cmp	r3, #2
 8004036:	d152      	bne.n	80040de <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b22      	cmp	r3, #34	@ 0x22
 800403c:	d10d      	bne.n	800405a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800404c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004058:	e044      	b.n	80040e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b21      	cmp	r3, #33	@ 0x21
 8004068:	d112      	bne.n	8004090 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800408e:	e029      	b.n	80040e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d124      	bne.n	80040e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b21      	cmp	r3, #33	@ 0x21
 800409e:	d121      	bne.n	80040e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fe36 	bl	8003d48 <HAL_I2C_MemTxCpltCallback>
}
 80040dc:	e002      	b.n	80040e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff f8ba 	bl	8003258 <I2C_Flush_DR>
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b22      	cmp	r3, #34	@ 0x22
 80040fe:	f040 80b9 	bne.w	8004274 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d921      	bls.n	800415a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b03      	cmp	r3, #3
 8004144:	f040 8096 	bne.w	8004274 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004156:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004158:	e08c      	b.n	8004274 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	2b02      	cmp	r3, #2
 8004160:	d07f      	beq.n	8004262 <I2C_MasterReceive_RXNE+0x176>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d002      	beq.n	800416e <I2C_MasterReceive_RXNE+0x82>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d179      	bne.n	8004262 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f001 fb38 	bl	80057e4 <I2C_WaitOnSTOPRequestThroughIT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d14c      	bne.n	8004214 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004188:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004198:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	d10a      	bne.n	80041ea <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fdba 	bl	8003d5c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041e8:	e044      	b.n	8004274 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d002      	beq.n	80041fe <I2C_MasterReceive_RXNE+0x112>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d103      	bne.n	8004206 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
 8004204:	e002      	b.n	800420c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2212      	movs	r2, #18
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fd65 	bl	8003cdc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004212:	e02f      	b.n	8004274 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004222:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fd88 	bl	8003d70 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004260:	e008      	b.n	8004274 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004270:	605a      	str	r2, [r3, #4]
}
 8004272:	e7ff      	b.n	8004274 <I2C_MasterReceive_RXNE+0x188>
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b04      	cmp	r3, #4
 8004292:	d11b      	bne.n	80042cc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80042ca:	e0c8      	b.n	800445e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d129      	bne.n	800432a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d00a      	beq.n	8004302 <I2C_MasterReceive_BTF+0x86>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d007      	beq.n	8004302 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004300:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004328:	e099      	b.n	800445e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	f040 8081 	bne.w	8004438 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d002      	beq.n	8004342 <I2C_MasterReceive_BTF+0xc6>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d108      	bne.n	8004354 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e019      	b.n	8004388 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d002      	beq.n	8004360 <I2C_MasterReceive_BTF+0xe4>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d108      	bne.n	8004372 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e00a      	b.n	8004388 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b10      	cmp	r3, #16
 8004376:	d007      	beq.n	8004388 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004386:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b40      	cmp	r3, #64	@ 0x40
 80043f6:	d10a      	bne.n	800440e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fca8 	bl	8003d5c <HAL_I2C_MemRxCpltCallback>
}
 800440c:	e027      	b.n	800445e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d002      	beq.n	8004422 <I2C_MasterReceive_BTF+0x1a6>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b20      	cmp	r3, #32
 8004420:	d103      	bne.n	800442a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
 8004428:	e002      	b.n	8004430 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2212      	movs	r2, #18
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fc53 	bl	8003cdc <HAL_I2C_MasterRxCpltCallback>
}
 8004436:	e012      	b.n	800445e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d117      	bne.n	80044aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004492:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004494:	e067      	b.n	8004566 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
}
 80044a8:	e05d      	b.n	8004566 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044b2:	d133      	bne.n	800451c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b21      	cmp	r3, #33	@ 0x21
 80044be:	d109      	bne.n	80044d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044d0:	611a      	str	r2, [r3, #16]
 80044d2:	e008      	b.n	80044e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <I2C_Master_SB+0x92>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d108      	bne.n	800450a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d032      	beq.n	8004566 <I2C_Master_SB+0x100>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d02d      	beq.n	8004566 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004518:	605a      	str	r2, [r3, #4]
}
 800451a:	e024      	b.n	8004566 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10e      	bne.n	8004542 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004528:	b29b      	uxth	r3, r3
 800452a:	11db      	asrs	r3, r3, #7
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0306 	and.w	r3, r3, #6
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f063 030f 	orn	r3, r3, #15
 8004538:	b2da      	uxtb	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	611a      	str	r2, [r3, #16]
}
 8004540:	e011      	b.n	8004566 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004546:	2b01      	cmp	r3, #1
 8004548:	d10d      	bne.n	8004566 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454e:	b29b      	uxth	r3, r3
 8004550:	11db      	asrs	r3, r3, #7
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f003 0306 	and.w	r3, r3, #6
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f063 030e 	orn	r3, r3, #14
 800455e:	b2da      	uxtb	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	611a      	str	r2, [r3, #16]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	b2da      	uxtb	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <I2C_Master_ADD10+0x26>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d108      	bne.n	80045aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00c      	beq.n	80045ba <I2C_Master_ADD10+0x48>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045b8:	605a      	str	r2, [r3, #4]
  }
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b091      	sub	sp, #68	@ 0x44
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b22      	cmp	r3, #34	@ 0x22
 80045ee:	f040 8169 	bne.w	80048c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <I2C_Master_ADDR+0x54>
 80045fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045fe:	2b40      	cmp	r3, #64	@ 0x40
 8004600:	d10b      	bne.n	800461a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004602:	2300      	movs	r3, #0
 8004604:	633b      	str	r3, [r7, #48]	@ 0x30
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	633b      	str	r3, [r7, #48]	@ 0x30
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	633b      	str	r3, [r7, #48]	@ 0x30
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	e160      	b.n	80048dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461e:	2b00      	cmp	r3, #0
 8004620:	d11d      	bne.n	800465e <I2C_Master_ADDR+0x98>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800462a:	d118      	bne.n	800465e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800462c:	2300      	movs	r3, #0
 800462e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004650:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	651a      	str	r2, [r3, #80]	@ 0x50
 800465c:	e13e      	b.n	80048dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d113      	bne.n	8004690 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004668:	2300      	movs	r3, #0
 800466a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	e115      	b.n	80048bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	f040 808a 	bne.w	80047b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800469c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046a2:	d137      	bne.n	8004714 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046c2:	d113      	bne.n	80046ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d4:	2300      	movs	r3, #0
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	e0e7      	b.n	80048bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	623b      	str	r3, [r7, #32]
 8004700:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e0d3      	b.n	80048bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	2b08      	cmp	r3, #8
 8004718:	d02e      	beq.n	8004778 <I2C_Master_ADDR+0x1b2>
 800471a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471c:	2b20      	cmp	r3, #32
 800471e:	d02b      	beq.n	8004778 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004722:	2b12      	cmp	r3, #18
 8004724:	d102      	bne.n	800472c <I2C_Master_ADDR+0x166>
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	2b01      	cmp	r3, #1
 800472a:	d125      	bne.n	8004778 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00e      	beq.n	8004750 <I2C_Master_ADDR+0x18a>
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	2b02      	cmp	r3, #2
 8004736:	d00b      	beq.n	8004750 <I2C_Master_ADDR+0x18a>
 8004738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473a:	2b10      	cmp	r3, #16
 800473c:	d008      	beq.n	8004750 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e007      	b.n	8004760 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800475e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	e0a1      	b.n	80048bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004786:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004788:	2300      	movs	r3, #0
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e085      	b.n	80048bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d14d      	bne.n	8004856 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d016      	beq.n	80047ee <I2C_Master_ADDR+0x228>
 80047c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d013      	beq.n	80047ee <I2C_Master_ADDR+0x228>
 80047c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d010      	beq.n	80047ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800480c:	d117      	bne.n	800483e <I2C_Master_ADDR+0x278>
 800480e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004810:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004814:	d00b      	beq.n	800482e <I2C_Master_ADDR+0x268>
 8004816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004818:	2b01      	cmp	r3, #1
 800481a:	d008      	beq.n	800482e <I2C_Master_ADDR+0x268>
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	2b08      	cmp	r3, #8
 8004820:	d005      	beq.n	800482e <I2C_Master_ADDR+0x268>
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	2b10      	cmp	r3, #16
 8004826:	d002      	beq.n	800482e <I2C_Master_ADDR+0x268>
 8004828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482a:	2b20      	cmp	r3, #32
 800482c:	d107      	bne.n	800483e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800483c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	e032      	b.n	80048bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004864:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004874:	d117      	bne.n	80048a6 <I2C_Master_ADDR+0x2e0>
 8004876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004878:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800487c:	d00b      	beq.n	8004896 <I2C_Master_ADDR+0x2d0>
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	2b01      	cmp	r3, #1
 8004882:	d008      	beq.n	8004896 <I2C_Master_ADDR+0x2d0>
 8004884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004886:	2b08      	cmp	r3, #8
 8004888:	d005      	beq.n	8004896 <I2C_Master_ADDR+0x2d0>
 800488a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488c:	2b10      	cmp	r3, #16
 800488e:	d002      	beq.n	8004896 <I2C_Master_ADDR+0x2d0>
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	2b20      	cmp	r3, #32
 8004894:	d107      	bne.n	80048a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80048c2:	e00b      	b.n	80048dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
}
 80048da:	e7ff      	b.n	80048dc <I2C_Master_ADDR+0x316>
 80048dc:	bf00      	nop
 80048de:	3744      	adds	r7, #68	@ 0x44
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d02b      	beq.n	800495a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d114      	bne.n	800495a <I2C_SlaveTransmit_TXE+0x72>
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b29      	cmp	r3, #41	@ 0x29
 8004934:	d111      	bne.n	800495a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004944:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2221      	movs	r2, #33	@ 0x21
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2228      	movs	r2, #40	@ 0x28
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff f9cb 	bl	8003cf0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d011      	beq.n	8004998 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02c      	beq.n	8004a18 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d114      	bne.n	8004a18 <I2C_SlaveReceive_RXNE+0x74>
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049f2:	d111      	bne.n	8004a18 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2222      	movs	r2, #34	@ 0x22
 8004a08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2228      	movs	r2, #40	@ 0x28
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff f976 	bl	8003d04 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d012      	beq.n	8004a58 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a7e:	2b28      	cmp	r3, #40	@ 0x28
 8004a80:	d125      	bne.n	8004ace <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a90:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	81bb      	strh	r3, [r7, #12]
 8004ab0:	e002      	b.n	8004ab8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004ac0:	89ba      	ldrh	r2, [r7, #12]
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff f926 	bl	8003d18 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004acc:	e00e      	b.n	8004aec <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b50:	d172      	bne.n	8004c38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b22      	cmp	r3, #34	@ 0x22
 8004b56:	d002      	beq.n	8004b5e <I2C_Slave_STOPF+0x6a>
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b5c:	d135      	bne.n	8004bca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe f82f 	bl	8002bfa <HAL_DMA_GetState>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d049      	beq.n	8004c36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	4a69      	ldr	r2, [pc, #420]	@ (8004d4c <I2C_Slave_STOPF+0x258>)
 8004ba8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe f801 	bl	8002bb6 <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d03d      	beq.n	8004c36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bc8:	e035      	b.n	8004c36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f043 0204 	orr.w	r2, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd fff9 	bl	8002bfa <HAL_DMA_GetState>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d014      	beq.n	8004c38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c12:	4a4e      	ldr	r2, [pc, #312]	@ (8004d4c <I2C_Slave_STOPF+0x258>)
 8004c14:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd ffcb 	bl	8002bb6 <HAL_DMA_Abort_IT>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
 8004c34:	e000      	b.n	8004c38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d03e      	beq.n	8004cc0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d112      	bne.n	8004c76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b40      	cmp	r3, #64	@ 0x40
 8004c82:	d112      	bne.n	8004caa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8b7 	bl	8004e3c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004cce:	e039      	b.n	8004d44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cd4:	d109      	bne.n	8004cea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2228      	movs	r2, #40	@ 0x28
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff f80d 	bl	8003d04 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b28      	cmp	r3, #40	@ 0x28
 8004cf4:	d111      	bne.n	8004d1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a15      	ldr	r2, [pc, #84]	@ (8004d50 <I2C_Slave_STOPF+0x25c>)
 8004cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff f80e 	bl	8003d34 <HAL_I2C_ListenCpltCallback>
}
 8004d18:	e014      	b.n	8004d44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	2b22      	cmp	r3, #34	@ 0x22
 8004d20:	d002      	beq.n	8004d28 <I2C_Slave_STOPF+0x234>
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b22      	cmp	r3, #34	@ 0x22
 8004d26:	d10d      	bne.n	8004d44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fe ffe0 	bl	8003d04 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08005341 	.word	0x08005341
 8004d50:	ffff0000 	.word	0xffff0000

08004d54 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d62:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d002      	beq.n	8004d76 <I2C_Slave_AF+0x22>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d129      	bne.n	8004dca <I2C_Slave_AF+0x76>
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b28      	cmp	r3, #40	@ 0x28
 8004d7a:	d126      	bne.n	8004dca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004e38 <I2C_Slave_AF+0xe4>)
 8004d80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d90:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d9a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004daa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fe ffb6 	bl	8003d34 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004dc8:	e031      	b.n	8004e2e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b21      	cmp	r3, #33	@ 0x21
 8004dce:	d129      	bne.n	8004e24 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a19      	ldr	r2, [pc, #100]	@ (8004e38 <I2C_Slave_AF+0xe4>)
 8004dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2221      	movs	r2, #33	@ 0x21
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dfa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e04:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e14:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fe fa1e 	bl	8003258 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7fe ff67 	bl	8003cf0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e22:	e004      	b.n	8004e2e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e2c:	615a      	str	r2, [r3, #20]
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	ffff0000 	.word	0xffff0000

08004e3c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d002      	beq.n	8004e60 <I2C_ITError+0x24>
 8004e5a:	7bbb      	ldrb	r3, [r7, #14]
 8004e5c:	2b40      	cmp	r3, #64	@ 0x40
 8004e5e:	d10a      	bne.n	8004e76 <I2C_ITError+0x3a>
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b22      	cmp	r3, #34	@ 0x22
 8004e64:	d107      	bne.n	8004e76 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e74:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e7c:	2b28      	cmp	r3, #40	@ 0x28
 8004e7e:	d107      	bne.n	8004e90 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2228      	movs	r2, #40	@ 0x28
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e8e:	e015      	b.n	8004ebc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e9e:	d00a      	beq.n	8004eb6 <I2C_ITError+0x7a>
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b60      	cmp	r3, #96	@ 0x60
 8004ea4:	d007      	beq.n	8004eb6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eca:	d162      	bne.n	8004f92 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eda:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d020      	beq.n	8004f2c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eee:	4a6a      	ldr	r2, [pc, #424]	@ (8005098 <I2C_ITError+0x25c>)
 8004ef0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fd fe5d 	bl	8002bb6 <HAL_DMA_Abort_IT>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8089 	beq.w	8005016 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f26:	4610      	mov	r0, r2
 8004f28:	4798      	blx	r3
 8004f2a:	e074      	b.n	8005016 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	4a59      	ldr	r2, [pc, #356]	@ (8005098 <I2C_ITError+0x25c>)
 8004f32:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fd fe3c 	bl	8002bb6 <HAL_DMA_Abort_IT>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d068      	beq.n	8005016 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d10b      	bne.n	8004f6a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4798      	blx	r3
 8004f90:	e041      	b.n	8005016 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b60      	cmp	r3, #96	@ 0x60
 8004f9c:	d125      	bne.n	8004fea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb6:	2b40      	cmp	r3, #64	@ 0x40
 8004fb8:	d10b      	bne.n	8004fd2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fe fece 	bl	8003d84 <HAL_I2C_AbortCpltCallback>
 8004fe8:	e015      	b.n	8005016 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff4:	2b40      	cmp	r3, #64	@ 0x40
 8004ff6:	d10b      	bne.n	8005010 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fe fead 	bl	8003d70 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10e      	bne.n	8005044 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005036:	2b00      	cmp	r3, #0
 8005038:	d104      	bne.n	8005044 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b04      	cmp	r3, #4
 8005066:	d113      	bne.n	8005090 <I2C_ITError+0x254>
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b28      	cmp	r3, #40	@ 0x28
 800506c:	d110      	bne.n	8005090 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a0a      	ldr	r2, [pc, #40]	@ (800509c <I2C_ITError+0x260>)
 8005072:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fe fe52 	bl	8003d34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	08005341 	.word	0x08005341
 800509c:	ffff0000 	.word	0xffff0000

080050a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	460b      	mov	r3, r1
 80050ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d006      	beq.n	80050ca <I2C_MasterRequestWrite+0x2a>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d003      	beq.n	80050ca <I2C_MasterRequestWrite+0x2a>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050c8:	d108      	bne.n	80050dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e00b      	b.n	80050f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	2b12      	cmp	r3, #18
 80050e2:	d107      	bne.n	80050f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f9c5 	bl	8005490 <I2C_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800511a:	d103      	bne.n	8005124 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e035      	b.n	8005194 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005130:	d108      	bne.n	8005144 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005140:	611a      	str	r2, [r3, #16]
 8005142:	e01b      	b.n	800517c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005144:	897b      	ldrh	r3, [r7, #10]
 8005146:	11db      	asrs	r3, r3, #7
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0306 	and.w	r3, r3, #6
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f063 030f 	orn	r3, r3, #15
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	490e      	ldr	r1, [pc, #56]	@ (800519c <I2C_MasterRequestWrite+0xfc>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fa0e 	bl	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e010      	b.n	8005194 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005172:	897b      	ldrh	r3, [r7, #10]
 8005174:	b2da      	uxtb	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4907      	ldr	r1, [pc, #28]	@ (80051a0 <I2C_MasterRequestWrite+0x100>)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f9fe 	bl	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	00010008 	.word	0x00010008
 80051a0:	00010002 	.word	0x00010002

080051a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	460b      	mov	r3, r1
 80051b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d006      	beq.n	80051de <I2C_MasterRequestRead+0x3a>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d003      	beq.n	80051de <I2C_MasterRequestRead+0x3a>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051dc:	d108      	bne.n	80051f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e00b      	b.n	8005208 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f4:	2b11      	cmp	r3, #17
 80051f6:	d107      	bne.n	8005208 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005206:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f93b 	bl	8005490 <I2C_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00d      	beq.n	800523c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522e:	d103      	bne.n	8005238 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005236:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e079      	b.n	8005330 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005244:	d108      	bne.n	8005258 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]
 8005256:	e05f      	b.n	8005318 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005258:	897b      	ldrh	r3, [r7, #10]
 800525a:	11db      	asrs	r3, r3, #7
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f003 0306 	and.w	r3, r3, #6
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f063 030f 	orn	r3, r3, #15
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4930      	ldr	r1, [pc, #192]	@ (8005338 <I2C_MasterRequestRead+0x194>)
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f984 	bl	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e054      	b.n	8005330 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005286:	897b      	ldrh	r3, [r7, #10]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4929      	ldr	r1, [pc, #164]	@ (800533c <I2C_MasterRequestRead+0x198>)
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f974 	bl	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e044      	b.n	8005330 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f8d9 	bl	8005490 <I2C_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00d      	beq.n	8005300 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f2:	d103      	bne.n	80052fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052fa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e017      	b.n	8005330 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005300:	897b      	ldrh	r3, [r7, #10]
 8005302:	11db      	asrs	r3, r3, #7
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0306 	and.w	r3, r3, #6
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f063 030e 	orn	r3, r3, #14
 8005310:	b2da      	uxtb	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4907      	ldr	r1, [pc, #28]	@ (800533c <I2C_MasterRequestRead+0x198>)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f930 	bl	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	00010008 	.word	0x00010008
 800533c:	00010002 	.word	0x00010002

08005340 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005358:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800535a:	4b4b      	ldr	r3, [pc, #300]	@ (8005488 <I2C_DMAAbort+0x148>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	08db      	lsrs	r3, r3, #3
 8005360:	4a4a      	ldr	r2, [pc, #296]	@ (800548c <I2C_DMAAbort+0x14c>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	0a1a      	lsrs	r2, r3, #8
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	00da      	lsls	r2, r3, #3
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005386:	e00a      	b.n	800539e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3b01      	subs	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800539c:	d0ea      	beq.n	8005374 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053aa:	2200      	movs	r2, #0
 80053ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ba:	2200      	movs	r2, #0
 80053bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e0:	2200      	movs	r2, #0
 80053e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f0:	2200      	movs	r2, #0
 80053f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b60      	cmp	r3, #96	@ 0x60
 800540e:	d10e      	bne.n	800542e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2200      	movs	r2, #0
 8005424:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005426:	6978      	ldr	r0, [r7, #20]
 8005428:	f7fe fcac 	bl	8003d84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800542c:	e027      	b.n	800547e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005434:	2b28      	cmp	r3, #40	@ 0x28
 8005436:	d117      	bne.n	8005468 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005456:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2228      	movs	r2, #40	@ 0x28
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005466:	e007      	b.n	8005478 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005478:	6978      	ldr	r0, [r7, #20]
 800547a:	f7fe fc79 	bl	8003d70 <HAL_I2C_ErrorCallback>
}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000000 	.word	0x20000000
 800548c:	14f8b589 	.word	0x14f8b589

08005490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a0:	e048      	b.n	8005534 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054a8:	d044      	beq.n	8005534 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fc fde1 	bl	8002070 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d139      	bne.n	8005534 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	0c1b      	lsrs	r3, r3, #16
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10d      	bne.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	43da      	mvns	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4013      	ands	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf0c      	ite	eq
 80054dc:	2301      	moveq	r3, #1
 80054de:	2300      	movne	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	461a      	mov	r2, r3
 80054e4:	e00c      	b.n	8005500 <I2C_WaitOnFlagUntilTimeout+0x70>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	43da      	mvns	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	429a      	cmp	r2, r3
 8005504:	d116      	bne.n	8005534 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005520:	f043 0220 	orr.w	r2, r3, #32
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e023      	b.n	800557c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	0c1b      	lsrs	r3, r3, #16
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10d      	bne.n	800555a <I2C_WaitOnFlagUntilTimeout+0xca>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	43da      	mvns	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf0c      	ite	eq
 8005550:	2301      	moveq	r3, #1
 8005552:	2300      	movne	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	e00c      	b.n	8005574 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	43da      	mvns	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4013      	ands	r3, r2
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf0c      	ite	eq
 800556c:	2301      	moveq	r3, #1
 800556e:	2300      	movne	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	429a      	cmp	r2, r3
 8005578:	d093      	beq.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005592:	e071      	b.n	8005678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a2:	d123      	bne.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	f043 0204 	orr.w	r2, r3, #4
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e067      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055f2:	d041      	beq.n	8005678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f4:	f7fc fd3c 	bl	8002070 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d136      	bne.n	8005678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	d10c      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	43da      	mvns	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	e00b      	b.n	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	43da      	mvns	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4013      	ands	r3, r2
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d016      	beq.n	8005678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e021      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	0c1b      	lsrs	r3, r3, #16
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b01      	cmp	r3, #1
 8005680:	d10c      	bne.n	800569c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	43da      	mvns	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	4013      	ands	r3, r2
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	e00b      	b.n	80056b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	43da      	mvns	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4013      	ands	r3, r2
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f47f af6d 	bne.w	8005594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d0:	e034      	b.n	800573c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f915 	bl	8005902 <I2C_IsAcknowledgeFailed>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e034      	b.n	800574c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056e8:	d028      	beq.n	800573c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fc fcc1 	bl	8002070 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d11d      	bne.n	800573c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570a:	2b80      	cmp	r3, #128	@ 0x80
 800570c:	d016      	beq.n	800573c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	f043 0220 	orr.w	r2, r3, #32
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e007      	b.n	800574c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	2b80      	cmp	r3, #128	@ 0x80
 8005748:	d1c3      	bne.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005760:	e034      	b.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f8cd 	bl	8005902 <I2C_IsAcknowledgeFailed>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e034      	b.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005778:	d028      	beq.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577a:	f7fc fc79 	bl	8002070 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d302      	bcc.n	8005790 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11d      	bne.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b04      	cmp	r3, #4
 800579c:	d016      	beq.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e007      	b.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d1c3      	bne.n	8005762 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80057f0:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	08db      	lsrs	r3, r3, #3
 80057f6:	4a13      	ldr	r2, [pc, #76]	@ (8005844 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	0a1a      	lsrs	r2, r3, #8
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b01      	subs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e008      	b.n	8005834 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800582c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005830:	d0e9      	beq.n	8005806 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20000000 	.word	0x20000000
 8005844:	14f8b589 	.word	0x14f8b589

08005848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005854:	e049      	b.n	80058ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d119      	bne.n	8005898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0210 	mvn.w	r2, #16
 800586c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e030      	b.n	80058fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005898:	f7fc fbea 	bl	8002070 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11d      	bne.n	80058ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b40      	cmp	r3, #64	@ 0x40
 80058ba:	d016      	beq.n	80058ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	f043 0220 	orr.w	r2, r3, #32
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e007      	b.n	80058fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f4:	2b40      	cmp	r3, #64	@ 0x40
 80058f6:	d1ae      	bne.n	8005856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005918:	d11b      	bne.n	8005952 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005922:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	f043 0204 	orr.w	r2, r3, #4
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005970:	d103      	bne.n	800597a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005978:	e007      	b.n	800598a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005982:	d102      	bne.n	800598a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2208      	movs	r2, #8
 8005988:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e267      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d075      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059b6:	4b88      	ldr	r3, [pc, #544]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d00c      	beq.n	80059dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c2:	4b85      	ldr	r3, [pc, #532]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d112      	bne.n	80059f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ce:	4b82      	ldr	r3, [pc, #520]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059da:	d10b      	bne.n	80059f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059dc:	4b7e      	ldr	r3, [pc, #504]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d05b      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x108>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d157      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e242      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059fc:	d106      	bne.n	8005a0c <HAL_RCC_OscConfig+0x74>
 80059fe:	4b76      	ldr	r3, [pc, #472]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a75      	ldr	r2, [pc, #468]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e01d      	b.n	8005a48 <HAL_RCC_OscConfig+0xb0>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a14:	d10c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x98>
 8005a16:	4b70      	ldr	r3, [pc, #448]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a6f      	ldr	r2, [pc, #444]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	4b6d      	ldr	r3, [pc, #436]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a6c      	ldr	r2, [pc, #432]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_OscConfig+0xb0>
 8005a30:	4b69      	ldr	r3, [pc, #420]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a68      	ldr	r2, [pc, #416]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	4b66      	ldr	r3, [pc, #408]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a65      	ldr	r2, [pc, #404]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a50:	f7fc fb0e 	bl	8002070 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a58:	f7fc fb0a 	bl	8002070 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	@ 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e207      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0xc0>
 8005a76:	e014      	b.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7fc fafa 	bl	8002070 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fc faf6 	bl	8002070 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	@ 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e1f3      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a92:	4b51      	ldr	r3, [pc, #324]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0xe8>
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d063      	beq.n	8005b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aae:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00b      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aba:	4b47      	ldr	r3, [pc, #284]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d11c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ac6:	4b44      	ldr	r3, [pc, #272]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d116      	bne.n	8005b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ad2:	4b41      	ldr	r3, [pc, #260]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <HAL_RCC_OscConfig+0x152>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d001      	beq.n	8005aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e1c7      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aea:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4937      	ldr	r1, [pc, #220]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afe:	e03a      	b.n	8005b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d020      	beq.n	8005b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b08:	4b34      	ldr	r3, [pc, #208]	@ (8005bdc <HAL_RCC_OscConfig+0x244>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0e:	f7fc faaf 	bl	8002070 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b16:	f7fc faab 	bl	8002070 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e1a8      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b28:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b34:	4b28      	ldr	r3, [pc, #160]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4925      	ldr	r1, [pc, #148]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]
 8005b48:	e015      	b.n	8005b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b4a:	4b24      	ldr	r3, [pc, #144]	@ (8005bdc <HAL_RCC_OscConfig+0x244>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fc fa8e 	bl	8002070 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b58:	f7fc fa8a 	bl	8002070 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e187      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d036      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d016      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b8a:	4b15      	ldr	r3, [pc, #84]	@ (8005be0 <HAL_RCC_OscConfig+0x248>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b90:	f7fc fa6e 	bl	8002070 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b98:	f7fc fa6a 	bl	8002070 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e167      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005baa:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0x200>
 8005bb6:	e01b      	b.n	8005bf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb8:	4b09      	ldr	r3, [pc, #36]	@ (8005be0 <HAL_RCC_OscConfig+0x248>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bbe:	f7fc fa57 	bl	8002070 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc4:	e00e      	b.n	8005be4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc6:	f7fc fa53 	bl	8002070 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d907      	bls.n	8005be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e150      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	42470000 	.word	0x42470000
 8005be0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005be4:	4b88      	ldr	r3, [pc, #544]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ea      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8097 	beq.w	8005d2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c02:	4b81      	ldr	r3, [pc, #516]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10f      	bne.n	8005c2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]
 8005c12:	4b7d      	ldr	r3, [pc, #500]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	4a7c      	ldr	r2, [pc, #496]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2e:	4b77      	ldr	r3, [pc, #476]	@ (8005e0c <HAL_RCC_OscConfig+0x474>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d118      	bne.n	8005c6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c3a:	4b74      	ldr	r3, [pc, #464]	@ (8005e0c <HAL_RCC_OscConfig+0x474>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a73      	ldr	r2, [pc, #460]	@ (8005e0c <HAL_RCC_OscConfig+0x474>)
 8005c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c46:	f7fc fa13 	bl	8002070 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4e:	f7fc fa0f 	bl	8002070 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e10c      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c60:	4b6a      	ldr	r3, [pc, #424]	@ (8005e0c <HAL_RCC_OscConfig+0x474>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d106      	bne.n	8005c82 <HAL_RCC_OscConfig+0x2ea>
 8005c74:	4b64      	ldr	r3, [pc, #400]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c78:	4a63      	ldr	r2, [pc, #396]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c80:	e01c      	b.n	8005cbc <HAL_RCC_OscConfig+0x324>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b05      	cmp	r3, #5
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x30c>
 8005c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8e:	4a5e      	ldr	r2, [pc, #376]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c90:	f043 0304 	orr.w	r3, r3, #4
 8005c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c96:	4b5c      	ldr	r3, [pc, #368]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCC_OscConfig+0x324>
 8005ca4:	4b58      	ldr	r3, [pc, #352]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca8:	4a57      	ldr	r2, [pc, #348]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb0:	4b55      	ldr	r3, [pc, #340]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb4:	4a54      	ldr	r2, [pc, #336]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	f023 0304 	bic.w	r3, r3, #4
 8005cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d015      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fc f9d4 	bl	8002070 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ccc:	f7fc f9d0 	bl	8002070 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e0cb      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce2:	4b49      	ldr	r3, [pc, #292]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0ee      	beq.n	8005ccc <HAL_RCC_OscConfig+0x334>
 8005cee:	e014      	b.n	8005d1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf0:	f7fc f9be 	bl	8002070 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf8:	f7fc f9ba 	bl	8002070 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e0b5      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1ee      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d105      	bne.n	8005d2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d20:	4b39      	ldr	r3, [pc, #228]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d24:	4a38      	ldr	r2, [pc, #224]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80a1 	beq.w	8005e78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d36:	4b34      	ldr	r3, [pc, #208]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d05c      	beq.n	8005dfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d141      	bne.n	8005dce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4a:	4b31      	ldr	r3, [pc, #196]	@ (8005e10 <HAL_RCC_OscConfig+0x478>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fc f98e 	bl	8002070 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d58:	f7fc f98a 	bl	8002070 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e087      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6a:	4b27      	ldr	r3, [pc, #156]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d84:	019b      	lsls	r3, r3, #6
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	041b      	lsls	r3, r3, #16
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	061b      	lsls	r3, r3, #24
 8005d9a:	491b      	ldr	r1, [pc, #108]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e10 <HAL_RCC_OscConfig+0x478>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da6:	f7fc f963 	bl	8002070 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dae:	f7fc f95f 	bl	8002070 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e05c      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc0:	4b11      	ldr	r3, [pc, #68]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x416>
 8005dcc:	e054      	b.n	8005e78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dce:	4b10      	ldr	r3, [pc, #64]	@ (8005e10 <HAL_RCC_OscConfig+0x478>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd4:	f7fc f94c 	bl	8002070 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7fc f948 	bl	8002070 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e045      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dee:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0x444>
 8005dfa:	e03d      	b.n	8005e78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d107      	bne.n	8005e14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e038      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e14:	4b1b      	ldr	r3, [pc, #108]	@ (8005e84 <HAL_RCC_OscConfig+0x4ec>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d028      	beq.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d121      	bne.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d11a      	bne.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e44:	4013      	ands	r3, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d111      	bne.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d107      	bne.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d001      	beq.n	8005e78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800

08005e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0cc      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e9c:	4b68      	ldr	r3, [pc, #416]	@ (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d90c      	bls.n	8005ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eaa:	4b65      	ldr	r3, [pc, #404]	@ (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb2:	4b63      	ldr	r3, [pc, #396]	@ (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0b8      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d020      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005edc:	4b59      	ldr	r3, [pc, #356]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	4a58      	ldr	r2, [pc, #352]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ef4:	4b53      	ldr	r3, [pc, #332]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4a52      	ldr	r2, [pc, #328]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f00:	4b50      	ldr	r3, [pc, #320]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	494d      	ldr	r1, [pc, #308]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d044      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d107      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f26:	4b47      	ldr	r3, [pc, #284]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d119      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e07f      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d003      	beq.n	8005f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d107      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f46:	4b3f      	ldr	r3, [pc, #252]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e06f      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f56:	4b3b      	ldr	r3, [pc, #236]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e067      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f66:	4b37      	ldr	r3, [pc, #220]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f023 0203 	bic.w	r2, r3, #3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4934      	ldr	r1, [pc, #208]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f78:	f7fc f87a 	bl	8002070 <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f80:	f7fc f876 	bl	8002070 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e04f      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	4b2b      	ldr	r3, [pc, #172]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 020c 	and.w	r2, r3, #12
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d1eb      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b25      	ldr	r3, [pc, #148]	@ (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d20c      	bcs.n	8005fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b22      	ldr	r3, [pc, #136]	@ (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b20      	ldr	r3, [pc, #128]	@ (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e032      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fdc:	4b19      	ldr	r3, [pc, #100]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4916      	ldr	r1, [pc, #88]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ffa:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	490e      	ldr	r1, [pc, #56]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	4313      	orrs	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800600e:	f000 f821 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8006012:	4602      	mov	r2, r0
 8006014:	4b0b      	ldr	r3, [pc, #44]	@ (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	490a      	ldr	r1, [pc, #40]	@ (8006048 <HAL_RCC_ClockConfig+0x1c0>)
 8006020:	5ccb      	ldrb	r3, [r1, r3]
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	4a09      	ldr	r2, [pc, #36]	@ (800604c <HAL_RCC_ClockConfig+0x1c4>)
 8006028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800602a:	4b09      	ldr	r3, [pc, #36]	@ (8006050 <HAL_RCC_ClockConfig+0x1c8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fb ffda 	bl	8001fe8 <HAL_InitTick>

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40023c00 	.word	0x40023c00
 8006044:	40023800 	.word	0x40023800
 8006048:	08008508 	.word	0x08008508
 800604c:	20000000 	.word	0x20000000
 8006050:	20000004 	.word	0x20000004

08006054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006058:	b090      	sub	sp, #64	@ 0x40
 800605a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006060:	2300      	movs	r3, #0
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006064:	2300      	movs	r3, #0
 8006066:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800606c:	4b59      	ldr	r3, [pc, #356]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b08      	cmp	r3, #8
 8006076:	d00d      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0x40>
 8006078:	2b08      	cmp	r3, #8
 800607a:	f200 80a1 	bhi.w	80061c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_RCC_GetSysClockFreq+0x34>
 8006082:	2b04      	cmp	r3, #4
 8006084:	d003      	beq.n	800608e <HAL_RCC_GetSysClockFreq+0x3a>
 8006086:	e09b      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006088:	4b53      	ldr	r3, [pc, #332]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800608a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800608c:	e09b      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800608e:	4b53      	ldr	r3, [pc, #332]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x188>)
 8006090:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006092:	e098      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006094:	4b4f      	ldr	r3, [pc, #316]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800609c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800609e:	4b4d      	ldr	r3, [pc, #308]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d028      	beq.n	80060fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060aa:	4b4a      	ldr	r3, [pc, #296]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	099b      	lsrs	r3, r3, #6
 80060b0:	2200      	movs	r2, #0
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060bc:	2100      	movs	r1, #0
 80060be:	4b47      	ldr	r3, [pc, #284]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x188>)
 80060c0:	fb03 f201 	mul.w	r2, r3, r1
 80060c4:	2300      	movs	r3, #0
 80060c6:	fb00 f303 	mul.w	r3, r0, r3
 80060ca:	4413      	add	r3, r2
 80060cc:	4a43      	ldr	r2, [pc, #268]	@ (80061dc <HAL_RCC_GetSysClockFreq+0x188>)
 80060ce:	fba0 1202 	umull	r1, r2, r0, r2
 80060d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060d4:	460a      	mov	r2, r1
 80060d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80060d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060da:	4413      	add	r3, r2
 80060dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e0:	2200      	movs	r2, #0
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	61fa      	str	r2, [r7, #28]
 80060e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80060ee:	f7fa fcb5 	bl	8000a5c <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4613      	mov	r3, r2
 80060f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060fa:	e053      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fc:	4b35      	ldr	r3, [pc, #212]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	099b      	lsrs	r3, r3, #6
 8006102:	2200      	movs	r2, #0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	617a      	str	r2, [r7, #20]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800610e:	f04f 0b00 	mov.w	fp, #0
 8006112:	4652      	mov	r2, sl
 8006114:	465b      	mov	r3, fp
 8006116:	f04f 0000 	mov.w	r0, #0
 800611a:	f04f 0100 	mov.w	r1, #0
 800611e:	0159      	lsls	r1, r3, #5
 8006120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006124:	0150      	lsls	r0, r2, #5
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	ebb2 080a 	subs.w	r8, r2, sl
 800612e:	eb63 090b 	sbc.w	r9, r3, fp
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800613e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006142:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006146:	ebb2 0408 	subs.w	r4, r2, r8
 800614a:	eb63 0509 	sbc.w	r5, r3, r9
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	00eb      	lsls	r3, r5, #3
 8006158:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615c:	00e2      	lsls	r2, r4, #3
 800615e:	4614      	mov	r4, r2
 8006160:	461d      	mov	r5, r3
 8006162:	eb14 030a 	adds.w	r3, r4, sl
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	eb45 030b 	adc.w	r3, r5, fp
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800617a:	4629      	mov	r1, r5
 800617c:	028b      	lsls	r3, r1, #10
 800617e:	4621      	mov	r1, r4
 8006180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006184:	4621      	mov	r1, r4
 8006186:	028a      	lsls	r2, r1, #10
 8006188:	4610      	mov	r0, r2
 800618a:	4619      	mov	r1, r3
 800618c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618e:	2200      	movs	r2, #0
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	60fa      	str	r2, [r7, #12]
 8006194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006198:	f7fa fc60 	bl	8000a5c <__aeabi_uldivmod>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4613      	mov	r3, r2
 80061a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061a4:	4b0b      	ldr	r3, [pc, #44]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	3301      	adds	r3, #1
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80061b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061be:	e002      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061c0:	4b05      	ldr	r3, [pc, #20]	@ (80061d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80061c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3740      	adds	r7, #64	@ 0x40
 80061cc:	46bd      	mov	sp, r7
 80061ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d2:	bf00      	nop
 80061d4:	40023800 	.word	0x40023800
 80061d8:	00f42400 	.word	0x00f42400
 80061dc:	017d7840 	.word	0x017d7840

080061e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e4:	4b03      	ldr	r3, [pc, #12]	@ (80061f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061e6:	681b      	ldr	r3, [r3, #0]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000000 	.word	0x20000000

080061f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061fc:	f7ff fff0 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006200:	4602      	mov	r2, r0
 8006202:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	0a9b      	lsrs	r3, r3, #10
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	4903      	ldr	r1, [pc, #12]	@ (800621c <HAL_RCC_GetPCLK1Freq+0x24>)
 800620e:	5ccb      	ldrb	r3, [r1, r3]
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40023800 	.word	0x40023800
 800621c:	08008518 	.word	0x08008518

08006220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006224:	f7ff ffdc 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006228:	4602      	mov	r2, r0
 800622a:	4b05      	ldr	r3, [pc, #20]	@ (8006240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	0b5b      	lsrs	r3, r3, #13
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	4903      	ldr	r1, [pc, #12]	@ (8006244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006236:	5ccb      	ldrb	r3, [r1, r3]
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40023800 	.word	0x40023800
 8006244:	08008518 	.word	0x08008518

08006248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e042      	b.n	80062e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fb fd0c 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2224      	movs	r2, #36	@ 0x24
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800628a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fd69 	bl	8006d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	@ 0x28
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b20      	cmp	r3, #32
 8006306:	d175      	bne.n	80063f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_UART_Transmit+0x2c>
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e06e      	b.n	80063f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2221      	movs	r2, #33	@ 0x21
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006326:	f7fb fea3 	bl	8002070 <HAL_GetTick>
 800632a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006340:	d108      	bne.n	8006354 <HAL_UART_Transmit+0x6c>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e003      	b.n	800635c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800635c:	e02e      	b.n	80063bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2200      	movs	r2, #0
 8006366:	2180      	movs	r1, #128	@ 0x80
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fb05 	bl	8006978 <UART_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e03a      	b.n	80063f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	3302      	adds	r3, #2
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e007      	b.n	80063ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1cb      	bne.n	800635e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2140      	movs	r1, #64	@ 0x40
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fad1 	bl	8006978 <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e006      	b.n	80063f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b0ba      	sub	sp, #232	@ 0xe8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006426:	2300      	movs	r3, #0
 8006428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800642c:	2300      	movs	r3, #0
 800642e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800643e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10f      	bne.n	8006466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <HAL_UART_IRQHandler+0x66>
 8006452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fbc2 	bl	8006be8 <UART_Receive_IT>
      return;
 8006464:	e25b      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80de 	beq.w	800662c <HAL_UART_IRQHandler+0x22c>
 8006470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800647c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006480:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80d1 	beq.w	800662c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <HAL_UART_IRQHandler+0xae>
 8006496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a6:	f043 0201 	orr.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00b      	beq.n	80064d2 <HAL_UART_IRQHandler+0xd2>
 80064ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ca:	f043 0202 	orr.w	r2, r3, #2
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <HAL_UART_IRQHandler+0xf6>
 80064de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ee:	f043 0204 	orr.w	r2, r3, #4
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d011      	beq.n	8006526 <HAL_UART_IRQHandler+0x126>
 8006502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d105      	bne.n	800651a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800650e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651e:	f043 0208 	orr.w	r2, r3, #8
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 81f2 	beq.w	8006914 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_UART_IRQHandler+0x14e>
 800653c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb4d 	bl	8006be8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006558:	2b40      	cmp	r3, #64	@ 0x40
 800655a:	bf0c      	ite	eq
 800655c:	2301      	moveq	r3, #1
 800655e:	2300      	movne	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <HAL_UART_IRQHandler+0x17a>
 8006572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d04f      	beq.n	800661a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa55 	bl	8006a2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658a:	2b40      	cmp	r3, #64	@ 0x40
 800658c:	d141      	bne.n	8006612 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3314      	adds	r3, #20
 80065b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1d9      	bne.n	800658e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d013      	beq.n	800660a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e6:	4a7e      	ldr	r2, [pc, #504]	@ (80067e0 <HAL_UART_IRQHandler+0x3e0>)
 80065e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fc fae1 	bl	8002bb6 <HAL_DMA_Abort_IT>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d016      	beq.n	8006628 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006604:	4610      	mov	r0, r2
 8006606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	e00e      	b.n	8006628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f99e 	bl	800694c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006610:	e00a      	b.n	8006628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f99a 	bl	800694c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006618:	e006      	b.n	8006628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f996 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006626:	e175      	b.n	8006914 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	bf00      	nop
    return;
 800662a:	e173      	b.n	8006914 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006630:	2b01      	cmp	r3, #1
 8006632:	f040 814f 	bne.w	80068d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663a:	f003 0310 	and.w	r3, r3, #16
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8148 	beq.w	80068d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8141 	beq.w	80068d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006672:	2b40      	cmp	r3, #64	@ 0x40
 8006674:	f040 80b6 	bne.w	80067e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8145 	beq.w	8006918 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006696:	429a      	cmp	r2, r3
 8006698:	f080 813e 	bcs.w	8006918 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ae:	f000 8088 	beq.w	80067c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80066de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1d9      	bne.n	80066b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3314      	adds	r3, #20
 8006704:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800670e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3314      	adds	r3, #20
 800671e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006722:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006726:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800672a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e1      	bne.n	80066fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3314      	adds	r3, #20
 8006740:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800674a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800674c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3314      	adds	r3, #20
 800675a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800675e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006760:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006764:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800676c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e3      	bne.n	800673a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	330c      	adds	r3, #12
 8006786:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006792:	f023 0310 	bic.w	r3, r3, #16
 8006796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	330c      	adds	r3, #12
 80067a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80067a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e3      	bne.n	8006780 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fc f98a 	bl	8002ad6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f8c1 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067de:	e09b      	b.n	8006918 <HAL_UART_IRQHandler+0x518>
 80067e0:	08006af1 	.word	0x08006af1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 808e 	beq.w	800691c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8089 	beq.w	800691c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800681a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800681c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006820:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800682e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006830:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006834:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800683c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e3      	bne.n	800680a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3314      	adds	r3, #20
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	623b      	str	r3, [r7, #32]
   return(result);
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3314      	adds	r3, #20
 8006862:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006866:	633a      	str	r2, [r7, #48]	@ 0x30
 8006868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800686c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e3      	bne.n	8006842 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	330c      	adds	r3, #12
 800688e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	60fb      	str	r3, [r7, #12]
   return(result);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0310 	bic.w	r3, r3, #16
 800689e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80068ac:	61fa      	str	r2, [r7, #28]
 80068ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	69b9      	ldr	r1, [r7, #24]
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	617b      	str	r3, [r7, #20]
   return(result);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e3      	bne.n	8006888 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f847 	bl	8006960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068d2:	e023      	b.n	800691c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d009      	beq.n	80068f4 <HAL_UART_IRQHandler+0x4f4>
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f913 	bl	8006b18 <UART_Transmit_IT>
    return;
 80068f2:	e014      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <HAL_UART_IRQHandler+0x51e>
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f953 	bl	8006bb8 <UART_EndTransmit_IT>
    return;
 8006912:	e004      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
    return;
 8006914:	bf00      	nop
 8006916:	e002      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
      return;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <HAL_UART_IRQHandler+0x51e>
      return;
 800691c:	bf00      	nop
  }
}
 800691e:	37e8      	adds	r7, #232	@ 0xe8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	4613      	mov	r3, r2
 8006986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006988:	e03b      	b.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006990:	d037      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006992:	f7fb fb6d 	bl	8002070 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d302      	bcc.n	80069a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e03a      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d023      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b80      	cmp	r3, #128	@ 0x80
 80069be:	d020      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b40      	cmp	r3, #64	@ 0x40
 80069c4:	d01d      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d116      	bne.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f81d 	bl	8006a2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2208      	movs	r2, #8
 80069f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e00f      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	bf0c      	ite	eq
 8006a12:	2301      	moveq	r3, #1
 8006a14:	2300      	movne	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d0b4      	beq.n	800698a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b095      	sub	sp, #84	@ 0x54
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a52:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e5      	bne.n	8006a32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3314      	adds	r3, #20
 8006a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d119      	bne.n	8006ad6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f023 0310 	bic.w	r3, r3, #16
 8006ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac2:	61ba      	str	r2, [r7, #24]
 8006ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6979      	ldr	r1, [r7, #20]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ae4:	bf00      	nop
 8006ae6:	3754      	adds	r7, #84	@ 0x54
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff ff1e 	bl	800694c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b21      	cmp	r3, #33	@ 0x21
 8006b2a:	d13e      	bne.n	8006baa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b34:	d114      	bne.n	8006b60 <UART_Transmit_IT+0x48>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d110      	bne.n	8006b60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	1c9a      	adds	r2, r3, #2
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	621a      	str	r2, [r3, #32]
 8006b5e:	e008      	b.n	8006b72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	1c59      	adds	r1, r3, #1
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6211      	str	r1, [r2, #32]
 8006b6a:	781a      	ldrb	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10f      	bne.n	8006ba6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ba4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e000      	b.n	8006bac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006baa:	2302      	movs	r3, #2
  }
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff fea3 	bl	8006924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	@ 0x30
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b22      	cmp	r3, #34	@ 0x22
 8006bfa:	f040 80ae 	bne.w	8006d5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c06:	d117      	bne.n	8006c38 <UART_Receive_IT+0x50>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d113      	bne.n	8006c38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c30:	1c9a      	adds	r2, r3, #2
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c36:	e026      	b.n	8006c86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4a:	d007      	beq.n	8006c5c <UART_Receive_IT+0x74>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <UART_Receive_IT+0x82>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e008      	b.n	8006c7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4619      	mov	r1, r3
 8006c94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d15d      	bne.n	8006d56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0220 	bic.w	r2, r2, #32
 8006ca8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695a      	ldr	r2, [r3, #20]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0201 	bic.w	r2, r2, #1
 8006cc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d135      	bne.n	8006d4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f023 0310 	bic.w	r3, r3, #16
 8006cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d06:	623a      	str	r2, [r7, #32]
 8006d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	69f9      	ldr	r1, [r7, #28]
 8006d0c:	6a3a      	ldr	r2, [r7, #32]
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d10a      	bne.n	8006d3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff fe0b 	bl	8006960 <HAL_UARTEx_RxEventCallback>
 8006d4a:	e002      	b.n	8006d52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff fdf3 	bl	8006938 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e002      	b.n	8006d5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e000      	b.n	8006d5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d5a:	2302      	movs	r3, #2
  }
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3730      	adds	r7, #48	@ 0x30
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d68:	b0c0      	sub	sp, #256	@ 0x100
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	68d9      	ldr	r1, [r3, #12]
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	ea40 0301 	orr.w	r3, r0, r1
 8006d8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006dbc:	f021 010c 	bic.w	r1, r1, #12
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dde:	6999      	ldr	r1, [r3, #24]
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	ea40 0301 	orr.w	r3, r0, r1
 8006dea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b8f      	ldr	r3, [pc, #572]	@ (8007030 <UART_SetConfig+0x2cc>)
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d005      	beq.n	8006e04 <UART_SetConfig+0xa0>
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b8d      	ldr	r3, [pc, #564]	@ (8007034 <UART_SetConfig+0x2d0>)
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d104      	bne.n	8006e0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e04:	f7ff fa0c 	bl	8006220 <HAL_RCC_GetPCLK2Freq>
 8006e08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e0c:	e003      	b.n	8006e16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e0e:	f7ff f9f3 	bl	80061f8 <HAL_RCC_GetPCLK1Freq>
 8006e12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e20:	f040 810c 	bne.w	800703c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	1891      	adds	r1, r2, r2
 8006e3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e3e:	415b      	adcs	r3, r3
 8006e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e46:	4621      	mov	r1, r4
 8006e48:	eb12 0801 	adds.w	r8, r2, r1
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	eb43 0901 	adc.w	r9, r3, r1
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e66:	4690      	mov	r8, r2
 8006e68:	4699      	mov	r9, r3
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	eb18 0303 	adds.w	r3, r8, r3
 8006e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e74:	462b      	mov	r3, r5
 8006e76:	eb49 0303 	adc.w	r3, r9, r3
 8006e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e92:	460b      	mov	r3, r1
 8006e94:	18db      	adds	r3, r3, r3
 8006e96:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e98:	4613      	mov	r3, r2
 8006e9a:	eb42 0303 	adc.w	r3, r2, r3
 8006e9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ea8:	f7f9 fdd8 	bl	8000a5c <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4b61      	ldr	r3, [pc, #388]	@ (8007038 <UART_SetConfig+0x2d4>)
 8006eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	011c      	lsls	r4, r3, #4
 8006eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	1891      	adds	r1, r2, r2
 8006ed2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ed4:	415b      	adcs	r3, r3
 8006ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006edc:	4641      	mov	r1, r8
 8006ede:	eb12 0a01 	adds.w	sl, r2, r1
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ef4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006efc:	4692      	mov	sl, r2
 8006efe:	469b      	mov	fp, r3
 8006f00:	4643      	mov	r3, r8
 8006f02:	eb1a 0303 	adds.w	r3, sl, r3
 8006f06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	18db      	adds	r3, r3, r3
 8006f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f2e:	4613      	mov	r3, r2
 8006f30:	eb42 0303 	adc.w	r3, r2, r3
 8006f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f3e:	f7f9 fd8d 	bl	8000a5c <__aeabi_uldivmod>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4611      	mov	r1, r2
 8006f48:	4b3b      	ldr	r3, [pc, #236]	@ (8007038 <UART_SetConfig+0x2d4>)
 8006f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	2264      	movs	r2, #100	@ 0x64
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
 8006f56:	1acb      	subs	r3, r1, r3
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f5e:	4b36      	ldr	r3, [pc, #216]	@ (8007038 <UART_SetConfig+0x2d4>)
 8006f60:	fba3 2302 	umull	r2, r3, r3, r2
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f6c:	441c      	add	r4, r3
 8006f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	1891      	adds	r1, r2, r2
 8006f86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f88:	415b      	adcs	r3, r3
 8006f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f90:	4641      	mov	r1, r8
 8006f92:	1851      	adds	r1, r2, r1
 8006f94:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f96:	4649      	mov	r1, r9
 8006f98:	414b      	adcs	r3, r1
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fa8:	4659      	mov	r1, fp
 8006faa:	00cb      	lsls	r3, r1, #3
 8006fac:	4651      	mov	r1, sl
 8006fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb2:	4651      	mov	r1, sl
 8006fb4:	00ca      	lsls	r2, r1, #3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	eb42 0303 	adc.w	r3, r2, r3
 8006fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	18db      	adds	r3, r3, r3
 8006fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fea:	4613      	mov	r3, r2
 8006fec:	eb42 0303 	adc.w	r3, r2, r3
 8006ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ffa:	f7f9 fd2f 	bl	8000a5c <__aeabi_uldivmod>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <UART_SetConfig+0x2d4>)
 8007004:	fba3 1302 	umull	r1, r3, r3, r2
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	2164      	movs	r1, #100	@ 0x64
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	3332      	adds	r3, #50	@ 0x32
 8007016:	4a08      	ldr	r2, [pc, #32]	@ (8007038 <UART_SetConfig+0x2d4>)
 8007018:	fba2 2303 	umull	r2, r3, r2, r3
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	f003 0207 	and.w	r2, r3, #7
 8007022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4422      	add	r2, r4
 800702a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800702c:	e106      	b.n	800723c <UART_SetConfig+0x4d8>
 800702e:	bf00      	nop
 8007030:	40011000 	.word	0x40011000
 8007034:	40011400 	.word	0x40011400
 8007038:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800703c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007040:	2200      	movs	r2, #0
 8007042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007046:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800704a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800704e:	4642      	mov	r2, r8
 8007050:	464b      	mov	r3, r9
 8007052:	1891      	adds	r1, r2, r2
 8007054:	6239      	str	r1, [r7, #32]
 8007056:	415b      	adcs	r3, r3
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24
 800705a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800705e:	4641      	mov	r1, r8
 8007060:	1854      	adds	r4, r2, r1
 8007062:	4649      	mov	r1, r9
 8007064:	eb43 0501 	adc.w	r5, r3, r1
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	00eb      	lsls	r3, r5, #3
 8007072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007076:	00e2      	lsls	r2, r4, #3
 8007078:	4614      	mov	r4, r2
 800707a:	461d      	mov	r5, r3
 800707c:	4643      	mov	r3, r8
 800707e:	18e3      	adds	r3, r4, r3
 8007080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007084:	464b      	mov	r3, r9
 8007086:	eb45 0303 	adc.w	r3, r5, r3
 800708a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800708e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800709a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070aa:	4629      	mov	r1, r5
 80070ac:	008b      	lsls	r3, r1, #2
 80070ae:	4621      	mov	r1, r4
 80070b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070b4:	4621      	mov	r1, r4
 80070b6:	008a      	lsls	r2, r1, #2
 80070b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070bc:	f7f9 fcce 	bl	8000a5c <__aeabi_uldivmod>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4b60      	ldr	r3, [pc, #384]	@ (8007248 <UART_SetConfig+0x4e4>)
 80070c6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	011c      	lsls	r4, r3, #4
 80070ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070e0:	4642      	mov	r2, r8
 80070e2:	464b      	mov	r3, r9
 80070e4:	1891      	adds	r1, r2, r2
 80070e6:	61b9      	str	r1, [r7, #24]
 80070e8:	415b      	adcs	r3, r3
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070f0:	4641      	mov	r1, r8
 80070f2:	1851      	adds	r1, r2, r1
 80070f4:	6139      	str	r1, [r7, #16]
 80070f6:	4649      	mov	r1, r9
 80070f8:	414b      	adcs	r3, r1
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007108:	4659      	mov	r1, fp
 800710a:	00cb      	lsls	r3, r1, #3
 800710c:	4651      	mov	r1, sl
 800710e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007112:	4651      	mov	r1, sl
 8007114:	00ca      	lsls	r2, r1, #3
 8007116:	4610      	mov	r0, r2
 8007118:	4619      	mov	r1, r3
 800711a:	4603      	mov	r3, r0
 800711c:	4642      	mov	r2, r8
 800711e:	189b      	adds	r3, r3, r2
 8007120:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007124:	464b      	mov	r3, r9
 8007126:	460a      	mov	r2, r1
 8007128:	eb42 0303 	adc.w	r3, r2, r3
 800712c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	67bb      	str	r3, [r7, #120]	@ 0x78
 800713a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	f04f 0300 	mov.w	r3, #0
 8007144:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007148:	4649      	mov	r1, r9
 800714a:	008b      	lsls	r3, r1, #2
 800714c:	4641      	mov	r1, r8
 800714e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007152:	4641      	mov	r1, r8
 8007154:	008a      	lsls	r2, r1, #2
 8007156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800715a:	f7f9 fc7f 	bl	8000a5c <__aeabi_uldivmod>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4611      	mov	r1, r2
 8007164:	4b38      	ldr	r3, [pc, #224]	@ (8007248 <UART_SetConfig+0x4e4>)
 8007166:	fba3 2301 	umull	r2, r3, r3, r1
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	2264      	movs	r2, #100	@ 0x64
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	1acb      	subs	r3, r1, r3
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	3332      	adds	r3, #50	@ 0x32
 8007178:	4a33      	ldr	r2, [pc, #204]	@ (8007248 <UART_SetConfig+0x4e4>)
 800717a:	fba2 2303 	umull	r2, r3, r2, r3
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007184:	441c      	add	r4, r3
 8007186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800718a:	2200      	movs	r2, #0
 800718c:	673b      	str	r3, [r7, #112]	@ 0x70
 800718e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007190:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007194:	4642      	mov	r2, r8
 8007196:	464b      	mov	r3, r9
 8007198:	1891      	adds	r1, r2, r2
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	415b      	adcs	r3, r3
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071a4:	4641      	mov	r1, r8
 80071a6:	1851      	adds	r1, r2, r1
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	4649      	mov	r1, r9
 80071ac:	414b      	adcs	r3, r1
 80071ae:	607b      	str	r3, [r7, #4]
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071bc:	4659      	mov	r1, fp
 80071be:	00cb      	lsls	r3, r1, #3
 80071c0:	4651      	mov	r1, sl
 80071c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071c6:	4651      	mov	r1, sl
 80071c8:	00ca      	lsls	r2, r1, #3
 80071ca:	4610      	mov	r0, r2
 80071cc:	4619      	mov	r1, r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	4642      	mov	r2, r8
 80071d2:	189b      	adds	r3, r3, r2
 80071d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071d6:	464b      	mov	r3, r9
 80071d8:	460a      	mov	r2, r1
 80071da:	eb42 0303 	adc.w	r3, r2, r3
 80071de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071f8:	4649      	mov	r1, r9
 80071fa:	008b      	lsls	r3, r1, #2
 80071fc:	4641      	mov	r1, r8
 80071fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007202:	4641      	mov	r1, r8
 8007204:	008a      	lsls	r2, r1, #2
 8007206:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800720a:	f7f9 fc27 	bl	8000a5c <__aeabi_uldivmod>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4b0d      	ldr	r3, [pc, #52]	@ (8007248 <UART_SetConfig+0x4e4>)
 8007214:	fba3 1302 	umull	r1, r3, r3, r2
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	2164      	movs	r1, #100	@ 0x64
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	3332      	adds	r3, #50	@ 0x32
 8007226:	4a08      	ldr	r2, [pc, #32]	@ (8007248 <UART_SetConfig+0x4e4>)
 8007228:	fba2 2303 	umull	r2, r3, r2, r3
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	f003 020f 	and.w	r2, r3, #15
 8007232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4422      	add	r2, r4
 800723a:	609a      	str	r2, [r3, #8]
}
 800723c:	bf00      	nop
 800723e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007248:	51eb851f 	.word	0x51eb851f

0800724c <malloc>:
 800724c:	4b02      	ldr	r3, [pc, #8]	@ (8007258 <malloc+0xc>)
 800724e:	4601      	mov	r1, r0
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	f000 b82d 	b.w	80072b0 <_malloc_r>
 8007256:	bf00      	nop
 8007258:	20000018 	.word	0x20000018

0800725c <free>:
 800725c:	4b02      	ldr	r3, [pc, #8]	@ (8007268 <free+0xc>)
 800725e:	4601      	mov	r1, r0
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f000 ba0d 	b.w	8007680 <_free_r>
 8007266:	bf00      	nop
 8007268:	20000018 	.word	0x20000018

0800726c <sbrk_aligned>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0f      	ldr	r6, [pc, #60]	@ (80072ac <sbrk_aligned+0x40>)
 8007270:	460c      	mov	r4, r1
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	4605      	mov	r5, r0
 8007276:	b911      	cbnz	r1, 800727e <sbrk_aligned+0x12>
 8007278:	f000 f9b6 	bl	80075e8 <_sbrk_r>
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 f9b1 	bl	80075e8 <_sbrk_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d103      	bne.n	8007292 <sbrk_aligned+0x26>
 800728a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800728e:	4620      	mov	r0, r4
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	1cc4      	adds	r4, r0, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	42a0      	cmp	r0, r4
 800729a:	d0f8      	beq.n	800728e <sbrk_aligned+0x22>
 800729c:	1a21      	subs	r1, r4, r0
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f9a2 	bl	80075e8 <_sbrk_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d1f2      	bne.n	800728e <sbrk_aligned+0x22>
 80072a8:	e7ef      	b.n	800728a <sbrk_aligned+0x1e>
 80072aa:	bf00      	nop
 80072ac:	20000278 	.word	0x20000278

080072b0 <_malloc_r>:
 80072b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b4:	1ccd      	adds	r5, r1, #3
 80072b6:	f025 0503 	bic.w	r5, r5, #3
 80072ba:	3508      	adds	r5, #8
 80072bc:	2d0c      	cmp	r5, #12
 80072be:	bf38      	it	cc
 80072c0:	250c      	movcc	r5, #12
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	4606      	mov	r6, r0
 80072c6:	db01      	blt.n	80072cc <_malloc_r+0x1c>
 80072c8:	42a9      	cmp	r1, r5
 80072ca:	d904      	bls.n	80072d6 <_malloc_r+0x26>
 80072cc:	230c      	movs	r3, #12
 80072ce:	6033      	str	r3, [r6, #0]
 80072d0:	2000      	movs	r0, #0
 80072d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073ac <_malloc_r+0xfc>
 80072da:	f000 f89d 	bl	8007418 <__malloc_lock>
 80072de:	f8d8 3000 	ldr.w	r3, [r8]
 80072e2:	461c      	mov	r4, r3
 80072e4:	bb44      	cbnz	r4, 8007338 <_malloc_r+0x88>
 80072e6:	4629      	mov	r1, r5
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ffbf 	bl	800726c <sbrk_aligned>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	4604      	mov	r4, r0
 80072f2:	d158      	bne.n	80073a6 <_malloc_r+0xf6>
 80072f4:	f8d8 4000 	ldr.w	r4, [r8]
 80072f8:	4627      	mov	r7, r4
 80072fa:	2f00      	cmp	r7, #0
 80072fc:	d143      	bne.n	8007386 <_malloc_r+0xd6>
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d04b      	beq.n	800739a <_malloc_r+0xea>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	4639      	mov	r1, r7
 8007306:	4630      	mov	r0, r6
 8007308:	eb04 0903 	add.w	r9, r4, r3
 800730c:	f000 f96c 	bl	80075e8 <_sbrk_r>
 8007310:	4581      	cmp	r9, r0
 8007312:	d142      	bne.n	800739a <_malloc_r+0xea>
 8007314:	6821      	ldr	r1, [r4, #0]
 8007316:	1a6d      	subs	r5, r5, r1
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f7ff ffa6 	bl	800726c <sbrk_aligned>
 8007320:	3001      	adds	r0, #1
 8007322:	d03a      	beq.n	800739a <_malloc_r+0xea>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	442b      	add	r3, r5
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	f8d8 3000 	ldr.w	r3, [r8]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	bb62      	cbnz	r2, 800738c <_malloc_r+0xdc>
 8007332:	f8c8 7000 	str.w	r7, [r8]
 8007336:	e00f      	b.n	8007358 <_malloc_r+0xa8>
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	1b52      	subs	r2, r2, r5
 800733c:	d420      	bmi.n	8007380 <_malloc_r+0xd0>
 800733e:	2a0b      	cmp	r2, #11
 8007340:	d917      	bls.n	8007372 <_malloc_r+0xc2>
 8007342:	1961      	adds	r1, r4, r5
 8007344:	42a3      	cmp	r3, r4
 8007346:	6025      	str	r5, [r4, #0]
 8007348:	bf18      	it	ne
 800734a:	6059      	strne	r1, [r3, #4]
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	bf08      	it	eq
 8007350:	f8c8 1000 	streq.w	r1, [r8]
 8007354:	5162      	str	r2, [r4, r5]
 8007356:	604b      	str	r3, [r1, #4]
 8007358:	4630      	mov	r0, r6
 800735a:	f000 f863 	bl	8007424 <__malloc_unlock>
 800735e:	f104 000b 	add.w	r0, r4, #11
 8007362:	1d23      	adds	r3, r4, #4
 8007364:	f020 0007 	bic.w	r0, r0, #7
 8007368:	1ac2      	subs	r2, r0, r3
 800736a:	bf1c      	itt	ne
 800736c:	1a1b      	subne	r3, r3, r0
 800736e:	50a3      	strne	r3, [r4, r2]
 8007370:	e7af      	b.n	80072d2 <_malloc_r+0x22>
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	42a3      	cmp	r3, r4
 8007376:	bf0c      	ite	eq
 8007378:	f8c8 2000 	streq.w	r2, [r8]
 800737c:	605a      	strne	r2, [r3, #4]
 800737e:	e7eb      	b.n	8007358 <_malloc_r+0xa8>
 8007380:	4623      	mov	r3, r4
 8007382:	6864      	ldr	r4, [r4, #4]
 8007384:	e7ae      	b.n	80072e4 <_malloc_r+0x34>
 8007386:	463c      	mov	r4, r7
 8007388:	687f      	ldr	r7, [r7, #4]
 800738a:	e7b6      	b.n	80072fa <_malloc_r+0x4a>
 800738c:	461a      	mov	r2, r3
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	42a3      	cmp	r3, r4
 8007392:	d1fb      	bne.n	800738c <_malloc_r+0xdc>
 8007394:	2300      	movs	r3, #0
 8007396:	6053      	str	r3, [r2, #4]
 8007398:	e7de      	b.n	8007358 <_malloc_r+0xa8>
 800739a:	230c      	movs	r3, #12
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	4630      	mov	r0, r6
 80073a0:	f000 f840 	bl	8007424 <__malloc_unlock>
 80073a4:	e794      	b.n	80072d0 <_malloc_r+0x20>
 80073a6:	6005      	str	r5, [r0, #0]
 80073a8:	e7d6      	b.n	8007358 <_malloc_r+0xa8>
 80073aa:	bf00      	nop
 80073ac:	2000027c 	.word	0x2000027c

080073b0 <sniprintf>:
 80073b0:	b40c      	push	{r2, r3}
 80073b2:	b530      	push	{r4, r5, lr}
 80073b4:	4b17      	ldr	r3, [pc, #92]	@ (8007414 <sniprintf+0x64>)
 80073b6:	1e0c      	subs	r4, r1, #0
 80073b8:	681d      	ldr	r5, [r3, #0]
 80073ba:	b09d      	sub	sp, #116	@ 0x74
 80073bc:	da08      	bge.n	80073d0 <sniprintf+0x20>
 80073be:	238b      	movs	r3, #139	@ 0x8b
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073c6:	b01d      	add	sp, #116	@ 0x74
 80073c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073cc:	b002      	add	sp, #8
 80073ce:	4770      	bx	lr
 80073d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073d8:	bf14      	ite	ne
 80073da:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80073de:	4623      	moveq	r3, r4
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	9307      	str	r3, [sp, #28]
 80073e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073e8:	9002      	str	r0, [sp, #8]
 80073ea:	9006      	str	r0, [sp, #24]
 80073ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80073f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80073f2:	ab21      	add	r3, sp, #132	@ 0x84
 80073f4:	a902      	add	r1, sp, #8
 80073f6:	4628      	mov	r0, r5
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	f000 f9e7 	bl	80077cc <_svfiprintf_r>
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	bfbc      	itt	lt
 8007402:	238b      	movlt	r3, #139	@ 0x8b
 8007404:	602b      	strlt	r3, [r5, #0]
 8007406:	2c00      	cmp	r4, #0
 8007408:	d0dd      	beq.n	80073c6 <sniprintf+0x16>
 800740a:	9b02      	ldr	r3, [sp, #8]
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	e7d9      	b.n	80073c6 <sniprintf+0x16>
 8007412:	bf00      	nop
 8007414:	20000018 	.word	0x20000018

08007418 <__malloc_lock>:
 8007418:	4801      	ldr	r0, [pc, #4]	@ (8007420 <__malloc_lock+0x8>)
 800741a:	f000 b920 	b.w	800765e <__retarget_lock_acquire_recursive>
 800741e:	bf00      	nop
 8007420:	200003bc 	.word	0x200003bc

08007424 <__malloc_unlock>:
 8007424:	4801      	ldr	r0, [pc, #4]	@ (800742c <__malloc_unlock+0x8>)
 8007426:	f000 b91b 	b.w	8007660 <__retarget_lock_release_recursive>
 800742a:	bf00      	nop
 800742c:	200003bc 	.word	0x200003bc

08007430 <std>:
 8007430:	2300      	movs	r3, #0
 8007432:	b510      	push	{r4, lr}
 8007434:	4604      	mov	r4, r0
 8007436:	e9c0 3300 	strd	r3, r3, [r0]
 800743a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800743e:	6083      	str	r3, [r0, #8]
 8007440:	8181      	strh	r1, [r0, #12]
 8007442:	6643      	str	r3, [r0, #100]	@ 0x64
 8007444:	81c2      	strh	r2, [r0, #14]
 8007446:	6183      	str	r3, [r0, #24]
 8007448:	4619      	mov	r1, r3
 800744a:	2208      	movs	r2, #8
 800744c:	305c      	adds	r0, #92	@ 0x5c
 800744e:	f000 f8c3 	bl	80075d8 <memset>
 8007452:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <std+0x58>)
 8007454:	6263      	str	r3, [r4, #36]	@ 0x24
 8007456:	4b0d      	ldr	r3, [pc, #52]	@ (800748c <std+0x5c>)
 8007458:	62a3      	str	r3, [r4, #40]	@ 0x28
 800745a:	4b0d      	ldr	r3, [pc, #52]	@ (8007490 <std+0x60>)
 800745c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800745e:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <std+0x64>)
 8007460:	6323      	str	r3, [r4, #48]	@ 0x30
 8007462:	4b0d      	ldr	r3, [pc, #52]	@ (8007498 <std+0x68>)
 8007464:	6224      	str	r4, [r4, #32]
 8007466:	429c      	cmp	r4, r3
 8007468:	d006      	beq.n	8007478 <std+0x48>
 800746a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800746e:	4294      	cmp	r4, r2
 8007470:	d002      	beq.n	8007478 <std+0x48>
 8007472:	33d0      	adds	r3, #208	@ 0xd0
 8007474:	429c      	cmp	r4, r3
 8007476:	d105      	bne.n	8007484 <std+0x54>
 8007478:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800747c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007480:	f000 b8ec 	b.w	800765c <__retarget_lock_init_recursive>
 8007484:	bd10      	pop	{r4, pc}
 8007486:	bf00      	nop
 8007488:	080080bd 	.word	0x080080bd
 800748c:	080080df 	.word	0x080080df
 8007490:	08008117 	.word	0x08008117
 8007494:	0800813b 	.word	0x0800813b
 8007498:	20000280 	.word	0x20000280

0800749c <stdio_exit_handler>:
 800749c:	4a02      	ldr	r2, [pc, #8]	@ (80074a8 <stdio_exit_handler+0xc>)
 800749e:	4903      	ldr	r1, [pc, #12]	@ (80074ac <stdio_exit_handler+0x10>)
 80074a0:	4803      	ldr	r0, [pc, #12]	@ (80074b0 <stdio_exit_handler+0x14>)
 80074a2:	f000 b869 	b.w	8007578 <_fwalk_sglue>
 80074a6:	bf00      	nop
 80074a8:	2000000c 	.word	0x2000000c
 80074ac:	0800806d 	.word	0x0800806d
 80074b0:	2000001c 	.word	0x2000001c

080074b4 <cleanup_stdio>:
 80074b4:	6841      	ldr	r1, [r0, #4]
 80074b6:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <cleanup_stdio+0x34>)
 80074b8:	4299      	cmp	r1, r3
 80074ba:	b510      	push	{r4, lr}
 80074bc:	4604      	mov	r4, r0
 80074be:	d001      	beq.n	80074c4 <cleanup_stdio+0x10>
 80074c0:	f000 fdd4 	bl	800806c <_fflush_r>
 80074c4:	68a1      	ldr	r1, [r4, #8]
 80074c6:	4b09      	ldr	r3, [pc, #36]	@ (80074ec <cleanup_stdio+0x38>)
 80074c8:	4299      	cmp	r1, r3
 80074ca:	d002      	beq.n	80074d2 <cleanup_stdio+0x1e>
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 fdcd 	bl	800806c <_fflush_r>
 80074d2:	68e1      	ldr	r1, [r4, #12]
 80074d4:	4b06      	ldr	r3, [pc, #24]	@ (80074f0 <cleanup_stdio+0x3c>)
 80074d6:	4299      	cmp	r1, r3
 80074d8:	d004      	beq.n	80074e4 <cleanup_stdio+0x30>
 80074da:	4620      	mov	r0, r4
 80074dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e0:	f000 bdc4 	b.w	800806c <_fflush_r>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	bf00      	nop
 80074e8:	20000280 	.word	0x20000280
 80074ec:	200002e8 	.word	0x200002e8
 80074f0:	20000350 	.word	0x20000350

080074f4 <global_stdio_init.part.0>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007524 <global_stdio_init.part.0+0x30>)
 80074f8:	4c0b      	ldr	r4, [pc, #44]	@ (8007528 <global_stdio_init.part.0+0x34>)
 80074fa:	4a0c      	ldr	r2, [pc, #48]	@ (800752c <global_stdio_init.part.0+0x38>)
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	4620      	mov	r0, r4
 8007500:	2200      	movs	r2, #0
 8007502:	2104      	movs	r1, #4
 8007504:	f7ff ff94 	bl	8007430 <std>
 8007508:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800750c:	2201      	movs	r2, #1
 800750e:	2109      	movs	r1, #9
 8007510:	f7ff ff8e 	bl	8007430 <std>
 8007514:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007518:	2202      	movs	r2, #2
 800751a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751e:	2112      	movs	r1, #18
 8007520:	f7ff bf86 	b.w	8007430 <std>
 8007524:	200003b8 	.word	0x200003b8
 8007528:	20000280 	.word	0x20000280
 800752c:	0800749d 	.word	0x0800749d

08007530 <__sfp_lock_acquire>:
 8007530:	4801      	ldr	r0, [pc, #4]	@ (8007538 <__sfp_lock_acquire+0x8>)
 8007532:	f000 b894 	b.w	800765e <__retarget_lock_acquire_recursive>
 8007536:	bf00      	nop
 8007538:	200003bd 	.word	0x200003bd

0800753c <__sfp_lock_release>:
 800753c:	4801      	ldr	r0, [pc, #4]	@ (8007544 <__sfp_lock_release+0x8>)
 800753e:	f000 b88f 	b.w	8007660 <__retarget_lock_release_recursive>
 8007542:	bf00      	nop
 8007544:	200003bd 	.word	0x200003bd

08007548 <__sinit>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	f7ff fff0 	bl	8007530 <__sfp_lock_acquire>
 8007550:	6a23      	ldr	r3, [r4, #32]
 8007552:	b11b      	cbz	r3, 800755c <__sinit+0x14>
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f7ff bff0 	b.w	800753c <__sfp_lock_release>
 800755c:	4b04      	ldr	r3, [pc, #16]	@ (8007570 <__sinit+0x28>)
 800755e:	6223      	str	r3, [r4, #32]
 8007560:	4b04      	ldr	r3, [pc, #16]	@ (8007574 <__sinit+0x2c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1f5      	bne.n	8007554 <__sinit+0xc>
 8007568:	f7ff ffc4 	bl	80074f4 <global_stdio_init.part.0>
 800756c:	e7f2      	b.n	8007554 <__sinit+0xc>
 800756e:	bf00      	nop
 8007570:	080074b5 	.word	0x080074b5
 8007574:	200003b8 	.word	0x200003b8

08007578 <_fwalk_sglue>:
 8007578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800757c:	4607      	mov	r7, r0
 800757e:	4688      	mov	r8, r1
 8007580:	4614      	mov	r4, r2
 8007582:	2600      	movs	r6, #0
 8007584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007588:	f1b9 0901 	subs.w	r9, r9, #1
 800758c:	d505      	bpl.n	800759a <_fwalk_sglue+0x22>
 800758e:	6824      	ldr	r4, [r4, #0]
 8007590:	2c00      	cmp	r4, #0
 8007592:	d1f7      	bne.n	8007584 <_fwalk_sglue+0xc>
 8007594:	4630      	mov	r0, r6
 8007596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800759a:	89ab      	ldrh	r3, [r5, #12]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d907      	bls.n	80075b0 <_fwalk_sglue+0x38>
 80075a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075a4:	3301      	adds	r3, #1
 80075a6:	d003      	beq.n	80075b0 <_fwalk_sglue+0x38>
 80075a8:	4629      	mov	r1, r5
 80075aa:	4638      	mov	r0, r7
 80075ac:	47c0      	blx	r8
 80075ae:	4306      	orrs	r6, r0
 80075b0:	3568      	adds	r5, #104	@ 0x68
 80075b2:	e7e9      	b.n	8007588 <_fwalk_sglue+0x10>

080075b4 <iprintf>:
 80075b4:	b40f      	push	{r0, r1, r2, r3}
 80075b6:	b507      	push	{r0, r1, r2, lr}
 80075b8:	4906      	ldr	r1, [pc, #24]	@ (80075d4 <iprintf+0x20>)
 80075ba:	ab04      	add	r3, sp, #16
 80075bc:	6808      	ldr	r0, [r1, #0]
 80075be:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c2:	6881      	ldr	r1, [r0, #8]
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	f000 fa27 	bl	8007a18 <_vfiprintf_r>
 80075ca:	b003      	add	sp, #12
 80075cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075d0:	b004      	add	sp, #16
 80075d2:	4770      	bx	lr
 80075d4:	20000018 	.word	0x20000018

080075d8 <memset>:
 80075d8:	4402      	add	r2, r0
 80075da:	4603      	mov	r3, r0
 80075dc:	4293      	cmp	r3, r2
 80075de:	d100      	bne.n	80075e2 <memset+0xa>
 80075e0:	4770      	bx	lr
 80075e2:	f803 1b01 	strb.w	r1, [r3], #1
 80075e6:	e7f9      	b.n	80075dc <memset+0x4>

080075e8 <_sbrk_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d06      	ldr	r5, [pc, #24]	@ (8007604 <_sbrk_r+0x1c>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7fa fc64 	bl	8001ec0 <_sbrk>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_sbrk_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_sbrk_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	200003c0 	.word	0x200003c0

08007608 <__errno>:
 8007608:	4b01      	ldr	r3, [pc, #4]	@ (8007610 <__errno+0x8>)
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000018 	.word	0x20000018

08007614 <__libc_init_array>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	4d0d      	ldr	r5, [pc, #52]	@ (800764c <__libc_init_array+0x38>)
 8007618:	4c0d      	ldr	r4, [pc, #52]	@ (8007650 <__libc_init_array+0x3c>)
 800761a:	1b64      	subs	r4, r4, r5
 800761c:	10a4      	asrs	r4, r4, #2
 800761e:	2600      	movs	r6, #0
 8007620:	42a6      	cmp	r6, r4
 8007622:	d109      	bne.n	8007638 <__libc_init_array+0x24>
 8007624:	4d0b      	ldr	r5, [pc, #44]	@ (8007654 <__libc_init_array+0x40>)
 8007626:	4c0c      	ldr	r4, [pc, #48]	@ (8007658 <__libc_init_array+0x44>)
 8007628:	f000 ff3a 	bl	80084a0 <_init>
 800762c:	1b64      	subs	r4, r4, r5
 800762e:	10a4      	asrs	r4, r4, #2
 8007630:	2600      	movs	r6, #0
 8007632:	42a6      	cmp	r6, r4
 8007634:	d105      	bne.n	8007642 <__libc_init_array+0x2e>
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	f855 3b04 	ldr.w	r3, [r5], #4
 800763c:	4798      	blx	r3
 800763e:	3601      	adds	r6, #1
 8007640:	e7ee      	b.n	8007620 <__libc_init_array+0xc>
 8007642:	f855 3b04 	ldr.w	r3, [r5], #4
 8007646:	4798      	blx	r3
 8007648:	3601      	adds	r6, #1
 800764a:	e7f2      	b.n	8007632 <__libc_init_array+0x1e>
 800764c:	0800855c 	.word	0x0800855c
 8007650:	0800855c 	.word	0x0800855c
 8007654:	0800855c 	.word	0x0800855c
 8007658:	08008560 	.word	0x08008560

0800765c <__retarget_lock_init_recursive>:
 800765c:	4770      	bx	lr

0800765e <__retarget_lock_acquire_recursive>:
 800765e:	4770      	bx	lr

08007660 <__retarget_lock_release_recursive>:
 8007660:	4770      	bx	lr

08007662 <memcpy>:
 8007662:	440a      	add	r2, r1
 8007664:	4291      	cmp	r1, r2
 8007666:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800766a:	d100      	bne.n	800766e <memcpy+0xc>
 800766c:	4770      	bx	lr
 800766e:	b510      	push	{r4, lr}
 8007670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007678:	4291      	cmp	r1, r2
 800767a:	d1f9      	bne.n	8007670 <memcpy+0xe>
 800767c:	bd10      	pop	{r4, pc}
	...

08007680 <_free_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4605      	mov	r5, r0
 8007684:	2900      	cmp	r1, #0
 8007686:	d041      	beq.n	800770c <_free_r+0x8c>
 8007688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768c:	1f0c      	subs	r4, r1, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfb8      	it	lt
 8007692:	18e4      	addlt	r4, r4, r3
 8007694:	f7ff fec0 	bl	8007418 <__malloc_lock>
 8007698:	4a1d      	ldr	r2, [pc, #116]	@ (8007710 <_free_r+0x90>)
 800769a:	6813      	ldr	r3, [r2, #0]
 800769c:	b933      	cbnz	r3, 80076ac <_free_r+0x2c>
 800769e:	6063      	str	r3, [r4, #4]
 80076a0:	6014      	str	r4, [r2, #0]
 80076a2:	4628      	mov	r0, r5
 80076a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a8:	f7ff bebc 	b.w	8007424 <__malloc_unlock>
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d908      	bls.n	80076c2 <_free_r+0x42>
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	1821      	adds	r1, r4, r0
 80076b4:	428b      	cmp	r3, r1
 80076b6:	bf01      	itttt	eq
 80076b8:	6819      	ldreq	r1, [r3, #0]
 80076ba:	685b      	ldreq	r3, [r3, #4]
 80076bc:	1809      	addeq	r1, r1, r0
 80076be:	6021      	streq	r1, [r4, #0]
 80076c0:	e7ed      	b.n	800769e <_free_r+0x1e>
 80076c2:	461a      	mov	r2, r3
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	b10b      	cbz	r3, 80076cc <_free_r+0x4c>
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d9fa      	bls.n	80076c2 <_free_r+0x42>
 80076cc:	6811      	ldr	r1, [r2, #0]
 80076ce:	1850      	adds	r0, r2, r1
 80076d0:	42a0      	cmp	r0, r4
 80076d2:	d10b      	bne.n	80076ec <_free_r+0x6c>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	4401      	add	r1, r0
 80076d8:	1850      	adds	r0, r2, r1
 80076da:	4283      	cmp	r3, r0
 80076dc:	6011      	str	r1, [r2, #0]
 80076de:	d1e0      	bne.n	80076a2 <_free_r+0x22>
 80076e0:	6818      	ldr	r0, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	6053      	str	r3, [r2, #4]
 80076e6:	4408      	add	r0, r1
 80076e8:	6010      	str	r0, [r2, #0]
 80076ea:	e7da      	b.n	80076a2 <_free_r+0x22>
 80076ec:	d902      	bls.n	80076f4 <_free_r+0x74>
 80076ee:	230c      	movs	r3, #12
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	e7d6      	b.n	80076a2 <_free_r+0x22>
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	1821      	adds	r1, r4, r0
 80076f8:	428b      	cmp	r3, r1
 80076fa:	bf04      	itt	eq
 80076fc:	6819      	ldreq	r1, [r3, #0]
 80076fe:	685b      	ldreq	r3, [r3, #4]
 8007700:	6063      	str	r3, [r4, #4]
 8007702:	bf04      	itt	eq
 8007704:	1809      	addeq	r1, r1, r0
 8007706:	6021      	streq	r1, [r4, #0]
 8007708:	6054      	str	r4, [r2, #4]
 800770a:	e7ca      	b.n	80076a2 <_free_r+0x22>
 800770c:	bd38      	pop	{r3, r4, r5, pc}
 800770e:	bf00      	nop
 8007710:	2000027c 	.word	0x2000027c

08007714 <__ssputs_r>:
 8007714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007718:	688e      	ldr	r6, [r1, #8]
 800771a:	461f      	mov	r7, r3
 800771c:	42be      	cmp	r6, r7
 800771e:	680b      	ldr	r3, [r1, #0]
 8007720:	4682      	mov	sl, r0
 8007722:	460c      	mov	r4, r1
 8007724:	4690      	mov	r8, r2
 8007726:	d82d      	bhi.n	8007784 <__ssputs_r+0x70>
 8007728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800772c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007730:	d026      	beq.n	8007780 <__ssputs_r+0x6c>
 8007732:	6965      	ldr	r5, [r4, #20]
 8007734:	6909      	ldr	r1, [r1, #16]
 8007736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800773a:	eba3 0901 	sub.w	r9, r3, r1
 800773e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007742:	1c7b      	adds	r3, r7, #1
 8007744:	444b      	add	r3, r9
 8007746:	106d      	asrs	r5, r5, #1
 8007748:	429d      	cmp	r5, r3
 800774a:	bf38      	it	cc
 800774c:	461d      	movcc	r5, r3
 800774e:	0553      	lsls	r3, r2, #21
 8007750:	d527      	bpl.n	80077a2 <__ssputs_r+0x8e>
 8007752:	4629      	mov	r1, r5
 8007754:	f7ff fdac 	bl	80072b0 <_malloc_r>
 8007758:	4606      	mov	r6, r0
 800775a:	b360      	cbz	r0, 80077b6 <__ssputs_r+0xa2>
 800775c:	6921      	ldr	r1, [r4, #16]
 800775e:	464a      	mov	r2, r9
 8007760:	f7ff ff7f 	bl	8007662 <memcpy>
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800776a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800776e:	81a3      	strh	r3, [r4, #12]
 8007770:	6126      	str	r6, [r4, #16]
 8007772:	6165      	str	r5, [r4, #20]
 8007774:	444e      	add	r6, r9
 8007776:	eba5 0509 	sub.w	r5, r5, r9
 800777a:	6026      	str	r6, [r4, #0]
 800777c:	60a5      	str	r5, [r4, #8]
 800777e:	463e      	mov	r6, r7
 8007780:	42be      	cmp	r6, r7
 8007782:	d900      	bls.n	8007786 <__ssputs_r+0x72>
 8007784:	463e      	mov	r6, r7
 8007786:	6820      	ldr	r0, [r4, #0]
 8007788:	4632      	mov	r2, r6
 800778a:	4641      	mov	r1, r8
 800778c:	f000 fdfe 	bl	800838c <memmove>
 8007790:	68a3      	ldr	r3, [r4, #8]
 8007792:	1b9b      	subs	r3, r3, r6
 8007794:	60a3      	str	r3, [r4, #8]
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	4433      	add	r3, r6
 800779a:	6023      	str	r3, [r4, #0]
 800779c:	2000      	movs	r0, #0
 800779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a2:	462a      	mov	r2, r5
 80077a4:	f000 fccd 	bl	8008142 <_realloc_r>
 80077a8:	4606      	mov	r6, r0
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d1e0      	bne.n	8007770 <__ssputs_r+0x5c>
 80077ae:	6921      	ldr	r1, [r4, #16]
 80077b0:	4650      	mov	r0, sl
 80077b2:	f7ff ff65 	bl	8007680 <_free_r>
 80077b6:	230c      	movs	r3, #12
 80077b8:	f8ca 3000 	str.w	r3, [sl]
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077c8:	e7e9      	b.n	800779e <__ssputs_r+0x8a>
	...

080077cc <_svfiprintf_r>:
 80077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	4698      	mov	r8, r3
 80077d2:	898b      	ldrh	r3, [r1, #12]
 80077d4:	061b      	lsls	r3, r3, #24
 80077d6:	b09d      	sub	sp, #116	@ 0x74
 80077d8:	4607      	mov	r7, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	4614      	mov	r4, r2
 80077de:	d510      	bpl.n	8007802 <_svfiprintf_r+0x36>
 80077e0:	690b      	ldr	r3, [r1, #16]
 80077e2:	b973      	cbnz	r3, 8007802 <_svfiprintf_r+0x36>
 80077e4:	2140      	movs	r1, #64	@ 0x40
 80077e6:	f7ff fd63 	bl	80072b0 <_malloc_r>
 80077ea:	6028      	str	r0, [r5, #0]
 80077ec:	6128      	str	r0, [r5, #16]
 80077ee:	b930      	cbnz	r0, 80077fe <_svfiprintf_r+0x32>
 80077f0:	230c      	movs	r3, #12
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077f8:	b01d      	add	sp, #116	@ 0x74
 80077fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fe:	2340      	movs	r3, #64	@ 0x40
 8007800:	616b      	str	r3, [r5, #20]
 8007802:	2300      	movs	r3, #0
 8007804:	9309      	str	r3, [sp, #36]	@ 0x24
 8007806:	2320      	movs	r3, #32
 8007808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800780c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007810:	2330      	movs	r3, #48	@ 0x30
 8007812:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80079b0 <_svfiprintf_r+0x1e4>
 8007816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800781a:	f04f 0901 	mov.w	r9, #1
 800781e:	4623      	mov	r3, r4
 8007820:	469a      	mov	sl, r3
 8007822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007826:	b10a      	cbz	r2, 800782c <_svfiprintf_r+0x60>
 8007828:	2a25      	cmp	r2, #37	@ 0x25
 800782a:	d1f9      	bne.n	8007820 <_svfiprintf_r+0x54>
 800782c:	ebba 0b04 	subs.w	fp, sl, r4
 8007830:	d00b      	beq.n	800784a <_svfiprintf_r+0x7e>
 8007832:	465b      	mov	r3, fp
 8007834:	4622      	mov	r2, r4
 8007836:	4629      	mov	r1, r5
 8007838:	4638      	mov	r0, r7
 800783a:	f7ff ff6b 	bl	8007714 <__ssputs_r>
 800783e:	3001      	adds	r0, #1
 8007840:	f000 80a7 	beq.w	8007992 <_svfiprintf_r+0x1c6>
 8007844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007846:	445a      	add	r2, fp
 8007848:	9209      	str	r2, [sp, #36]	@ 0x24
 800784a:	f89a 3000 	ldrb.w	r3, [sl]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 809f 	beq.w	8007992 <_svfiprintf_r+0x1c6>
 8007854:	2300      	movs	r3, #0
 8007856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800785a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800785e:	f10a 0a01 	add.w	sl, sl, #1
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	9307      	str	r3, [sp, #28]
 8007866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800786a:	931a      	str	r3, [sp, #104]	@ 0x68
 800786c:	4654      	mov	r4, sl
 800786e:	2205      	movs	r2, #5
 8007870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007874:	484e      	ldr	r0, [pc, #312]	@ (80079b0 <_svfiprintf_r+0x1e4>)
 8007876:	f7f8 fcb3 	bl	80001e0 <memchr>
 800787a:	9a04      	ldr	r2, [sp, #16]
 800787c:	b9d8      	cbnz	r0, 80078b6 <_svfiprintf_r+0xea>
 800787e:	06d0      	lsls	r0, r2, #27
 8007880:	bf44      	itt	mi
 8007882:	2320      	movmi	r3, #32
 8007884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007888:	0711      	lsls	r1, r2, #28
 800788a:	bf44      	itt	mi
 800788c:	232b      	movmi	r3, #43	@ 0x2b
 800788e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007892:	f89a 3000 	ldrb.w	r3, [sl]
 8007896:	2b2a      	cmp	r3, #42	@ 0x2a
 8007898:	d015      	beq.n	80078c6 <_svfiprintf_r+0xfa>
 800789a:	9a07      	ldr	r2, [sp, #28]
 800789c:	4654      	mov	r4, sl
 800789e:	2000      	movs	r0, #0
 80078a0:	f04f 0c0a 	mov.w	ip, #10
 80078a4:	4621      	mov	r1, r4
 80078a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078aa:	3b30      	subs	r3, #48	@ 0x30
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	d94b      	bls.n	8007948 <_svfiprintf_r+0x17c>
 80078b0:	b1b0      	cbz	r0, 80078e0 <_svfiprintf_r+0x114>
 80078b2:	9207      	str	r2, [sp, #28]
 80078b4:	e014      	b.n	80078e0 <_svfiprintf_r+0x114>
 80078b6:	eba0 0308 	sub.w	r3, r0, r8
 80078ba:	fa09 f303 	lsl.w	r3, r9, r3
 80078be:	4313      	orrs	r3, r2
 80078c0:	9304      	str	r3, [sp, #16]
 80078c2:	46a2      	mov	sl, r4
 80078c4:	e7d2      	b.n	800786c <_svfiprintf_r+0xa0>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	1d19      	adds	r1, r3, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	9103      	str	r1, [sp, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	bfbb      	ittet	lt
 80078d2:	425b      	neglt	r3, r3
 80078d4:	f042 0202 	orrlt.w	r2, r2, #2
 80078d8:	9307      	strge	r3, [sp, #28]
 80078da:	9307      	strlt	r3, [sp, #28]
 80078dc:	bfb8      	it	lt
 80078de:	9204      	strlt	r2, [sp, #16]
 80078e0:	7823      	ldrb	r3, [r4, #0]
 80078e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80078e4:	d10a      	bne.n	80078fc <_svfiprintf_r+0x130>
 80078e6:	7863      	ldrb	r3, [r4, #1]
 80078e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80078ea:	d132      	bne.n	8007952 <_svfiprintf_r+0x186>
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	9203      	str	r2, [sp, #12]
 80078f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078f8:	3402      	adds	r4, #2
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80079c0 <_svfiprintf_r+0x1f4>
 8007900:	7821      	ldrb	r1, [r4, #0]
 8007902:	2203      	movs	r2, #3
 8007904:	4650      	mov	r0, sl
 8007906:	f7f8 fc6b 	bl	80001e0 <memchr>
 800790a:	b138      	cbz	r0, 800791c <_svfiprintf_r+0x150>
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	eba0 000a 	sub.w	r0, r0, sl
 8007912:	2240      	movs	r2, #64	@ 0x40
 8007914:	4082      	lsls	r2, r0
 8007916:	4313      	orrs	r3, r2
 8007918:	3401      	adds	r4, #1
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007920:	4824      	ldr	r0, [pc, #144]	@ (80079b4 <_svfiprintf_r+0x1e8>)
 8007922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007926:	2206      	movs	r2, #6
 8007928:	f7f8 fc5a 	bl	80001e0 <memchr>
 800792c:	2800      	cmp	r0, #0
 800792e:	d036      	beq.n	800799e <_svfiprintf_r+0x1d2>
 8007930:	4b21      	ldr	r3, [pc, #132]	@ (80079b8 <_svfiprintf_r+0x1ec>)
 8007932:	bb1b      	cbnz	r3, 800797c <_svfiprintf_r+0x1b0>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	3307      	adds	r3, #7
 8007938:	f023 0307 	bic.w	r3, r3, #7
 800793c:	3308      	adds	r3, #8
 800793e:	9303      	str	r3, [sp, #12]
 8007940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007942:	4433      	add	r3, r6
 8007944:	9309      	str	r3, [sp, #36]	@ 0x24
 8007946:	e76a      	b.n	800781e <_svfiprintf_r+0x52>
 8007948:	fb0c 3202 	mla	r2, ip, r2, r3
 800794c:	460c      	mov	r4, r1
 800794e:	2001      	movs	r0, #1
 8007950:	e7a8      	b.n	80078a4 <_svfiprintf_r+0xd8>
 8007952:	2300      	movs	r3, #0
 8007954:	3401      	adds	r4, #1
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	4619      	mov	r1, r3
 800795a:	f04f 0c0a 	mov.w	ip, #10
 800795e:	4620      	mov	r0, r4
 8007960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007964:	3a30      	subs	r2, #48	@ 0x30
 8007966:	2a09      	cmp	r2, #9
 8007968:	d903      	bls.n	8007972 <_svfiprintf_r+0x1a6>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0c6      	beq.n	80078fc <_svfiprintf_r+0x130>
 800796e:	9105      	str	r1, [sp, #20]
 8007970:	e7c4      	b.n	80078fc <_svfiprintf_r+0x130>
 8007972:	fb0c 2101 	mla	r1, ip, r1, r2
 8007976:	4604      	mov	r4, r0
 8007978:	2301      	movs	r3, #1
 800797a:	e7f0      	b.n	800795e <_svfiprintf_r+0x192>
 800797c:	ab03      	add	r3, sp, #12
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	462a      	mov	r2, r5
 8007982:	4b0e      	ldr	r3, [pc, #56]	@ (80079bc <_svfiprintf_r+0x1f0>)
 8007984:	a904      	add	r1, sp, #16
 8007986:	4638      	mov	r0, r7
 8007988:	f3af 8000 	nop.w
 800798c:	1c42      	adds	r2, r0, #1
 800798e:	4606      	mov	r6, r0
 8007990:	d1d6      	bne.n	8007940 <_svfiprintf_r+0x174>
 8007992:	89ab      	ldrh	r3, [r5, #12]
 8007994:	065b      	lsls	r3, r3, #25
 8007996:	f53f af2d 	bmi.w	80077f4 <_svfiprintf_r+0x28>
 800799a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800799c:	e72c      	b.n	80077f8 <_svfiprintf_r+0x2c>
 800799e:	ab03      	add	r3, sp, #12
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	462a      	mov	r2, r5
 80079a4:	4b05      	ldr	r3, [pc, #20]	@ (80079bc <_svfiprintf_r+0x1f0>)
 80079a6:	a904      	add	r1, sp, #16
 80079a8:	4638      	mov	r0, r7
 80079aa:	f000 f9bb 	bl	8007d24 <_printf_i>
 80079ae:	e7ed      	b.n	800798c <_svfiprintf_r+0x1c0>
 80079b0:	08008520 	.word	0x08008520
 80079b4:	0800852a 	.word	0x0800852a
 80079b8:	00000000 	.word	0x00000000
 80079bc:	08007715 	.word	0x08007715
 80079c0:	08008526 	.word	0x08008526

080079c4 <__sfputc_r>:
 80079c4:	6893      	ldr	r3, [r2, #8]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	b410      	push	{r4}
 80079cc:	6093      	str	r3, [r2, #8]
 80079ce:	da08      	bge.n	80079e2 <__sfputc_r+0x1e>
 80079d0:	6994      	ldr	r4, [r2, #24]
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	db01      	blt.n	80079da <__sfputc_r+0x16>
 80079d6:	290a      	cmp	r1, #10
 80079d8:	d103      	bne.n	80079e2 <__sfputc_r+0x1e>
 80079da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079de:	f000 bbde 	b.w	800819e <__swbuf_r>
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	1c58      	adds	r0, r3, #1
 80079e6:	6010      	str	r0, [r2, #0]
 80079e8:	7019      	strb	r1, [r3, #0]
 80079ea:	4608      	mov	r0, r1
 80079ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <__sfputs_r>:
 80079f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f4:	4606      	mov	r6, r0
 80079f6:	460f      	mov	r7, r1
 80079f8:	4614      	mov	r4, r2
 80079fa:	18d5      	adds	r5, r2, r3
 80079fc:	42ac      	cmp	r4, r5
 80079fe:	d101      	bne.n	8007a04 <__sfputs_r+0x12>
 8007a00:	2000      	movs	r0, #0
 8007a02:	e007      	b.n	8007a14 <__sfputs_r+0x22>
 8007a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a08:	463a      	mov	r2, r7
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff ffda 	bl	80079c4 <__sfputc_r>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d1f3      	bne.n	80079fc <__sfputs_r+0xa>
 8007a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a18 <_vfiprintf_r>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	b09d      	sub	sp, #116	@ 0x74
 8007a20:	4614      	mov	r4, r2
 8007a22:	4698      	mov	r8, r3
 8007a24:	4606      	mov	r6, r0
 8007a26:	b118      	cbz	r0, 8007a30 <_vfiprintf_r+0x18>
 8007a28:	6a03      	ldr	r3, [r0, #32]
 8007a2a:	b90b      	cbnz	r3, 8007a30 <_vfiprintf_r+0x18>
 8007a2c:	f7ff fd8c 	bl	8007548 <__sinit>
 8007a30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a32:	07d9      	lsls	r1, r3, #31
 8007a34:	d405      	bmi.n	8007a42 <_vfiprintf_r+0x2a>
 8007a36:	89ab      	ldrh	r3, [r5, #12]
 8007a38:	059a      	lsls	r2, r3, #22
 8007a3a:	d402      	bmi.n	8007a42 <_vfiprintf_r+0x2a>
 8007a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a3e:	f7ff fe0e 	bl	800765e <__retarget_lock_acquire_recursive>
 8007a42:	89ab      	ldrh	r3, [r5, #12]
 8007a44:	071b      	lsls	r3, r3, #28
 8007a46:	d501      	bpl.n	8007a4c <_vfiprintf_r+0x34>
 8007a48:	692b      	ldr	r3, [r5, #16]
 8007a4a:	b99b      	cbnz	r3, 8007a74 <_vfiprintf_r+0x5c>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f000 fbe4 	bl	800821c <__swsetup_r>
 8007a54:	b170      	cbz	r0, 8007a74 <_vfiprintf_r+0x5c>
 8007a56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a58:	07dc      	lsls	r4, r3, #31
 8007a5a:	d504      	bpl.n	8007a66 <_vfiprintf_r+0x4e>
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a60:	b01d      	add	sp, #116	@ 0x74
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	0598      	lsls	r0, r3, #22
 8007a6a:	d4f7      	bmi.n	8007a5c <_vfiprintf_r+0x44>
 8007a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a6e:	f7ff fdf7 	bl	8007660 <__retarget_lock_release_recursive>
 8007a72:	e7f3      	b.n	8007a5c <_vfiprintf_r+0x44>
 8007a74:	2300      	movs	r3, #0
 8007a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a78:	2320      	movs	r3, #32
 8007a7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a82:	2330      	movs	r3, #48	@ 0x30
 8007a84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c34 <_vfiprintf_r+0x21c>
 8007a88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a8c:	f04f 0901 	mov.w	r9, #1
 8007a90:	4623      	mov	r3, r4
 8007a92:	469a      	mov	sl, r3
 8007a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a98:	b10a      	cbz	r2, 8007a9e <_vfiprintf_r+0x86>
 8007a9a:	2a25      	cmp	r2, #37	@ 0x25
 8007a9c:	d1f9      	bne.n	8007a92 <_vfiprintf_r+0x7a>
 8007a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007aa2:	d00b      	beq.n	8007abc <_vfiprintf_r+0xa4>
 8007aa4:	465b      	mov	r3, fp
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7ff ffa1 	bl	80079f2 <__sfputs_r>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	f000 80a7 	beq.w	8007c04 <_vfiprintf_r+0x1ec>
 8007ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab8:	445a      	add	r2, fp
 8007aba:	9209      	str	r2, [sp, #36]	@ 0x24
 8007abc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 809f 	beq.w	8007c04 <_vfiprintf_r+0x1ec>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ad0:	f10a 0a01 	add.w	sl, sl, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	9307      	str	r3, [sp, #28]
 8007ad8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007adc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ade:	4654      	mov	r4, sl
 8007ae0:	2205      	movs	r2, #5
 8007ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae6:	4853      	ldr	r0, [pc, #332]	@ (8007c34 <_vfiprintf_r+0x21c>)
 8007ae8:	f7f8 fb7a 	bl	80001e0 <memchr>
 8007aec:	9a04      	ldr	r2, [sp, #16]
 8007aee:	b9d8      	cbnz	r0, 8007b28 <_vfiprintf_r+0x110>
 8007af0:	06d1      	lsls	r1, r2, #27
 8007af2:	bf44      	itt	mi
 8007af4:	2320      	movmi	r3, #32
 8007af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007afa:	0713      	lsls	r3, r2, #28
 8007afc:	bf44      	itt	mi
 8007afe:	232b      	movmi	r3, #43	@ 0x2b
 8007b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b04:	f89a 3000 	ldrb.w	r3, [sl]
 8007b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b0a:	d015      	beq.n	8007b38 <_vfiprintf_r+0x120>
 8007b0c:	9a07      	ldr	r2, [sp, #28]
 8007b0e:	4654      	mov	r4, sl
 8007b10:	2000      	movs	r0, #0
 8007b12:	f04f 0c0a 	mov.w	ip, #10
 8007b16:	4621      	mov	r1, r4
 8007b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b1c:	3b30      	subs	r3, #48	@ 0x30
 8007b1e:	2b09      	cmp	r3, #9
 8007b20:	d94b      	bls.n	8007bba <_vfiprintf_r+0x1a2>
 8007b22:	b1b0      	cbz	r0, 8007b52 <_vfiprintf_r+0x13a>
 8007b24:	9207      	str	r2, [sp, #28]
 8007b26:	e014      	b.n	8007b52 <_vfiprintf_r+0x13a>
 8007b28:	eba0 0308 	sub.w	r3, r0, r8
 8007b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b30:	4313      	orrs	r3, r2
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	46a2      	mov	sl, r4
 8007b36:	e7d2      	b.n	8007ade <_vfiprintf_r+0xc6>
 8007b38:	9b03      	ldr	r3, [sp, #12]
 8007b3a:	1d19      	adds	r1, r3, #4
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	9103      	str	r1, [sp, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bfbb      	ittet	lt
 8007b44:	425b      	neglt	r3, r3
 8007b46:	f042 0202 	orrlt.w	r2, r2, #2
 8007b4a:	9307      	strge	r3, [sp, #28]
 8007b4c:	9307      	strlt	r3, [sp, #28]
 8007b4e:	bfb8      	it	lt
 8007b50:	9204      	strlt	r2, [sp, #16]
 8007b52:	7823      	ldrb	r3, [r4, #0]
 8007b54:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b56:	d10a      	bne.n	8007b6e <_vfiprintf_r+0x156>
 8007b58:	7863      	ldrb	r3, [r4, #1]
 8007b5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b5c:	d132      	bne.n	8007bc4 <_vfiprintf_r+0x1ac>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	1d1a      	adds	r2, r3, #4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	9203      	str	r2, [sp, #12]
 8007b66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b6a:	3402      	adds	r4, #2
 8007b6c:	9305      	str	r3, [sp, #20]
 8007b6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c44 <_vfiprintf_r+0x22c>
 8007b72:	7821      	ldrb	r1, [r4, #0]
 8007b74:	2203      	movs	r2, #3
 8007b76:	4650      	mov	r0, sl
 8007b78:	f7f8 fb32 	bl	80001e0 <memchr>
 8007b7c:	b138      	cbz	r0, 8007b8e <_vfiprintf_r+0x176>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	eba0 000a 	sub.w	r0, r0, sl
 8007b84:	2240      	movs	r2, #64	@ 0x40
 8007b86:	4082      	lsls	r2, r0
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b92:	4829      	ldr	r0, [pc, #164]	@ (8007c38 <_vfiprintf_r+0x220>)
 8007b94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b98:	2206      	movs	r2, #6
 8007b9a:	f7f8 fb21 	bl	80001e0 <memchr>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d03f      	beq.n	8007c22 <_vfiprintf_r+0x20a>
 8007ba2:	4b26      	ldr	r3, [pc, #152]	@ (8007c3c <_vfiprintf_r+0x224>)
 8007ba4:	bb1b      	cbnz	r3, 8007bee <_vfiprintf_r+0x1d6>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	3307      	adds	r3, #7
 8007baa:	f023 0307 	bic.w	r3, r3, #7
 8007bae:	3308      	adds	r3, #8
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb4:	443b      	add	r3, r7
 8007bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb8:	e76a      	b.n	8007a90 <_vfiprintf_r+0x78>
 8007bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	e7a8      	b.n	8007b16 <_vfiprintf_r+0xfe>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	3401      	adds	r4, #1
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f04f 0c0a 	mov.w	ip, #10
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd6:	3a30      	subs	r2, #48	@ 0x30
 8007bd8:	2a09      	cmp	r2, #9
 8007bda:	d903      	bls.n	8007be4 <_vfiprintf_r+0x1cc>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0c6      	beq.n	8007b6e <_vfiprintf_r+0x156>
 8007be0:	9105      	str	r1, [sp, #20]
 8007be2:	e7c4      	b.n	8007b6e <_vfiprintf_r+0x156>
 8007be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be8:	4604      	mov	r4, r0
 8007bea:	2301      	movs	r3, #1
 8007bec:	e7f0      	b.n	8007bd0 <_vfiprintf_r+0x1b8>
 8007bee:	ab03      	add	r3, sp, #12
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	462a      	mov	r2, r5
 8007bf4:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <_vfiprintf_r+0x228>)
 8007bf6:	a904      	add	r1, sp, #16
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f3af 8000 	nop.w
 8007bfe:	4607      	mov	r7, r0
 8007c00:	1c78      	adds	r0, r7, #1
 8007c02:	d1d6      	bne.n	8007bb2 <_vfiprintf_r+0x19a>
 8007c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c06:	07d9      	lsls	r1, r3, #31
 8007c08:	d405      	bmi.n	8007c16 <_vfiprintf_r+0x1fe>
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	059a      	lsls	r2, r3, #22
 8007c0e:	d402      	bmi.n	8007c16 <_vfiprintf_r+0x1fe>
 8007c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c12:	f7ff fd25 	bl	8007660 <__retarget_lock_release_recursive>
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	065b      	lsls	r3, r3, #25
 8007c1a:	f53f af1f 	bmi.w	8007a5c <_vfiprintf_r+0x44>
 8007c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c20:	e71e      	b.n	8007a60 <_vfiprintf_r+0x48>
 8007c22:	ab03      	add	r3, sp, #12
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	462a      	mov	r2, r5
 8007c28:	4b05      	ldr	r3, [pc, #20]	@ (8007c40 <_vfiprintf_r+0x228>)
 8007c2a:	a904      	add	r1, sp, #16
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 f879 	bl	8007d24 <_printf_i>
 8007c32:	e7e4      	b.n	8007bfe <_vfiprintf_r+0x1e6>
 8007c34:	08008520 	.word	0x08008520
 8007c38:	0800852a 	.word	0x0800852a
 8007c3c:	00000000 	.word	0x00000000
 8007c40:	080079f3 	.word	0x080079f3
 8007c44:	08008526 	.word	0x08008526

08007c48 <_printf_common>:
 8007c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	4698      	mov	r8, r3
 8007c50:	688a      	ldr	r2, [r1, #8]
 8007c52:	690b      	ldr	r3, [r1, #16]
 8007c54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	bfb8      	it	lt
 8007c5c:	4613      	movlt	r3, r2
 8007c5e:	6033      	str	r3, [r6, #0]
 8007c60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c64:	4607      	mov	r7, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	b10a      	cbz	r2, 8007c6e <_printf_common+0x26>
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	6033      	str	r3, [r6, #0]
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	0699      	lsls	r1, r3, #26
 8007c72:	bf42      	ittt	mi
 8007c74:	6833      	ldrmi	r3, [r6, #0]
 8007c76:	3302      	addmi	r3, #2
 8007c78:	6033      	strmi	r3, [r6, #0]
 8007c7a:	6825      	ldr	r5, [r4, #0]
 8007c7c:	f015 0506 	ands.w	r5, r5, #6
 8007c80:	d106      	bne.n	8007c90 <_printf_common+0x48>
 8007c82:	f104 0a19 	add.w	sl, r4, #25
 8007c86:	68e3      	ldr	r3, [r4, #12]
 8007c88:	6832      	ldr	r2, [r6, #0]
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	dc26      	bgt.n	8007cde <_printf_common+0x96>
 8007c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	3b00      	subs	r3, #0
 8007c98:	bf18      	it	ne
 8007c9a:	2301      	movne	r3, #1
 8007c9c:	0692      	lsls	r2, r2, #26
 8007c9e:	d42b      	bmi.n	8007cf8 <_printf_common+0xb0>
 8007ca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ca4:	4641      	mov	r1, r8
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	47c8      	blx	r9
 8007caa:	3001      	adds	r0, #1
 8007cac:	d01e      	beq.n	8007cec <_printf_common+0xa4>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	6922      	ldr	r2, [r4, #16]
 8007cb2:	f003 0306 	and.w	r3, r3, #6
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	bf02      	ittt	eq
 8007cba:	68e5      	ldreq	r5, [r4, #12]
 8007cbc:	6833      	ldreq	r3, [r6, #0]
 8007cbe:	1aed      	subeq	r5, r5, r3
 8007cc0:	68a3      	ldr	r3, [r4, #8]
 8007cc2:	bf0c      	ite	eq
 8007cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc8:	2500      	movne	r5, #0
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	bfc4      	itt	gt
 8007cce:	1a9b      	subgt	r3, r3, r2
 8007cd0:	18ed      	addgt	r5, r5, r3
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	341a      	adds	r4, #26
 8007cd6:	42b5      	cmp	r5, r6
 8007cd8:	d11a      	bne.n	8007d10 <_printf_common+0xc8>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	e008      	b.n	8007cf0 <_printf_common+0xa8>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4652      	mov	r2, sl
 8007ce2:	4641      	mov	r1, r8
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	47c8      	blx	r9
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d103      	bne.n	8007cf4 <_printf_common+0xac>
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf4:	3501      	adds	r5, #1
 8007cf6:	e7c6      	b.n	8007c86 <_printf_common+0x3e>
 8007cf8:	18e1      	adds	r1, r4, r3
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	2030      	movs	r0, #48	@ 0x30
 8007cfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d02:	4422      	add	r2, r4
 8007d04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	e7c7      	b.n	8007ca0 <_printf_common+0x58>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4622      	mov	r2, r4
 8007d14:	4641      	mov	r1, r8
 8007d16:	4638      	mov	r0, r7
 8007d18:	47c8      	blx	r9
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d0e6      	beq.n	8007cec <_printf_common+0xa4>
 8007d1e:	3601      	adds	r6, #1
 8007d20:	e7d9      	b.n	8007cd6 <_printf_common+0x8e>
	...

08007d24 <_printf_i>:
 8007d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	7e0f      	ldrb	r7, [r1, #24]
 8007d2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d2c:	2f78      	cmp	r7, #120	@ 0x78
 8007d2e:	4691      	mov	r9, r2
 8007d30:	4680      	mov	r8, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	469a      	mov	sl, r3
 8007d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d3a:	d807      	bhi.n	8007d4c <_printf_i+0x28>
 8007d3c:	2f62      	cmp	r7, #98	@ 0x62
 8007d3e:	d80a      	bhi.n	8007d56 <_printf_i+0x32>
 8007d40:	2f00      	cmp	r7, #0
 8007d42:	f000 80d2 	beq.w	8007eea <_printf_i+0x1c6>
 8007d46:	2f58      	cmp	r7, #88	@ 0x58
 8007d48:	f000 80b9 	beq.w	8007ebe <_printf_i+0x19a>
 8007d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d54:	e03a      	b.n	8007dcc <_printf_i+0xa8>
 8007d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d5a:	2b15      	cmp	r3, #21
 8007d5c:	d8f6      	bhi.n	8007d4c <_printf_i+0x28>
 8007d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8007d64 <_printf_i+0x40>)
 8007d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d64:	08007dbd 	.word	0x08007dbd
 8007d68:	08007dd1 	.word	0x08007dd1
 8007d6c:	08007d4d 	.word	0x08007d4d
 8007d70:	08007d4d 	.word	0x08007d4d
 8007d74:	08007d4d 	.word	0x08007d4d
 8007d78:	08007d4d 	.word	0x08007d4d
 8007d7c:	08007dd1 	.word	0x08007dd1
 8007d80:	08007d4d 	.word	0x08007d4d
 8007d84:	08007d4d 	.word	0x08007d4d
 8007d88:	08007d4d 	.word	0x08007d4d
 8007d8c:	08007d4d 	.word	0x08007d4d
 8007d90:	08007ed1 	.word	0x08007ed1
 8007d94:	08007dfb 	.word	0x08007dfb
 8007d98:	08007e8b 	.word	0x08007e8b
 8007d9c:	08007d4d 	.word	0x08007d4d
 8007da0:	08007d4d 	.word	0x08007d4d
 8007da4:	08007ef3 	.word	0x08007ef3
 8007da8:	08007d4d 	.word	0x08007d4d
 8007dac:	08007dfb 	.word	0x08007dfb
 8007db0:	08007d4d 	.word	0x08007d4d
 8007db4:	08007d4d 	.word	0x08007d4d
 8007db8:	08007e93 	.word	0x08007e93
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6032      	str	r2, [r6, #0]
 8007dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e09d      	b.n	8007f0c <_printf_i+0x1e8>
 8007dd0:	6833      	ldr	r3, [r6, #0]
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	1d19      	adds	r1, r3, #4
 8007dd6:	6031      	str	r1, [r6, #0]
 8007dd8:	0606      	lsls	r6, r0, #24
 8007dda:	d501      	bpl.n	8007de0 <_printf_i+0xbc>
 8007ddc:	681d      	ldr	r5, [r3, #0]
 8007dde:	e003      	b.n	8007de8 <_printf_i+0xc4>
 8007de0:	0645      	lsls	r5, r0, #25
 8007de2:	d5fb      	bpl.n	8007ddc <_printf_i+0xb8>
 8007de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	da03      	bge.n	8007df4 <_printf_i+0xd0>
 8007dec:	232d      	movs	r3, #45	@ 0x2d
 8007dee:	426d      	negs	r5, r5
 8007df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007df4:	4859      	ldr	r0, [pc, #356]	@ (8007f5c <_printf_i+0x238>)
 8007df6:	230a      	movs	r3, #10
 8007df8:	e011      	b.n	8007e1e <_printf_i+0xfa>
 8007dfa:	6821      	ldr	r1, [r4, #0]
 8007dfc:	6833      	ldr	r3, [r6, #0]
 8007dfe:	0608      	lsls	r0, r1, #24
 8007e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e04:	d402      	bmi.n	8007e0c <_printf_i+0xe8>
 8007e06:	0649      	lsls	r1, r1, #25
 8007e08:	bf48      	it	mi
 8007e0a:	b2ad      	uxthmi	r5, r5
 8007e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e0e:	4853      	ldr	r0, [pc, #332]	@ (8007f5c <_printf_i+0x238>)
 8007e10:	6033      	str	r3, [r6, #0]
 8007e12:	bf14      	ite	ne
 8007e14:	230a      	movne	r3, #10
 8007e16:	2308      	moveq	r3, #8
 8007e18:	2100      	movs	r1, #0
 8007e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e1e:	6866      	ldr	r6, [r4, #4]
 8007e20:	60a6      	str	r6, [r4, #8]
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	bfa2      	ittt	ge
 8007e26:	6821      	ldrge	r1, [r4, #0]
 8007e28:	f021 0104 	bicge.w	r1, r1, #4
 8007e2c:	6021      	strge	r1, [r4, #0]
 8007e2e:	b90d      	cbnz	r5, 8007e34 <_printf_i+0x110>
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	d04b      	beq.n	8007ecc <_printf_i+0x1a8>
 8007e34:	4616      	mov	r6, r2
 8007e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e3e:	5dc7      	ldrb	r7, [r0, r7]
 8007e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e44:	462f      	mov	r7, r5
 8007e46:	42bb      	cmp	r3, r7
 8007e48:	460d      	mov	r5, r1
 8007e4a:	d9f4      	bls.n	8007e36 <_printf_i+0x112>
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d10b      	bne.n	8007e68 <_printf_i+0x144>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	07df      	lsls	r7, r3, #31
 8007e54:	d508      	bpl.n	8007e68 <_printf_i+0x144>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	4299      	cmp	r1, r3
 8007e5c:	bfde      	ittt	le
 8007e5e:	2330      	movle	r3, #48	@ 0x30
 8007e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e64:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007e68:	1b92      	subs	r2, r2, r6
 8007e6a:	6122      	str	r2, [r4, #16]
 8007e6c:	f8cd a000 	str.w	sl, [sp]
 8007e70:	464b      	mov	r3, r9
 8007e72:	aa03      	add	r2, sp, #12
 8007e74:	4621      	mov	r1, r4
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff fee6 	bl	8007c48 <_printf_common>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d14a      	bne.n	8007f16 <_printf_i+0x1f2>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e84:	b004      	add	sp, #16
 8007e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	f043 0320 	orr.w	r3, r3, #32
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	4833      	ldr	r0, [pc, #204]	@ (8007f60 <_printf_i+0x23c>)
 8007e94:	2778      	movs	r7, #120	@ 0x78
 8007e96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	6831      	ldr	r1, [r6, #0]
 8007e9e:	061f      	lsls	r7, r3, #24
 8007ea0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ea4:	d402      	bmi.n	8007eac <_printf_i+0x188>
 8007ea6:	065f      	lsls	r7, r3, #25
 8007ea8:	bf48      	it	mi
 8007eaa:	b2ad      	uxthmi	r5, r5
 8007eac:	6031      	str	r1, [r6, #0]
 8007eae:	07d9      	lsls	r1, r3, #31
 8007eb0:	bf44      	itt	mi
 8007eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007eb6:	6023      	strmi	r3, [r4, #0]
 8007eb8:	b11d      	cbz	r5, 8007ec2 <_printf_i+0x19e>
 8007eba:	2310      	movs	r3, #16
 8007ebc:	e7ac      	b.n	8007e18 <_printf_i+0xf4>
 8007ebe:	4827      	ldr	r0, [pc, #156]	@ (8007f5c <_printf_i+0x238>)
 8007ec0:	e7e9      	b.n	8007e96 <_printf_i+0x172>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f023 0320 	bic.w	r3, r3, #32
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	e7f6      	b.n	8007eba <_printf_i+0x196>
 8007ecc:	4616      	mov	r6, r2
 8007ece:	e7bd      	b.n	8007e4c <_printf_i+0x128>
 8007ed0:	6833      	ldr	r3, [r6, #0]
 8007ed2:	6825      	ldr	r5, [r4, #0]
 8007ed4:	6961      	ldr	r1, [r4, #20]
 8007ed6:	1d18      	adds	r0, r3, #4
 8007ed8:	6030      	str	r0, [r6, #0]
 8007eda:	062e      	lsls	r6, r5, #24
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	d501      	bpl.n	8007ee4 <_printf_i+0x1c0>
 8007ee0:	6019      	str	r1, [r3, #0]
 8007ee2:	e002      	b.n	8007eea <_printf_i+0x1c6>
 8007ee4:	0668      	lsls	r0, r5, #25
 8007ee6:	d5fb      	bpl.n	8007ee0 <_printf_i+0x1bc>
 8007ee8:	8019      	strh	r1, [r3, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	6123      	str	r3, [r4, #16]
 8007eee:	4616      	mov	r6, r2
 8007ef0:	e7bc      	b.n	8007e6c <_printf_i+0x148>
 8007ef2:	6833      	ldr	r3, [r6, #0]
 8007ef4:	1d1a      	adds	r2, r3, #4
 8007ef6:	6032      	str	r2, [r6, #0]
 8007ef8:	681e      	ldr	r6, [r3, #0]
 8007efa:	6862      	ldr	r2, [r4, #4]
 8007efc:	2100      	movs	r1, #0
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7f8 f96e 	bl	80001e0 <memchr>
 8007f04:	b108      	cbz	r0, 8007f0a <_printf_i+0x1e6>
 8007f06:	1b80      	subs	r0, r0, r6
 8007f08:	6060      	str	r0, [r4, #4]
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f14:	e7aa      	b.n	8007e6c <_printf_i+0x148>
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	4632      	mov	r2, r6
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	47d0      	blx	sl
 8007f20:	3001      	adds	r0, #1
 8007f22:	d0ad      	beq.n	8007e80 <_printf_i+0x15c>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	079b      	lsls	r3, r3, #30
 8007f28:	d413      	bmi.n	8007f52 <_printf_i+0x22e>
 8007f2a:	68e0      	ldr	r0, [r4, #12]
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	4298      	cmp	r0, r3
 8007f30:	bfb8      	it	lt
 8007f32:	4618      	movlt	r0, r3
 8007f34:	e7a6      	b.n	8007e84 <_printf_i+0x160>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4632      	mov	r2, r6
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	47d0      	blx	sl
 8007f40:	3001      	adds	r0, #1
 8007f42:	d09d      	beq.n	8007e80 <_printf_i+0x15c>
 8007f44:	3501      	adds	r5, #1
 8007f46:	68e3      	ldr	r3, [r4, #12]
 8007f48:	9903      	ldr	r1, [sp, #12]
 8007f4a:	1a5b      	subs	r3, r3, r1
 8007f4c:	42ab      	cmp	r3, r5
 8007f4e:	dcf2      	bgt.n	8007f36 <_printf_i+0x212>
 8007f50:	e7eb      	b.n	8007f2a <_printf_i+0x206>
 8007f52:	2500      	movs	r5, #0
 8007f54:	f104 0619 	add.w	r6, r4, #25
 8007f58:	e7f5      	b.n	8007f46 <_printf_i+0x222>
 8007f5a:	bf00      	nop
 8007f5c:	08008531 	.word	0x08008531
 8007f60:	08008542 	.word	0x08008542

08007f64 <__sflush_r>:
 8007f64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6c:	0716      	lsls	r6, r2, #28
 8007f6e:	4605      	mov	r5, r0
 8007f70:	460c      	mov	r4, r1
 8007f72:	d454      	bmi.n	800801e <__sflush_r+0xba>
 8007f74:	684b      	ldr	r3, [r1, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	dc02      	bgt.n	8007f80 <__sflush_r+0x1c>
 8007f7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd48      	ble.n	8008012 <__sflush_r+0xae>
 8007f80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f82:	2e00      	cmp	r6, #0
 8007f84:	d045      	beq.n	8008012 <__sflush_r+0xae>
 8007f86:	2300      	movs	r3, #0
 8007f88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f8c:	682f      	ldr	r7, [r5, #0]
 8007f8e:	6a21      	ldr	r1, [r4, #32]
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	d030      	beq.n	8007ff6 <__sflush_r+0x92>
 8007f94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	0759      	lsls	r1, r3, #29
 8007f9a:	d505      	bpl.n	8007fa8 <__sflush_r+0x44>
 8007f9c:	6863      	ldr	r3, [r4, #4]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fa2:	b10b      	cbz	r3, 8007fa8 <__sflush_r+0x44>
 8007fa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fac:	6a21      	ldr	r1, [r4, #32]
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b0      	blx	r6
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	d106      	bne.n	8007fc6 <__sflush_r+0x62>
 8007fb8:	6829      	ldr	r1, [r5, #0]
 8007fba:	291d      	cmp	r1, #29
 8007fbc:	d82b      	bhi.n	8008016 <__sflush_r+0xb2>
 8007fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8008068 <__sflush_r+0x104>)
 8007fc0:	410a      	asrs	r2, r1
 8007fc2:	07d6      	lsls	r6, r2, #31
 8007fc4:	d427      	bmi.n	8008016 <__sflush_r+0xb2>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	6062      	str	r2, [r4, #4]
 8007fca:	04d9      	lsls	r1, r3, #19
 8007fcc:	6922      	ldr	r2, [r4, #16]
 8007fce:	6022      	str	r2, [r4, #0]
 8007fd0:	d504      	bpl.n	8007fdc <__sflush_r+0x78>
 8007fd2:	1c42      	adds	r2, r0, #1
 8007fd4:	d101      	bne.n	8007fda <__sflush_r+0x76>
 8007fd6:	682b      	ldr	r3, [r5, #0]
 8007fd8:	b903      	cbnz	r3, 8007fdc <__sflush_r+0x78>
 8007fda:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fde:	602f      	str	r7, [r5, #0]
 8007fe0:	b1b9      	cbz	r1, 8008012 <__sflush_r+0xae>
 8007fe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fe6:	4299      	cmp	r1, r3
 8007fe8:	d002      	beq.n	8007ff0 <__sflush_r+0x8c>
 8007fea:	4628      	mov	r0, r5
 8007fec:	f7ff fb48 	bl	8007680 <_free_r>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ff4:	e00d      	b.n	8008012 <__sflush_r+0xae>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b0      	blx	r6
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	1c50      	adds	r0, r2, #1
 8008000:	d1c9      	bne.n	8007f96 <__sflush_r+0x32>
 8008002:	682b      	ldr	r3, [r5, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0c6      	beq.n	8007f96 <__sflush_r+0x32>
 8008008:	2b1d      	cmp	r3, #29
 800800a:	d001      	beq.n	8008010 <__sflush_r+0xac>
 800800c:	2b16      	cmp	r3, #22
 800800e:	d11e      	bne.n	800804e <__sflush_r+0xea>
 8008010:	602f      	str	r7, [r5, #0]
 8008012:	2000      	movs	r0, #0
 8008014:	e022      	b.n	800805c <__sflush_r+0xf8>
 8008016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800801a:	b21b      	sxth	r3, r3
 800801c:	e01b      	b.n	8008056 <__sflush_r+0xf2>
 800801e:	690f      	ldr	r7, [r1, #16]
 8008020:	2f00      	cmp	r7, #0
 8008022:	d0f6      	beq.n	8008012 <__sflush_r+0xae>
 8008024:	0793      	lsls	r3, r2, #30
 8008026:	680e      	ldr	r6, [r1, #0]
 8008028:	bf08      	it	eq
 800802a:	694b      	ldreq	r3, [r1, #20]
 800802c:	600f      	str	r7, [r1, #0]
 800802e:	bf18      	it	ne
 8008030:	2300      	movne	r3, #0
 8008032:	eba6 0807 	sub.w	r8, r6, r7
 8008036:	608b      	str	r3, [r1, #8]
 8008038:	f1b8 0f00 	cmp.w	r8, #0
 800803c:	dde9      	ble.n	8008012 <__sflush_r+0xae>
 800803e:	6a21      	ldr	r1, [r4, #32]
 8008040:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008042:	4643      	mov	r3, r8
 8008044:	463a      	mov	r2, r7
 8008046:	4628      	mov	r0, r5
 8008048:	47b0      	blx	r6
 800804a:	2800      	cmp	r0, #0
 800804c:	dc08      	bgt.n	8008060 <__sflush_r+0xfc>
 800804e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008060:	4407      	add	r7, r0
 8008062:	eba8 0800 	sub.w	r8, r8, r0
 8008066:	e7e7      	b.n	8008038 <__sflush_r+0xd4>
 8008068:	dfbffffe 	.word	0xdfbffffe

0800806c <_fflush_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	690b      	ldr	r3, [r1, #16]
 8008070:	4605      	mov	r5, r0
 8008072:	460c      	mov	r4, r1
 8008074:	b913      	cbnz	r3, 800807c <_fflush_r+0x10>
 8008076:	2500      	movs	r5, #0
 8008078:	4628      	mov	r0, r5
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	b118      	cbz	r0, 8008086 <_fflush_r+0x1a>
 800807e:	6a03      	ldr	r3, [r0, #32]
 8008080:	b90b      	cbnz	r3, 8008086 <_fflush_r+0x1a>
 8008082:	f7ff fa61 	bl	8007548 <__sinit>
 8008086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0f3      	beq.n	8008076 <_fflush_r+0xa>
 800808e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008090:	07d0      	lsls	r0, r2, #31
 8008092:	d404      	bmi.n	800809e <_fflush_r+0x32>
 8008094:	0599      	lsls	r1, r3, #22
 8008096:	d402      	bmi.n	800809e <_fflush_r+0x32>
 8008098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800809a:	f7ff fae0 	bl	800765e <__retarget_lock_acquire_recursive>
 800809e:	4628      	mov	r0, r5
 80080a0:	4621      	mov	r1, r4
 80080a2:	f7ff ff5f 	bl	8007f64 <__sflush_r>
 80080a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080a8:	07da      	lsls	r2, r3, #31
 80080aa:	4605      	mov	r5, r0
 80080ac:	d4e4      	bmi.n	8008078 <_fflush_r+0xc>
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	059b      	lsls	r3, r3, #22
 80080b2:	d4e1      	bmi.n	8008078 <_fflush_r+0xc>
 80080b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080b6:	f7ff fad3 	bl	8007660 <__retarget_lock_release_recursive>
 80080ba:	e7dd      	b.n	8008078 <_fflush_r+0xc>

080080bc <__sread>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	460c      	mov	r4, r1
 80080c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c4:	f000 f9c0 	bl	8008448 <_read_r>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	bfab      	itete	ge
 80080cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080ce:	89a3      	ldrhlt	r3, [r4, #12]
 80080d0:	181b      	addge	r3, r3, r0
 80080d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080d6:	bfac      	ite	ge
 80080d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080da:	81a3      	strhlt	r3, [r4, #12]
 80080dc:	bd10      	pop	{r4, pc}

080080de <__swrite>:
 80080de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e2:	461f      	mov	r7, r3
 80080e4:	898b      	ldrh	r3, [r1, #12]
 80080e6:	05db      	lsls	r3, r3, #23
 80080e8:	4605      	mov	r5, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	4616      	mov	r6, r2
 80080ee:	d505      	bpl.n	80080fc <__swrite+0x1e>
 80080f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f4:	2302      	movs	r3, #2
 80080f6:	2200      	movs	r2, #0
 80080f8:	f000 f994 	bl	8008424 <_lseek_r>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008102:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	4632      	mov	r2, r6
 800810a:	463b      	mov	r3, r7
 800810c:	4628      	mov	r0, r5
 800810e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	f000 b9ab 	b.w	800846c <_write_r>

08008116 <__sseek>:
 8008116:	b510      	push	{r4, lr}
 8008118:	460c      	mov	r4, r1
 800811a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811e:	f000 f981 	bl	8008424 <_lseek_r>
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	bf15      	itete	ne
 8008128:	6560      	strne	r0, [r4, #84]	@ 0x54
 800812a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800812e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008132:	81a3      	strheq	r3, [r4, #12]
 8008134:	bf18      	it	ne
 8008136:	81a3      	strhne	r3, [r4, #12]
 8008138:	bd10      	pop	{r4, pc}

0800813a <__sclose>:
 800813a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813e:	f000 b93f 	b.w	80083c0 <_close_r>

08008142 <_realloc_r>:
 8008142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008146:	4680      	mov	r8, r0
 8008148:	4615      	mov	r5, r2
 800814a:	460c      	mov	r4, r1
 800814c:	b921      	cbnz	r1, 8008158 <_realloc_r+0x16>
 800814e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008152:	4611      	mov	r1, r2
 8008154:	f7ff b8ac 	b.w	80072b0 <_malloc_r>
 8008158:	b92a      	cbnz	r2, 8008166 <_realloc_r+0x24>
 800815a:	f7ff fa91 	bl	8007680 <_free_r>
 800815e:	2400      	movs	r4, #0
 8008160:	4620      	mov	r0, r4
 8008162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008166:	f000 f993 	bl	8008490 <_malloc_usable_size_r>
 800816a:	4285      	cmp	r5, r0
 800816c:	4606      	mov	r6, r0
 800816e:	d802      	bhi.n	8008176 <_realloc_r+0x34>
 8008170:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008174:	d8f4      	bhi.n	8008160 <_realloc_r+0x1e>
 8008176:	4629      	mov	r1, r5
 8008178:	4640      	mov	r0, r8
 800817a:	f7ff f899 	bl	80072b0 <_malloc_r>
 800817e:	4607      	mov	r7, r0
 8008180:	2800      	cmp	r0, #0
 8008182:	d0ec      	beq.n	800815e <_realloc_r+0x1c>
 8008184:	42b5      	cmp	r5, r6
 8008186:	462a      	mov	r2, r5
 8008188:	4621      	mov	r1, r4
 800818a:	bf28      	it	cs
 800818c:	4632      	movcs	r2, r6
 800818e:	f7ff fa68 	bl	8007662 <memcpy>
 8008192:	4621      	mov	r1, r4
 8008194:	4640      	mov	r0, r8
 8008196:	f7ff fa73 	bl	8007680 <_free_r>
 800819a:	463c      	mov	r4, r7
 800819c:	e7e0      	b.n	8008160 <_realloc_r+0x1e>

0800819e <__swbuf_r>:
 800819e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a0:	460e      	mov	r6, r1
 80081a2:	4614      	mov	r4, r2
 80081a4:	4605      	mov	r5, r0
 80081a6:	b118      	cbz	r0, 80081b0 <__swbuf_r+0x12>
 80081a8:	6a03      	ldr	r3, [r0, #32]
 80081aa:	b90b      	cbnz	r3, 80081b0 <__swbuf_r+0x12>
 80081ac:	f7ff f9cc 	bl	8007548 <__sinit>
 80081b0:	69a3      	ldr	r3, [r4, #24]
 80081b2:	60a3      	str	r3, [r4, #8]
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	071a      	lsls	r2, r3, #28
 80081b8:	d501      	bpl.n	80081be <__swbuf_r+0x20>
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	b943      	cbnz	r3, 80081d0 <__swbuf_r+0x32>
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	f000 f82b 	bl	800821c <__swsetup_r>
 80081c6:	b118      	cbz	r0, 80081d0 <__swbuf_r+0x32>
 80081c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80081cc:	4638      	mov	r0, r7
 80081ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	6922      	ldr	r2, [r4, #16]
 80081d4:	1a98      	subs	r0, r3, r2
 80081d6:	6963      	ldr	r3, [r4, #20]
 80081d8:	b2f6      	uxtb	r6, r6
 80081da:	4283      	cmp	r3, r0
 80081dc:	4637      	mov	r7, r6
 80081de:	dc05      	bgt.n	80081ec <__swbuf_r+0x4e>
 80081e0:	4621      	mov	r1, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	f7ff ff42 	bl	800806c <_fflush_r>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d1ed      	bne.n	80081c8 <__swbuf_r+0x2a>
 80081ec:	68a3      	ldr	r3, [r4, #8]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	60a3      	str	r3, [r4, #8]
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	6022      	str	r2, [r4, #0]
 80081f8:	701e      	strb	r6, [r3, #0]
 80081fa:	6962      	ldr	r2, [r4, #20]
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	429a      	cmp	r2, r3
 8008200:	d004      	beq.n	800820c <__swbuf_r+0x6e>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	07db      	lsls	r3, r3, #31
 8008206:	d5e1      	bpl.n	80081cc <__swbuf_r+0x2e>
 8008208:	2e0a      	cmp	r6, #10
 800820a:	d1df      	bne.n	80081cc <__swbuf_r+0x2e>
 800820c:	4621      	mov	r1, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f7ff ff2c 	bl	800806c <_fflush_r>
 8008214:	2800      	cmp	r0, #0
 8008216:	d0d9      	beq.n	80081cc <__swbuf_r+0x2e>
 8008218:	e7d6      	b.n	80081c8 <__swbuf_r+0x2a>
	...

0800821c <__swsetup_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4b29      	ldr	r3, [pc, #164]	@ (80082c4 <__swsetup_r+0xa8>)
 8008220:	4605      	mov	r5, r0
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	460c      	mov	r4, r1
 8008226:	b118      	cbz	r0, 8008230 <__swsetup_r+0x14>
 8008228:	6a03      	ldr	r3, [r0, #32]
 800822a:	b90b      	cbnz	r3, 8008230 <__swsetup_r+0x14>
 800822c:	f7ff f98c 	bl	8007548 <__sinit>
 8008230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008234:	0719      	lsls	r1, r3, #28
 8008236:	d422      	bmi.n	800827e <__swsetup_r+0x62>
 8008238:	06da      	lsls	r2, r3, #27
 800823a:	d407      	bmi.n	800824c <__swsetup_r+0x30>
 800823c:	2209      	movs	r2, #9
 800823e:	602a      	str	r2, [r5, #0]
 8008240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800824a:	e033      	b.n	80082b4 <__swsetup_r+0x98>
 800824c:	0758      	lsls	r0, r3, #29
 800824e:	d512      	bpl.n	8008276 <__swsetup_r+0x5a>
 8008250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008252:	b141      	cbz	r1, 8008266 <__swsetup_r+0x4a>
 8008254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008258:	4299      	cmp	r1, r3
 800825a:	d002      	beq.n	8008262 <__swsetup_r+0x46>
 800825c:	4628      	mov	r0, r5
 800825e:	f7ff fa0f 	bl	8007680 <_free_r>
 8008262:	2300      	movs	r3, #0
 8008264:	6363      	str	r3, [r4, #52]	@ 0x34
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800826c:	81a3      	strh	r3, [r4, #12]
 800826e:	2300      	movs	r3, #0
 8008270:	6063      	str	r3, [r4, #4]
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f043 0308 	orr.w	r3, r3, #8
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	b94b      	cbnz	r3, 8008296 <__swsetup_r+0x7a>
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800828c:	d003      	beq.n	8008296 <__swsetup_r+0x7a>
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f83f 	bl	8008314 <__smakebuf_r>
 8008296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800829a:	f013 0201 	ands.w	r2, r3, #1
 800829e:	d00a      	beq.n	80082b6 <__swsetup_r+0x9a>
 80082a0:	2200      	movs	r2, #0
 80082a2:	60a2      	str	r2, [r4, #8]
 80082a4:	6962      	ldr	r2, [r4, #20]
 80082a6:	4252      	negs	r2, r2
 80082a8:	61a2      	str	r2, [r4, #24]
 80082aa:	6922      	ldr	r2, [r4, #16]
 80082ac:	b942      	cbnz	r2, 80082c0 <__swsetup_r+0xa4>
 80082ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082b2:	d1c5      	bne.n	8008240 <__swsetup_r+0x24>
 80082b4:	bd38      	pop	{r3, r4, r5, pc}
 80082b6:	0799      	lsls	r1, r3, #30
 80082b8:	bf58      	it	pl
 80082ba:	6962      	ldrpl	r2, [r4, #20]
 80082bc:	60a2      	str	r2, [r4, #8]
 80082be:	e7f4      	b.n	80082aa <__swsetup_r+0x8e>
 80082c0:	2000      	movs	r0, #0
 80082c2:	e7f7      	b.n	80082b4 <__swsetup_r+0x98>
 80082c4:	20000018 	.word	0x20000018

080082c8 <__swhatbuf_r>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	460c      	mov	r4, r1
 80082cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d0:	2900      	cmp	r1, #0
 80082d2:	b096      	sub	sp, #88	@ 0x58
 80082d4:	4615      	mov	r5, r2
 80082d6:	461e      	mov	r6, r3
 80082d8:	da0d      	bge.n	80082f6 <__swhatbuf_r+0x2e>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082e0:	f04f 0100 	mov.w	r1, #0
 80082e4:	bf14      	ite	ne
 80082e6:	2340      	movne	r3, #64	@ 0x40
 80082e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082ec:	2000      	movs	r0, #0
 80082ee:	6031      	str	r1, [r6, #0]
 80082f0:	602b      	str	r3, [r5, #0]
 80082f2:	b016      	add	sp, #88	@ 0x58
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	466a      	mov	r2, sp
 80082f8:	f000 f872 	bl	80083e0 <_fstat_r>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	dbec      	blt.n	80082da <__swhatbuf_r+0x12>
 8008300:	9901      	ldr	r1, [sp, #4]
 8008302:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008306:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800830a:	4259      	negs	r1, r3
 800830c:	4159      	adcs	r1, r3
 800830e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008312:	e7eb      	b.n	80082ec <__swhatbuf_r+0x24>

08008314 <__smakebuf_r>:
 8008314:	898b      	ldrh	r3, [r1, #12]
 8008316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008318:	079d      	lsls	r5, r3, #30
 800831a:	4606      	mov	r6, r0
 800831c:	460c      	mov	r4, r1
 800831e:	d507      	bpl.n	8008330 <__smakebuf_r+0x1c>
 8008320:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	6123      	str	r3, [r4, #16]
 8008328:	2301      	movs	r3, #1
 800832a:	6163      	str	r3, [r4, #20]
 800832c:	b003      	add	sp, #12
 800832e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008330:	ab01      	add	r3, sp, #4
 8008332:	466a      	mov	r2, sp
 8008334:	f7ff ffc8 	bl	80082c8 <__swhatbuf_r>
 8008338:	9f00      	ldr	r7, [sp, #0]
 800833a:	4605      	mov	r5, r0
 800833c:	4639      	mov	r1, r7
 800833e:	4630      	mov	r0, r6
 8008340:	f7fe ffb6 	bl	80072b0 <_malloc_r>
 8008344:	b948      	cbnz	r0, 800835a <__smakebuf_r+0x46>
 8008346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834a:	059a      	lsls	r2, r3, #22
 800834c:	d4ee      	bmi.n	800832c <__smakebuf_r+0x18>
 800834e:	f023 0303 	bic.w	r3, r3, #3
 8008352:	f043 0302 	orr.w	r3, r3, #2
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	e7e2      	b.n	8008320 <__smakebuf_r+0xc>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	6020      	str	r0, [r4, #0]
 800835e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800836a:	b15b      	cbz	r3, 8008384 <__smakebuf_r+0x70>
 800836c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008370:	4630      	mov	r0, r6
 8008372:	f000 f847 	bl	8008404 <_isatty_r>
 8008376:	b128      	cbz	r0, 8008384 <__smakebuf_r+0x70>
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	f043 0301 	orr.w	r3, r3, #1
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	431d      	orrs	r5, r3
 8008388:	81a5      	strh	r5, [r4, #12]
 800838a:	e7cf      	b.n	800832c <__smakebuf_r+0x18>

0800838c <memmove>:
 800838c:	4288      	cmp	r0, r1
 800838e:	b510      	push	{r4, lr}
 8008390:	eb01 0402 	add.w	r4, r1, r2
 8008394:	d902      	bls.n	800839c <memmove+0x10>
 8008396:	4284      	cmp	r4, r0
 8008398:	4623      	mov	r3, r4
 800839a:	d807      	bhi.n	80083ac <memmove+0x20>
 800839c:	1e43      	subs	r3, r0, #1
 800839e:	42a1      	cmp	r1, r4
 80083a0:	d008      	beq.n	80083b4 <memmove+0x28>
 80083a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083aa:	e7f8      	b.n	800839e <memmove+0x12>
 80083ac:	4402      	add	r2, r0
 80083ae:	4601      	mov	r1, r0
 80083b0:	428a      	cmp	r2, r1
 80083b2:	d100      	bne.n	80083b6 <memmove+0x2a>
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083be:	e7f7      	b.n	80083b0 <memmove+0x24>

080083c0 <_close_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4d06      	ldr	r5, [pc, #24]	@ (80083dc <_close_r+0x1c>)
 80083c4:	2300      	movs	r3, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	602b      	str	r3, [r5, #0]
 80083cc:	f7f9 fd43 	bl	8001e56 <_close>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_close_r+0x1a>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_close_r+0x1a>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	200003c0 	.word	0x200003c0

080083e0 <_fstat_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4d07      	ldr	r5, [pc, #28]	@ (8008400 <_fstat_r+0x20>)
 80083e4:	2300      	movs	r3, #0
 80083e6:	4604      	mov	r4, r0
 80083e8:	4608      	mov	r0, r1
 80083ea:	4611      	mov	r1, r2
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	f7f9 fd3e 	bl	8001e6e <_fstat>
 80083f2:	1c43      	adds	r3, r0, #1
 80083f4:	d102      	bne.n	80083fc <_fstat_r+0x1c>
 80083f6:	682b      	ldr	r3, [r5, #0]
 80083f8:	b103      	cbz	r3, 80083fc <_fstat_r+0x1c>
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	bf00      	nop
 8008400:	200003c0 	.word	0x200003c0

08008404 <_isatty_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d06      	ldr	r5, [pc, #24]	@ (8008420 <_isatty_r+0x1c>)
 8008408:	2300      	movs	r3, #0
 800840a:	4604      	mov	r4, r0
 800840c:	4608      	mov	r0, r1
 800840e:	602b      	str	r3, [r5, #0]
 8008410:	f7f9 fd3d 	bl	8001e8e <_isatty>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	d102      	bne.n	800841e <_isatty_r+0x1a>
 8008418:	682b      	ldr	r3, [r5, #0]
 800841a:	b103      	cbz	r3, 800841e <_isatty_r+0x1a>
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	bd38      	pop	{r3, r4, r5, pc}
 8008420:	200003c0 	.word	0x200003c0

08008424 <_lseek_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d07      	ldr	r5, [pc, #28]	@ (8008444 <_lseek_r+0x20>)
 8008428:	4604      	mov	r4, r0
 800842a:	4608      	mov	r0, r1
 800842c:	4611      	mov	r1, r2
 800842e:	2200      	movs	r2, #0
 8008430:	602a      	str	r2, [r5, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	f7f9 fd36 	bl	8001ea4 <_lseek>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d102      	bne.n	8008442 <_lseek_r+0x1e>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b103      	cbz	r3, 8008442 <_lseek_r+0x1e>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	200003c0 	.word	0x200003c0

08008448 <_read_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d07      	ldr	r5, [pc, #28]	@ (8008468 <_read_r+0x20>)
 800844c:	4604      	mov	r4, r0
 800844e:	4608      	mov	r0, r1
 8008450:	4611      	mov	r1, r2
 8008452:	2200      	movs	r2, #0
 8008454:	602a      	str	r2, [r5, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	f7f9 fcc4 	bl	8001de4 <_read>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d102      	bne.n	8008466 <_read_r+0x1e>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b103      	cbz	r3, 8008466 <_read_r+0x1e>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	200003c0 	.word	0x200003c0

0800846c <_write_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d07      	ldr	r5, [pc, #28]	@ (800848c <_write_r+0x20>)
 8008470:	4604      	mov	r4, r0
 8008472:	4608      	mov	r0, r1
 8008474:	4611      	mov	r1, r2
 8008476:	2200      	movs	r2, #0
 8008478:	602a      	str	r2, [r5, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	f7f9 fccf 	bl	8001e1e <_write>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_write_r+0x1e>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	b103      	cbz	r3, 800848a <_write_r+0x1e>
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	200003c0 	.word	0x200003c0

08008490 <_malloc_usable_size_r>:
 8008490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008494:	1f18      	subs	r0, r3, #4
 8008496:	2b00      	cmp	r3, #0
 8008498:	bfbc      	itt	lt
 800849a:	580b      	ldrlt	r3, [r1, r0]
 800849c:	18c0      	addlt	r0, r0, r3
 800849e:	4770      	bx	lr

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr
