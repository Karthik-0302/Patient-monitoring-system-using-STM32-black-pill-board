
hr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009018  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080091b0  080091b0  0000a1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009288  08009288  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009288  08009288  0000a288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009290  08009290  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009290  08009290  0000a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009294  08009294  0000a294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009298  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000078  08009310  0000b078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08009310  0000b628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f55  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ec  00000000  00000000  0001dffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000208f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1f  00000000  00000000  00021ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001870e  00000000  00000000  000228e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b2a  00000000  00000000  0003aff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d821  00000000  00000000  00050b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d8  00000000  00000000  000ee384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009198 	.word	0x08009198

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08009198 	.word	0x08009198

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	@ 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2uiz>:
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	d211      	bcs.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d211      	bcs.n	8000b3e <__aeabi_d2uiz+0x2e>
 8000b1a:	d50d      	bpl.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d40e      	bmi.n	8000b44 <__aeabi_d2uiz+0x34>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	fa23 f002 	lsr.w	r0, r3, r2
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_d2uiz+0x3a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_uldivmod>:
 8000bf0:	b953      	cbnz	r3, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf2:	b94a      	cbnz	r2, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	2800      	cmpeq	r0, #0
 8000bfa:	bf1c      	itt	ne
 8000bfc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c00:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c04:	f000 b96a 	b.w	8000edc <__aeabi_idiv0>
 8000c08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c10:	f000 f806 	bl	8000c20 <__udivmoddi4>
 8000c14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1c:	b004      	add	sp, #16
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	9d08      	ldr	r5, [sp, #32]
 8000c26:	460c      	mov	r4, r1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d14e      	bne.n	8000cca <__udivmoddi4+0xaa>
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	458c      	cmp	ip, r1
 8000c30:	4686      	mov	lr, r0
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	d962      	bls.n	8000cfe <__udivmoddi4+0xde>
 8000c38:	b14a      	cbz	r2, 8000c4e <__udivmoddi4+0x2e>
 8000c3a:	f1c2 0320 	rsb	r3, r2, #32
 8000c3e:	4091      	lsls	r1, r2
 8000c40:	fa20 f303 	lsr.w	r3, r0, r3
 8000c44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c48:	4319      	orrs	r1, r3
 8000c4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f f68c 	uxth.w	r6, ip
 8000c56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb04 f106 	mul.w	r1, r4, r6
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d90a      	bls.n	8000c84 <__udivmoddi4+0x64>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c76:	f080 8112 	bcs.w	8000e9e <__udivmoddi4+0x27e>
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	f240 810f 	bls.w	8000e9e <__udivmoddi4+0x27e>
 8000c80:	3c02      	subs	r4, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	fa1f f38e 	uxth.w	r3, lr
 8000c8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb00 f606 	mul.w	r6, r0, r6
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x94>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ca6:	f080 80fc 	bcs.w	8000ea2 <__udivmoddi4+0x282>
 8000caa:	429e      	cmp	r6, r3
 8000cac:	f240 80f9 	bls.w	8000ea2 <__udivmoddi4+0x282>
 8000cb0:	4463      	add	r3, ip
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa6>
 8000cbe:	40d3      	lsrs	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xba>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb4>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x150>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xcc>
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	f0c0 80f0 	bcc.w	8000ecc <__udivmoddi4+0x2ac>
 8000cec:	1a86      	subs	r6, r0, r2
 8000cee:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d0e6      	beq.n	8000cc6 <__udivmoddi4+0xa6>
 8000cf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cfc:	e7e3      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	f040 8090 	bne.w	8000e24 <__udivmoddi4+0x204>
 8000d04:	eba1 040c 	sub.w	r4, r1, ip
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb07 f006 	mul.w	r0, r7, r6
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x11c>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x11a>
 8000d34:	4298      	cmp	r0, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2b4>
 8000d3a:	4626      	mov	r6, r4
 8000d3c:	1a1c      	subs	r4, r3, r0
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d46:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4e:	fb00 f707 	mul.w	r7, r0, r7
 8000d52:	429f      	cmp	r7, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x148>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x146>
 8000d60:	429f      	cmp	r7, r3
 8000d62:	f200 80b0 	bhi.w	8000ec6 <__udivmoddi4+0x2a6>
 8000d66:	4620      	mov	r0, r4
 8000d68:	1bdb      	subs	r3, r3, r7
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x9c>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d80:	fa04 f301 	lsl.w	r3, r4, r1
 8000d84:	ea43 030c 	orr.w	r3, r3, ip
 8000d88:	40f4      	lsrs	r4, r6
 8000d8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8e:	0c38      	lsrs	r0, r7, #16
 8000d90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d94:	fbb4 fef0 	udiv	lr, r4, r0
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000da0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da4:	fb0e f90c 	mul.w	r9, lr, ip
 8000da8:	45a1      	cmp	r9, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x1a6>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000db6:	f080 8084 	bcs.w	8000ec2 <__udivmoddi4+0x2a2>
 8000dba:	45a1      	cmp	r9, r4
 8000dbc:	f240 8081 	bls.w	8000ec2 <__udivmoddi4+0x2a2>
 8000dc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	eba4 0409 	sub.w	r4, r4, r9
 8000dca:	fa1f f983 	uxth.w	r9, r3
 8000dce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x1d2>
 8000de2:	193c      	adds	r4, r7, r4
 8000de4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de8:	d267      	bcs.n	8000eba <__udivmoddi4+0x29a>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d965      	bls.n	8000eba <__udivmoddi4+0x29a>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	429c      	cmp	r4, r3
 8000e00:	46ce      	mov	lr, r9
 8000e02:	469c      	mov	ip, r3
 8000e04:	d351      	bcc.n	8000eaa <__udivmoddi4+0x28a>
 8000e06:	d04e      	beq.n	8000ea6 <__udivmoddi4+0x286>
 8000e08:	b155      	cbz	r5, 8000e20 <__udivmoddi4+0x200>
 8000e0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	40cb      	lsrs	r3, r1
 8000e18:	431e      	orrs	r6, r3
 8000e1a:	40cc      	lsrs	r4, r1
 8000e1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e20:	2100      	movs	r1, #0
 8000e22:	e750      	b.n	8000cc6 <__udivmoddi4+0xa6>
 8000e24:	f1c2 0320 	rsb	r3, r2, #32
 8000e28:	fa20 f103 	lsr.w	r1, r0, r3
 8000e2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e30:	fa24 f303 	lsr.w	r3, r4, r3
 8000e34:	4094      	lsls	r4, r2
 8000e36:	430c      	orrs	r4, r1
 8000e38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e48:	fb08 3110 	mls	r1, r8, r0, r3
 8000e4c:	0c23      	lsrs	r3, r4, #16
 8000e4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e52:	fb00 f107 	mul.w	r1, r0, r7
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x24c>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e62:	d22c      	bcs.n	8000ebe <__udivmoddi4+0x29e>
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d92a      	bls.n	8000ebe <__udivmoddi4+0x29e>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	1a5b      	subs	r3, r3, r1
 8000e6e:	b2a4      	uxth	r4, r4
 8000e70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e74:	fb08 3311 	mls	r3, r8, r1, r3
 8000e78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e7c:	fb01 f307 	mul.w	r3, r1, r7
 8000e80:	42a3      	cmp	r3, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x276>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e8c:	d213      	bcs.n	8000eb6 <__udivmoddi4+0x296>
 8000e8e:	42a3      	cmp	r3, r4
 8000e90:	d911      	bls.n	8000eb6 <__udivmoddi4+0x296>
 8000e92:	3902      	subs	r1, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	1ae4      	subs	r4, r4, r3
 8000e98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e9c:	e739      	b.n	8000d12 <__udivmoddi4+0xf2>
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	e6f0      	b.n	8000c84 <__udivmoddi4+0x64>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e706      	b.n	8000cb4 <__udivmoddi4+0x94>
 8000ea6:	45c8      	cmp	r8, r9
 8000ea8:	d2ae      	bcs.n	8000e08 <__udivmoddi4+0x1e8>
 8000eaa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb2:	3801      	subs	r0, #1
 8000eb4:	e7a8      	b.n	8000e08 <__udivmoddi4+0x1e8>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	e7ed      	b.n	8000e96 <__udivmoddi4+0x276>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	e799      	b.n	8000df2 <__udivmoddi4+0x1d2>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e7d4      	b.n	8000e6c <__udivmoddi4+0x24c>
 8000ec2:	46d6      	mov	lr, sl
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1a6>
 8000ec6:	4463      	add	r3, ip
 8000ec8:	3802      	subs	r0, #2
 8000eca:	e74d      	b.n	8000d68 <__udivmoddi4+0x148>
 8000ecc:	4606      	mov	r6, r0
 8000ece:	4623      	mov	r3, r4
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	e70f      	b.n	8000cf4 <__udivmoddi4+0xd4>
 8000ed4:	3e02      	subs	r6, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	e730      	b.n	8000d3c <__udivmoddi4+0x11c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <rf_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	f5ad 7d5c 	sub.w	sp, sp, #880	@ 0x370
 8000ee6:	af02      	add	r7, sp, #8
 8000ee8:	f507 745a 	add.w	r4, r7, #872	@ 0x368
 8000eec:	f5a4 7457 	sub.w	r4, r4, #860	@ 0x35c
 8000ef0:	6020      	str	r0, [r4, #0]
 8000ef2:	f507 705a 	add.w	r0, r7, #872	@ 0x368
 8000ef6:	f5a0 7058 	sub.w	r0, r0, #864	@ 0x360
 8000efa:	6001      	str	r1, [r0, #0]
 8000efc:	f507 715a 	add.w	r1, r7, #872	@ 0x368
 8000f00:	f5a1 7159 	sub.w	r1, r1, #868	@ 0x364
 8000f04:	600a      	str	r2, [r1, #0]
 8000f06:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000f0a:	f5a2 725a 	sub.w	r2, r2, #872	@ 0x368
 8000f0e:	6013      	str	r3, [r2, #0]
  float beta_ir, beta_red, x;
  float an_x[BUFFER_SIZE], *ptr_x; //ir
  float an_y[BUFFER_SIZE], *ptr_y; //red

  // calculates DC mean and subtracts DC from ir and red
  f_ir_mean=0.0;
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  f_red_mean=0.0;
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  for (k=0; k<n_ir_buffer_length; ++k) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8000f26:	e02c      	b.n	8000f82 <rf_heart_rate_and_oxygen_saturation+0xa2>
    f_ir_mean += pun_ir_buffer[k];
 8000f28:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000f32:	f5a2 7257 	sub.w	r2, r2, #860	@ 0x35c
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f44:	ed97 7ad8 	vldr	s14, [r7, #864]	@ 0x360
 8000f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4c:	edc7 7ad8 	vstr	s15, [r7, #864]	@ 0x360
    f_red_mean += pun_red_buffer[k];
 8000f50:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000f5a:	f5a2 7259 	sub.w	r2, r2, #868	@ 0x364
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6c:	ed97 7ad7 	vldr	s14, [r7, #860]	@ 0x35c
 8000f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f74:	edc7 7ad7 	vstr	s15, [r7, #860]	@ 0x35c
  for (k=0; k<n_ir_buffer_length; ++k) {
 8000f78:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8000f82:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000f86:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000f8a:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbc9      	blt.n	8000f28 <rf_heart_rate_and_oxygen_saturation+0x48>
  }
  f_ir_mean=f_ir_mean/n_ir_buffer_length ;
 8000f94:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000f98:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa6:	edd7 6ad8 	vldr	s13, [r7, #864]	@ 0x360
 8000faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fae:	edc7 7ad8 	vstr	s15, [r7, #864]	@ 0x360
  f_red_mean=f_red_mean/n_ir_buffer_length ;
 8000fb2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000fb6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	edd7 6ad7 	vldr	s13, [r7, #860]	@ 0x35c
 8000fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fcc:	edc7 7ad7 	vstr	s15, [r7, #860]	@ 0x35c

  // remove DC
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8000fd6:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8000fda:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8000fe6:	e03a      	b.n	800105e <rf_heart_rate_and_oxygen_saturation+0x17e>
    *ptr_x = pun_ir_buffer[k] - f_ir_mean;
 8000fe8:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8000ff2:	f5a2 7257 	sub.w	r2, r2, #860	@ 0x35c
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001004:	edd7 7ad8 	vldr	s15, [r7, #864]	@ 0x360
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001010:	edc3 7a00 	vstr	s15, [r3]
    *ptr_y = pun_red_buffer[k] - f_red_mean;
 8001014:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 800101e:	f5a2 7259 	sub.w	r2, r2, #868	@ 0x364
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	4413      	add	r3, r2
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001030:	edd7 7ad7 	vldr	s15, [r7, #860]	@ 0x35c
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800103c:	edc3 7a00 	vstr	s15, [r3]
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8001040:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001044:	3301      	adds	r3, #1
 8001046:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800104a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800104e:	3304      	adds	r3, #4
 8001050:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001054:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001058:	3304      	adds	r3, #4
 800105a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800105e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001062:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001066:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbbb      	blt.n	8000fe8 <rf_heart_rate_and_oxygen_saturation+0x108>
  }

  // RF, remove linear trend (baseline leveling)
  beta_ir = rf_linear_regression_beta(an_x, mean_X, sum_X2);
 8001070:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001074:	eddf 0aca 	vldr	s1, [pc, #808]	@ 80013a0 <rf_heart_rate_and_oxygen_saturation+0x4c0>
 8001078:	ed9f 0aca 	vldr	s0, [pc, #808]	@ 80013a4 <rf_heart_rate_and_oxygen_saturation+0x4c4>
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f99d 	bl	80013bc <rf_linear_regression_beta>
 8001082:	ed87 0ad3 	vstr	s0, [r7, #844]	@ 0x34c
  beta_red = rf_linear_regression_beta(an_y, mean_X, sum_X2);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	eddf 0ac5 	vldr	s1, [pc, #788]	@ 80013a0 <rf_heart_rate_and_oxygen_saturation+0x4c0>
 800108e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80013a4 <rf_heart_rate_and_oxygen_saturation+0x4c4>
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f992 	bl	80013bc <rf_linear_regression_beta>
 8001098:	ed87 0ad2 	vstr	s0, [r7, #840]	@ 0x348
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 80010a2:	4bc1      	ldr	r3, [pc, #772]	@ (80013a8 <rf_heart_rate_and_oxygen_saturation+0x4c8>)
 80010a4:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 80010a8:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80010ac:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80010b8:	e036      	b.n	8001128 <rf_heart_rate_and_oxygen_saturation+0x248>
    *ptr_x -= beta_ir*x;
 80010ba:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	edd7 6ad3 	vldr	s13, [r7, #844]	@ 0x34c
 80010c6:	edd7 7ad6 	vldr	s15, [r7, #856]	@ 0x358
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80010d6:	edc3 7a00 	vstr	s15, [r3]
    *ptr_y -= beta_red*x;
 80010da:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80010de:	ed93 7a00 	vldr	s14, [r3]
 80010e2:	edd7 6ad2 	vldr	s13, [r7, #840]	@ 0x348
 80010e6:	edd7 7ad6 	vldr	s15, [r7, #856]	@ 0x358
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80010f6:	edc3 7a00 	vstr	s15, [r3]
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 80010fa:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80010fe:	3301      	adds	r3, #1
 8001100:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001104:	edd7 7ad6 	vldr	s15, [r7, #856]	@ 0x358
 8001108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800110c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001110:	edc7 7ad6 	vstr	s15, [r7, #856]	@ 0x358
 8001114:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001118:	3304      	adds	r3, #4
 800111a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800111e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001122:	3304      	adds	r3, #4
 8001124:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8001128:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800112c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001130:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	dbbf      	blt.n	80010ba <rf_heart_rate_and_oxygen_saturation+0x1da>
  }

    // For SpO2 calculate RMS of both AC signals. In addition, pulse detector needs raw sum of squares for IR
  f_y_ac=rf_rms(an_y,n_ir_buffer_length,&f_red_sumsq);
 800113a:	f507 724d 	add.w	r2, r7, #820	@ 0x334
 800113e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001142:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001146:	f107 0014 	add.w	r0, r7, #20
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	f000 fad7 	bl	80016fe <rf_rms>
 8001150:	ed87 0ad1 	vstr	s0, [r7, #836]	@ 0x344
  f_x_ac=rf_rms(an_x,n_ir_buffer_length,&f_ir_sumsq);
 8001154:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001158:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800115c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001160:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	f000 faca 	bl	80016fe <rf_rms>
 800116a:	ed87 0ad0 	vstr	s0, [r7, #832]	@ 0x340

  // Calculate Pearson correlation between red and IR
  *correl=rf_Pcorrelation(an_x, an_y, n_ir_buffer_length)/sqrt(f_red_sumsq*f_ir_sumsq);
 800116e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001172:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8001176:	f107 0114 	add.w	r1, r7, #20
 800117a:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	f000 fb0d 	bl	800179e <rf_Pcorrelation>
 8001184:	ee10 3a10 	vmov	r3, s0
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f991 	bl	80004b0 <__aeabi_f2d>
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	ed97 7acd 	vldr	s14, [r7, #820]	@ 0x334
 8001196:	edd7 7ace 	vldr	s15, [r7, #824]	@ 0x338
 800119a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119e:	ee17 0a90 	vmov	r0, s15
 80011a2:	f7ff f985 	bl	80004b0 <__aeabi_f2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	ec43 2b10 	vmov	d0, r2, r3
 80011ae:	f007 feed 	bl	8008f8c <sqrt>
 80011b2:	ec53 2b10 	vmov	r2, r3, d0
 80011b6:	4620      	mov	r0, r4
 80011b8:	4629      	mov	r1, r5
 80011ba:	f7ff fafb 	bl	80007b4 <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fcc3 	bl	8000b50 <__aeabi_d2f>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80011d0:	601a      	str	r2, [r3, #0]

  // Find signal periodicity
  if(*correl>=min_pearson_correlation) {
 80011d2:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80013ac <rf_heart_rate_and_oxygen_saturation+0x4cc>
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	db27      	blt.n	8001238 <rf_heart_rate_and_oxygen_saturation+0x358>
    // At the beginning of oximetry run the exact range of heart rate is unknown. This may lead to wrong rate if the next call does not find the _first_
    // peak of the autocorrelation function. E.g., second peak would yield only 50% of the true rate.
    if(LOWEST_PERIOD==n_last_peak_interval)
 80011e8:	4b71      	ldr	r3, [pc, #452]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d10c      	bne.n	800120a <rf_heart_rate_and_oxygen_saturation+0x32a>
      rf_initialize_periodicity_search(an_x, BUFFER_SIZE, &n_last_peak_interval, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq);
 80011f0:	edd7 7ace 	vldr	s15, [r7, #824]	@ 0x338
 80011f4:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 80011f8:	eef0 0a67 	vmov.f32	s1, s15
 80011fc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001200:	2325      	movs	r3, #37	@ 0x25
 8001202:	4a6b      	ldr	r2, [pc, #428]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8001204:	2164      	movs	r1, #100	@ 0x64
 8001206:	f000 f968 	bl	80014da <rf_initialize_periodicity_search>
    // RF, If correlation os good, then find average periodicity of the IR signal. If aperiodic, return periodicity of 0
    if(n_last_peak_interval!=0)
 800120a:	4b69      	ldr	r3, [pc, #420]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d015      	beq.n	800123e <rf_heart_rate_and_oxygen_saturation+0x35e>
      rf_signal_periodicity(an_x, BUFFER_SIZE, &n_last_peak_interval, LOWEST_PERIOD, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq, ratio);
 8001212:	edd7 7ace 	vldr	s15, [r7, #824]	@ 0x338
 8001216:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 800121a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2325      	movs	r3, #37	@ 0x25
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	eef0 0a67 	vmov.f32	s1, s15
 8001228:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800122c:	2308      	movs	r3, #8
 800122e:	4a60      	ldr	r2, [pc, #384]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8001230:	2164      	movs	r1, #100	@ 0x64
 8001232:	f000 f9d1 	bl	80015d8 <rf_signal_periodicity>
 8001236:	e002      	b.n	800123e <rf_heart_rate_and_oxygen_saturation+0x35e>
  } else n_last_peak_interval=0;
 8001238:	4b5d      	ldr	r3, [pc, #372]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

  // Calculate heart rate if periodicity detector was successful. Otherwise, reset peak interval to its initial value and report error.
  if(n_last_peak_interval!=0) {
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d029      	beq.n	800129a <rf_heart_rate_and_oxygen_saturation+0x3ba>
    *pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 8001246:	4b5a      	ldr	r3, [pc, #360]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800124e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001252:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001256:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8001258:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    *pch_spo2_valid  = 0;
    return;
  }

  // After trend removal, the mean represents DC level
  xy_ratio= (f_y_ac*f_ir_mean)/(f_x_ac*f_red_mean);  //formula is (f_y_ac*f_x_dc) / (f_x_ac*f_y_dc) ;
 8001260:	ed97 7ad1 	vldr	s14, [r7, #836]	@ 0x344
 8001264:	edd7 7ad8 	vldr	s15, [r7, #864]	@ 0x360
 8001268:	ee67 6a27 	vmul.f32	s13, s14, s15
 800126c:	ed97 7ad0 	vldr	s14, [r7, #832]	@ 0x340
 8001270:	edd7 7ad7 	vldr	s15, [r7, #860]	@ 0x35c
 8001274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127c:	edc7 7acf 	vstr	s15, [r7, #828]	@ 0x33c
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 8001280:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 8001284:	f7ff f914 	bl	80004b0 <__aeabi_f2d>
 8001288:	a33b      	add	r3, pc, #236	@ (adr r3, 8001378 <rf_heart_rate_and_oxygen_saturation+0x498>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff fbf7 	bl	8000a80 <__aeabi_dcmpgt>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d117      	bne.n	80012c8 <rf_heart_rate_and_oxygen_saturation+0x3e8>
 8001298:	e05d      	b.n	8001356 <rf_heart_rate_and_oxygen_saturation+0x476>
    n_last_peak_interval=LOWEST_PERIOD;
 800129a:	4b45      	ldr	r3, [pc, #276]	@ (80013b0 <rf_heart_rate_and_oxygen_saturation+0x4d0>)
 800129c:	2208      	movs	r2, #8
 800129e:	601a      	str	r2, [r3, #0]
    *pn_heart_rate = -999; // unable to calculate because signal looks aperiodic
 80012a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80012a4:	4a43      	ldr	r2, [pc, #268]	@ (80013b4 <rf_heart_rate_and_oxygen_saturation+0x4d4>)
 80012a6:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 80012a8:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
    *pn_spo2 =  -999 ; // do not use SPO2 from this corrupt signal
 80012b0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80012b4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a3f      	ldr	r2, [pc, #252]	@ (80013b8 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 80012bc:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 80012be:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e051      	b.n	800136c <rf_heart_rate_and_oxygen_saturation+0x48c>
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 80012c8:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 80012cc:	f7ff f8f0 	bl	80004b0 <__aeabi_f2d>
 80012d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8001380 <rf_heart_rate_and_oxygen_saturation+0x4a0>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff fbb5 	bl	8000a44 <__aeabi_dcmplt>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d03a      	beq.n	8001356 <rf_heart_rate_and_oxygen_saturation+0x476>
    *pn_spo2 = (-45.060*xy_ratio + 30.354)*xy_ratio + 94.845;
 80012e0:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 80012e4:	f7ff f8e4 	bl	80004b0 <__aeabi_f2d>
 80012e8:	a327      	add	r3, pc, #156	@ (adr r3, 8001388 <rf_heart_rate_and_oxygen_saturation+0x4a8>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f937 	bl	8000560 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	a325      	add	r3, pc, #148	@ (adr r3, 8001390 <rf_heart_rate_and_oxygen_saturation+0x4b0>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7fe ff78 	bl	80001f4 <__adddf3>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4614      	mov	r4, r2
 800130a:	461d      	mov	r5, r3
 800130c:	f8d7 033c 	ldr.w	r0, [r7, #828]	@ 0x33c
 8001310:	f7ff f8ce 	bl	80004b0 <__aeabi_f2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4620      	mov	r0, r4
 800131a:	4629      	mov	r1, r5
 800131c:	f7ff f920 	bl	8000560 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	a31b      	add	r3, pc, #108	@ (adr r3, 8001398 <rf_heart_rate_and_oxygen_saturation+0x4b8>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7fe ff61 	bl	80001f4 <__adddf3>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc09 	bl	8000b50 <__aeabi_d2f>
 800133e:	4602      	mov	r2, r0
 8001340:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001344:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid = 1;
 800134c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e00a      	b.n	800136c <rf_heart_rate_and_oxygen_saturation+0x48c>
  } else {
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8001356:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800135a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a15      	ldr	r2, [pc, #84]	@ (80013b8 <rf_heart_rate_and_oxygen_saturation+0x4d8>)
 8001362:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8001364:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
  }
}
 800136c:	f507 775a 	add.w	r7, r7, #872	@ 0x368
 8001370:	46bd      	mov	sp, r7
 8001372:	bdb0      	pop	{r4, r5, r7, pc}
 8001374:	f3af 8000 	nop.w
 8001378:	47ae147b 	.word	0x47ae147b
 800137c:	3f947ae1 	.word	0x3f947ae1
 8001380:	d70a3d71 	.word	0xd70a3d71
 8001384:	3ffd70a3 	.word	0x3ffd70a3
 8001388:	147ae148 	.word	0x147ae148
 800138c:	c04687ae 	.word	0xc04687ae
 8001390:	be76c8b4 	.word	0xbe76c8b4
 8001394:	403e5a9f 	.word	0x403e5a9f
 8001398:	7ae147ae 	.word	0x7ae147ae
 800139c:	4057b614 	.word	0x4057b614
 80013a0:	47a2be80 	.word	0x47a2be80
 80013a4:	42460000 	.word	0x42460000
 80013a8:	c2460000 	.word	0xc2460000
 80013ac:	3f4ccccd 	.word	0x3f4ccccd
 80013b0:	20000000 	.word	0x20000000
 80013b4:	fffffc19 	.word	0xfffffc19
 80013b8:	c479c000 	.word	0xc479c000

080013bc <rf_linear_regression_beta>:
*               point index values (0 to BUFFER_SIZE-1). xmean must equal to (BUFFER_SIZE-1)/2! sum_x2 is
*               the sum of squares of the mean-centered index values.
*               Robert Fraczkiewicz, 12/22/2017
* \retval       Beta
*/
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80013c8:	edc7 0a01 	vstr	s1, [r7, #4]
  float x,beta,*pn_ptr;
  beta=0.0;
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 80013d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d6:	eef1 7a67 	vneg.f32	s15, s15
 80013da:	edc7 7a07 	vstr	s15, [r7, #28]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e017      	b.n	8001414 <rf_linear_regression_beta+0x58>
    beta+=x*(*pn_ptr);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	ed93 7a00 	vldr	s14, [r3]
 80013ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	edc7 7a06 	vstr	s15, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 80013fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800140a:	edc7 7a07 	vstr	s15, [r7, #28]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	ed97 7a07 	vldr	s14, [r7, #28]
 8001418:	edd7 7a02 	vldr	s15, [r7, #8]
 800141c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	d9de      	bls.n	80013e4 <rf_linear_regression_beta+0x28>
  return beta/sum_x2;
 8001426:	ed97 7a06 	vldr	s14, [r7, #24]
 800142a:	edd7 7a01 	vldr	s15, [r7, #4]
 800142e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001432:	eef0 7a66 	vmov.f32	s15, s13
}
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	3724      	adds	r7, #36	@ 0x24
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <rf_autocorrelation>:
* \par          Details
*               Compute autocorrelation sequence's n_lag's element for a given series pn_x
*               Robert Fraczkiewicz, 12/21/2017
* \retval       Autocorrelation sum
*/
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  int16_t i, n_temp=n_size-n_lag;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	b29b      	uxth	r3, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	827b      	strh	r3, [r7, #18]
  float sum=0.0,*pn_ptr;
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  if(n_temp<=0) return sum;
 8001464:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001468:	2b00      	cmp	r3, #0
 800146a:	dc02      	bgt.n	8001472 <rf_autocorrelation+0x2e>
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	e02c      	b.n	80014cc <rf_autocorrelation+0x88>
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 8001472:	2300      	movs	r3, #0
 8001474:	83fb      	strh	r3, [r7, #30]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e017      	b.n	80014ac <rf_autocorrelation+0x68>
    sum += (*pn_ptr)*(*(pn_ptr+n_lag));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4413      	add	r3, r2
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001492:	ed97 7a06 	vldr	s14, [r7, #24]
 8001496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149a:	edc7 7a06 	vstr	s15, [r7, #24]
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	3301      	adds	r3, #1
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	83fb      	strh	r3, [r7, #30]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80014b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbe1      	blt.n	800147c <rf_autocorrelation+0x38>
  }
  return sum/n_temp;
 80014b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c4:	edd7 6a06 	vldr	s13, [r7, #24]
 80014c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <rf_initialize_periodicity_search>:
*               of the autocorrelation at lag=0, then the input signal is insufficiently
*               periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 04/25/2020
* \retval       Average distance between peaks
*/
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b08a      	sub	sp, #40	@ 0x28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6178      	str	r0, [r7, #20]
 80014e2:	6139      	str	r1, [r7, #16]
 80014e4:	60fa      	str	r2, [r7, #12]
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ec:	edc7 0a00 	vstr	s1, [r7]
  int32_t n_lag;
  float aut,aut_right;
  // At this point, *p_last_periodicity = LOWEST_PERIOD. Start walking to the right,
  // two steps at a time, until lag ratio fulfills quality criteria or HIGHEST_PERIOD
  // is reached.
  n_lag=*p_last_periodicity;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  aut_right=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 80014f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f8:	6939      	ldr	r1, [r7, #16]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ffa2 	bl	8001444 <rf_autocorrelation>
 8001500:	ed87 0a07 	vstr	s0, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	623b      	str	r3, [r7, #32]
  // Check sanity
  if(aut/aut_lag0 >= min_aut_ratio) {
 8001508:	edd7 6a07 	vldr	s13, [r7, #28]
 800150c:	ed97 7a00 	vldr	s14, [r7]
 8001510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001514:	ed97 7a01 	vldr	s14, [r7, #4]
 8001518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	d82f      	bhi.n	8001582 <rf_initialize_periodicity_search+0xa8>
    // Either quality criterion, min_aut_ratio, is too low, or heart rate is too high.
    // Are we on autocorrelation's downward slope? If yes, continue to a local minimum.
    // If not, continue to the next block.
    do {
      aut=aut_right;
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	61fb      	str	r3, [r7, #28]
      n_lag+=2;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	3302      	adds	r3, #2
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 800152c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff ff87 	bl	8001444 <rf_autocorrelation>
 8001536:	ed87 0a08 	vstr	s0, [r7, #32]
    } while(aut_right/aut_lag0 >= min_aut_ratio && aut_right<aut && n_lag<=n_max_distance);
 800153a:	edd7 6a08 	vldr	s13, [r7, #32]
 800153e:	ed97 7a00 	vldr	s14, [r7]
 8001542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001546:	ed97 7a01 	vldr	s14, [r7, #4]
 800154a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d80c      	bhi.n	800156e <rf_initialize_periodicity_search+0x94>
 8001554:	ed97 7a08 	vldr	s14, [r7, #32]
 8001558:	edd7 7a07 	vldr	s15, [r7, #28]
 800155c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d503      	bpl.n	800156e <rf_initialize_periodicity_search+0x94>
 8001566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	ddd9      	ble.n	8001522 <rf_initialize_periodicity_search+0x48>
    if(n_lag>n_max_distance) {
 800156e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	dd03      	ble.n	800157e <rf_initialize_periodicity_search+0xa4>
      // This should never happen, but if does return failure
      *p_last_periodicity=0;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
      return;
 800157c:	e029      	b.n	80015d2 <rf_initialize_periodicity_search+0xf8>
    }
    aut=aut_right;
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	61fb      	str	r3, [r7, #28]
  }
  // Walk to the right.
  do {
    aut=aut_right;
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	61fb      	str	r3, [r7, #28]
    n_lag+=2;
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	3302      	adds	r3, #2
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
    aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 800158c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158e:	6939      	ldr	r1, [r7, #16]
 8001590:	6978      	ldr	r0, [r7, #20]
 8001592:	f7ff ff57 	bl	8001444 <rf_autocorrelation>
 8001596:	ed87 0a08 	vstr	s0, [r7, #32]
  } while(aut_right/aut_lag0 < min_aut_ratio && n_lag<=n_max_distance);
 800159a:	edd7 6a08 	vldr	s13, [r7, #32]
 800159e:	ed97 7a00 	vldr	s14, [r7]
 80015a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd03      	ble.n	80015bc <rf_initialize_periodicity_search+0xe2>
 80015b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dde2      	ble.n	8001582 <rf_initialize_periodicity_search+0xa8>
  if(n_lag>n_max_distance) {
 80015bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dd03      	ble.n	80015cc <rf_initialize_periodicity_search+0xf2>
    // This should never happen, but if does return failure
    *p_last_periodicity=0;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e002      	b.n	80015d2 <rf_initialize_periodicity_search+0xf8>
  } else
    *p_last_periodicity=n_lag;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	3728      	adds	r7, #40	@ 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <rf_signal_periodicity>:
*               than min_aut_ratio fraction of the autocorrelation at lag=0, then the input
*               signal is insufficiently periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 01/07/2018
* \retval       Average distance between peaks
*/
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6178      	str	r0, [r7, #20]
 80015e0:	6139      	str	r1, [r7, #16]
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ea:	edc7 0a00 	vstr	s1, [r7]
  int32_t n_lag;
  float aut,aut_left,aut_right,aut_save;
  bool left_limit_reached=false;
 80015ee:	2300      	movs	r3, #0
 80015f0:	77fb      	strb	r3, [r7, #31]
  // Start from the last periodicity computing the corresponding autocorrelation
  n_lag=*p_last_periodicity;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  aut_save=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 80015f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015fa:	6939      	ldr	r1, [r7, #16]
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f7ff ff21 	bl	8001444 <rf_autocorrelation>
 8001602:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	61bb      	str	r3, [r7, #24]
  // Is autocorrelation one lag to the left greater?
  aut_left=aut;
 800160a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  do {
    aut=aut_left;
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
    n_lag--;
 8001612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001614:	3b01      	subs	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    aut_left=rf_autocorrelation(pn_x, n_size, n_lag);
 8001618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800161a:	6939      	ldr	r1, [r7, #16]
 800161c:	6978      	ldr	r0, [r7, #20]
 800161e:	f7ff ff11 	bl	8001444 <rf_autocorrelation>
 8001622:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
  } while(aut_left>aut && n_lag>=n_min_distance);
 8001626:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800162a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800162e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	dd03      	ble.n	8001640 <rf_signal_periodicity+0x68>
 8001638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	429a      	cmp	r2, r3
 800163e:	dae6      	bge.n	800160e <rf_signal_periodicity+0x36>
  // Restore lag of the highest aut
  if(n_lag<n_min_distance) {
 8001640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	429a      	cmp	r2, r3
 8001646:	da07      	bge.n	8001658 <rf_signal_periodicity+0x80>
    left_limit_reached=true;
 8001648:	2301      	movs	r3, #1
 800164a:	77fb      	strb	r3, [r7, #31]
    n_lag=*p_last_periodicity;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    aut=aut_save;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001656:	e002      	b.n	800165e <rf_signal_periodicity+0x86>
  } else n_lag++;
 8001658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165a:	3301      	adds	r3, #1
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(n_lag==*p_last_periodicity) {
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001664:	429a      	cmp	r2, r3
 8001666:	d12e      	bne.n	80016c6 <rf_signal_periodicity+0xee>
    // Trip to the left made no progress. Walk to the right.
    aut_right=aut;
 8001668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166a:	623b      	str	r3, [r7, #32]
    do {
      aut=aut_right;
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
      n_lag++;
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	3301      	adds	r3, #1
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8001676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff fee2 	bl	8001444 <rf_autocorrelation>
 8001680:	ed87 0a08 	vstr	s0, [r7, #32]
    } while(aut_right>aut && n_lag<=n_max_distance);
 8001684:	ed97 7a08 	vldr	s14, [r7, #32]
 8001688:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800168c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	dd03      	ble.n	800169e <rf_signal_periodicity+0xc6>
 8001696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800169a:	429a      	cmp	r2, r3
 800169c:	dde6      	ble.n	800166c <rf_signal_periodicity+0x94>
    // Restore lag of the highest aut
    if(n_lag>n_max_distance) n_lag=0; // Indicates failure
 800169e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a2:	429a      	cmp	r2, r3
 80016a4:	dd02      	ble.n	80016ac <rf_signal_periodicity+0xd4>
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016aa:	e002      	b.n	80016b2 <rf_signal_periodicity+0xda>
    else n_lag--;
 80016ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ae:	3b01      	subs	r3, #1
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if(n_lag==*p_last_periodicity && left_limit_reached) n_lag=0; // Indicates failure
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d104      	bne.n	80016c6 <rf_signal_periodicity+0xee>
 80016bc:	7ffb      	ldrb	r3, [r7, #31]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <rf_signal_periodicity+0xee>
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  *ratio=aut/aut_lag0;
 80016c6:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80016ca:	ed97 7a00 	vldr	s14, [r7]
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d4:	edc3 7a00 	vstr	s15, [r3]
  if(*ratio < min_aut_ratio) n_lag=0; // Indicates failure
 80016d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ed97 7a01 	vldr	s14, [r7, #4]
 80016e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	dd01      	ble.n	80016f0 <rf_signal_periodicity+0x118>
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  *p_last_periodicity=n_lag;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f4:	601a      	str	r2, [r3, #0]
}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	@ 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <rf_rms>:
* \par          Details
*               Compute root-mean-square variation for a given series pn_x
*               Robert Fraczkiewicz, 12/25/2017
* \retval       RMS value and raw sum of squares
*/
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b088      	sub	sp, #32
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*pn_ptr;
  (*sumsq)=0.0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 8001712:	2300      	movs	r3, #0
 8001714:	83fb      	strh	r3, [r7, #30]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	e015      	b.n	8001748 <rf_rms+0x4a>
    r=(*pn_ptr);
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	617b      	str	r3, [r7, #20]
    (*sumsq) += r*r;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	edd7 7a05 	vldr	s15, [r7, #20]
 800172c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edc3 7a00 	vstr	s15, [r3]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 800173a:	8bfb      	ldrh	r3, [r7, #30]
 800173c:	3301      	adds	r3, #1
 800173e:	b29b      	uxth	r3, r3
 8001740:	83fb      	strh	r3, [r7, #30]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	3304      	adds	r3, #4
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	429a      	cmp	r2, r3
 8001750:	dce4      	bgt.n	800171c <rf_rms+0x1e>
  }
  (*sumsq)/=n_size; // This corresponds to autocorrelation at lag=0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	edd3 6a00 	vldr	s13, [r3]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edc3 7a00 	vstr	s15, [r3]
  return sqrt(*sumsq);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe9d 	bl	80004b0 <__aeabi_f2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	ec43 2b10 	vmov	d0, r2, r3
 800177e:	f007 fc05 	bl	8008f8c <sqrt>
 8001782:	ec53 2b10 	vmov	r2, r3, d0
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f9e1 	bl	8000b50 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	ee07 3a90 	vmov	s15, r3
}
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <rf_Pcorrelation>:
* \par          Details
*               Compute scalar product between *pn_x and *pn_y vectors
*               Robert Fraczkiewicz, 12/25/2017
* \retval       Correlation product
*/
{
 800179e:	b480      	push	{r7}
 80017a0:	b089      	sub	sp, #36	@ 0x24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*x_ptr,*y_ptr;
  r=0.0;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	83fb      	strh	r3, [r7, #30]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	e017      	b.n	80017ee <rf_Pcorrelation+0x50>
    r+=(*x_ptr)*(*y_ptr);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	ed93 7a00 	vldr	s14, [r3]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80017d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d6:	edc7 7a06 	vstr	s15, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 80017da:	8bfb      	ldrh	r3, [r7, #30]
 80017dc:	3301      	adds	r3, #1
 80017de:	b29b      	uxth	r3, r3
 80017e0:	83fb      	strh	r3, [r7, #30]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3304      	adds	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	3304      	adds	r3, #4
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dce2      	bgt.n	80017be <rf_Pcorrelation+0x20>
  }
  r/=n_size;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001802:	edd7 6a06 	vldr	s13, [r7, #24]
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	edc7 7a06 	vstr	s15, [r7, #24]
  return r;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	ee07 3a90 	vmov	s15, r3
}
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <DebugPrint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DebugPrint(const char *text)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)text, strlen(text), 100U);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7fe fcd3 	bl	80001d8 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	b29a      	uxth	r2, r3
 8001836:	2364      	movs	r3, #100	@ 0x64
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4803      	ldr	r0, [pc, #12]	@ (8001848 <DebugPrint+0x24>)
 800183c:	f006 ffb8 	bl	80087b0 <HAL_UART_Transmit>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000178 	.word	0x20000178

0800184c <SetPwmDutyCycle>:


void SetPwmDutyCycle(uint8_t percent)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	619a      	str	r2, [r3, #24]

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186a:	2360      	movs	r3, #96	@ 0x60
 800186c:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = percent * 5U;
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2208      	movs	r2, #8
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <SetPwmDutyCycle+0x54>)
 800188a:	f006 fa71 	bl	8007d70 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800188e:	2108      	movs	r1, #8
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <SetPwmDutyCycle+0x54>)
 8001892:	f006 f9bd 	bl	8007c10 <HAL_TIM_PWM_Start>
}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000130 	.word	0x20000130

080018a4 <Max30102Setup>:
void Max30102Setup()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  uint8_t uch_dummy;

  maxim_max30102_reset();
 80018aa:	f000 fd37 	bl	800231c <maxim_max30102_reset>
  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_dummy);  // reads/clears the interrupt status register
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	4619      	mov	r1, r3
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 fc76 	bl	80021a4 <maxim_max30102_read_reg>
  maxim_max30102_init();
 80018b8:	f000 fc8e 	bl	80021d8 <maxim_max30102_init>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <Max30102Loop>:
// Takes samples from MAX30102.  Heart rate and SpO2 are calculated every ST seconds
void Max30102Loop()
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b096      	sub	sp, #88	@ 0x58
 80018c8:	af06      	add	r7, sp, #24
  static uint32_t un_prev_data = 0UL;  	// variables to calculate the on-board LED brightness that reflects the heartbeats
  static float f_brightness = 0UL;
  float f_temp;

  // buffer length of BUFFER_SIZE stores ST seconds of samples running at FS sps
  for (i = 0U; i < BUFFER_SIZE; i++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80018d0:	e0bb      	b.n	8001a4a <Max30102Loop+0x186>
  {
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET);	// wait until the interrupt pin asserts
 80018d2:	bf00      	nop
 80018d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d8:	48a7      	ldr	r0, [pc, #668]	@ (8001b78 <Max30102Loop+0x2b4>)
 80018da:	f002 ffb1 	bl	8004840 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d0f7      	beq.n	80018d4 <Max30102Loop+0x10>

#ifdef FAKE_MAX30102_CLONE
    maxim_max30102_read_fifo((aun_ir_buffer + i), (aun_red_buffer + i));  // read from MAX30102 FIFO
 80018e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4aa4      	ldr	r2, [pc, #656]	@ (8001b7c <Max30102Loop+0x2b8>)
 80018ec:	441a      	add	r2, r3
 80018ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	49a2      	ldr	r1, [pc, #648]	@ (8001b80 <Max30102Loop+0x2bc>)
 80018f6:	440b      	add	r3, r1
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f000 fc9c 	bl	8002238 <maxim_max30102_read_fifo>
#else
    maxim_max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));  // read from MAX30102 FIFO
#endif
    // calculate LED brightness
    if (aun_red_buffer[i] > un_prev_data)
 8001900:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001904:	4a9e      	ldr	r2, [pc, #632]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001906:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800190a:	4b9e      	ldr	r3, [pc, #632]	@ (8001b84 <Max30102Loop+0x2c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d93d      	bls.n	800198e <Max30102Loop+0xca>
    {
      f_temp = aun_red_buffer[i] - un_prev_data;
 8001912:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001916:	4a9a      	ldr	r2, [pc, #616]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001918:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800191c:	4b99      	ldr	r3, [pc, #612]	@ (8001b84 <Max30102Loop+0x2c0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      f_temp /= (un_max - un_min);
 800192e:	4b96      	ldr	r3, [pc, #600]	@ (8001b88 <Max30102Loop+0x2c4>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b96      	ldr	r3, [pc, #600]	@ (8001b8c <Max30102Loop+0x2c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001940:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001948:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      f_temp *= MAX_BRIGHTNESS;
 800194c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001950:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001b90 <Max30102Loop+0x2cc>
 8001954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001958:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      f_brightness -= 2.0f * f_temp;
 800195c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b94 <Max30102Loop+0x2d0>)
 800195e:	ed93 7a00 	vldr	s14, [r3]
 8001962:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001966:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800196a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196e:	4b89      	ldr	r3, [pc, #548]	@ (8001b94 <Max30102Loop+0x2d0>)
 8001970:	edc3 7a00 	vstr	s15, [r3]
      if (f_brightness < 0.0f)
 8001974:	4b87      	ldr	r3, [pc, #540]	@ (8001b94 <Max30102Loop+0x2d0>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d542      	bpl.n	8001a0a <Max30102Loop+0x146>
      {
        f_brightness = 0.0f;
 8001984:	4b83      	ldr	r3, [pc, #524]	@ (8001b94 <Max30102Loop+0x2d0>)
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e03d      	b.n	8001a0a <Max30102Loop+0x146>
         }
       }
       else
	    {
		  f_temp = un_prev_data - aun_red_buffer[i];
 800198e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b84 <Max30102Loop+0x2c0>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001996:	497a      	ldr	r1, [pc, #488]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		  f_temp /= (un_max - un_min);
 80019aa:	4b77      	ldr	r3, [pc, #476]	@ (8001b88 <Max30102Loop+0x2c4>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b77      	ldr	r3, [pc, #476]	@ (8001b8c <Max30102Loop+0x2c8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019bc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80019c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		  f_temp *= MAX_BRIGHTNESS;
 80019c8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80019cc:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001b90 <Max30102Loop+0x2cc>
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		  f_brightness += 2.0f * f_temp;
 80019d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80019dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b94 <Max30102Loop+0x2d0>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001b94 <Max30102Loop+0x2d0>)
 80019ec:	edc3 7a00 	vstr	s15, [r3]
		  if (f_brightness > (float)MAX_BRIGHTNESS)
 80019f0:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <Max30102Loop+0x2d0>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001b90 <Max30102Loop+0x2cc>
 80019fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	dd02      	ble.n	8001a0a <Max30102Loop+0x146>
		  {
			f_brightness = (float)MAX_BRIGHTNESS;
 8001a04:	4b63      	ldr	r3, [pc, #396]	@ (8001b94 <Max30102Loop+0x2d0>)
 8001a06:	4a64      	ldr	r2, [pc, #400]	@ (8001b98 <Max30102Loop+0x2d4>)
 8001a08:	601a      	str	r2, [r3, #0]
		  }
	    }

	    SetPwmDutyCycle((uint8_t)(f_brightness * 100.0f / 256.0f));
 8001a0a:	4b62      	ldr	r3, [pc, #392]	@ (8001b94 <Max30102Loop+0x2d0>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001b9c <Max30102Loop+0x2d8>
 8001a14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a18:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8001ba0 <Max30102Loop+0x2dc>
 8001a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a24:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a28:	793b      	ldrb	r3, [r7, #4]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff0d 	bl	800184c <SetPwmDutyCycle>
	    un_prev_data = aun_red_buffer[i];
 8001a32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a36:	4a52      	ldr	r2, [pc, #328]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	4a51      	ldr	r2, [pc, #324]	@ (8001b84 <Max30102Loop+0x2c0>)
 8001a3e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 8001a40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a44:	3301      	adds	r3, #1
 8001a46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a4e:	2b63      	cmp	r3, #99	@ 0x63
 8001a50:	f67f af3f 	bls.w	80018d2 <Max30102Loop+0xe>
	  }

	  un_min = 0x3FFFFUL;
 8001a54:	4b4d      	ldr	r3, [pc, #308]	@ (8001b8c <Max30102Loop+0x2c8>)
 8001a56:	4a53      	ldr	r2, [pc, #332]	@ (8001ba4 <Max30102Loop+0x2e0>)
 8001a58:	601a      	str	r2, [r3, #0]
	  un_max = 0UL;
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b88 <Max30102Loop+0x2c4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
	  for (i = 0U; i < BUFFER_SIZE; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001a66:	e024      	b.n	8001ab2 <Max30102Loop+0x1ee>
	  {
	    if (un_min > aun_red_buffer[i])
 8001a68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a6c:	4a44      	ldr	r2, [pc, #272]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001a6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a72:	4b46      	ldr	r3, [pc, #280]	@ (8001b8c <Max30102Loop+0x2c8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d206      	bcs.n	8001a88 <Max30102Loop+0x1c4>
	    {
	      un_min = aun_red_buffer[i];    //update signal min for next cycle using values from this cycle
 8001a7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a7e:	4a40      	ldr	r2, [pc, #256]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	4a41      	ldr	r2, [pc, #260]	@ (8001b8c <Max30102Loop+0x2c8>)
 8001a86:	6013      	str	r3, [r2, #0]
	    }
	    if (un_max < aun_red_buffer[i])
 8001a88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a92:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <Max30102Loop+0x2c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d906      	bls.n	8001aa8 <Max30102Loop+0x1e4>
	    {
	      un_max = aun_red_buffer[i];    //update signal max for next cycle using values from this cycle
 8001a9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a9e:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa4:	4a38      	ldr	r2, [pc, #224]	@ (8001b88 <Max30102Loop+0x2c4>)
 8001aa6:	6013      	str	r3, [r2, #0]
	  for (i = 0U; i < BUFFER_SIZE; i++)
 8001aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001aac:	3301      	adds	r3, #1
 8001aae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ab6:	2b63      	cmp	r3, #99	@ 0x63
 8001ab8:	d9d6      	bls.n	8001a68 <Max30102Loop+0x1a4>
	    }
	  }

    // calculate heart rate and SpO2 after BUFFER_SIZE samples (ST seconds of samples) using Robert's method
    rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer, &n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);
 8001aba:	f107 0220 	add.w	r2, r7, #32
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	9304      	str	r3, [sp, #16]
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	9303      	str	r3, [sp, #12]
 8001aca:	f107 030f 	add.w	r3, r7, #15
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	f107 0317 	add.w	r3, r7, #23
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4613      	mov	r3, r2
 8001ade:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001ae0:	2164      	movs	r1, #100	@ 0x64
 8001ae2:	4826      	ldr	r0, [pc, #152]	@ (8001b7c <Max30102Loop+0x2b8>)
 8001ae4:	f7ff f9fc 	bl	8000ee0 <rf_heart_rate_and_oxygen_saturation>

    // display results
    rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer, &n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);
 8001ae8:	f107 0220 	add.w	r2, r7, #32
 8001aec:	f107 0318 	add.w	r3, r7, #24
 8001af0:	9304      	str	r3, [sp, #16]
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	9303      	str	r3, [sp, #12]
 8001af8:	f107 030f 	add.w	r3, r7, #15
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	f107 0317 	add.w	r3, r7, #23
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <Max30102Loop+0x2bc>)
 8001b0e:	2164      	movs	r1, #100	@ 0x64
 8001b10:	481a      	ldr	r0, [pc, #104]	@ (8001b7c <Max30102Loop+0x2b8>)
 8001b12:	f7ff f9e5 	bl	8000ee0 <rf_heart_rate_and_oxygen_saturation>

      // display results
      if (ch_hr_valid && ch_spo2_valid)
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d023      	beq.n	8001b66 <Max30102Loop+0x2a2>
 8001b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01f      	beq.n	8001b66 <Max30102Loop+0x2a2>
      {
        MY_SNPRINTF(buf, (size_t)20, "%3.1f\t", n_spo2);
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcc1 	bl	80004b0 <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001b36:	e9cd 2300 	strd	r2, r3, [sp]
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba8 <Max30102Loop+0x2e4>)
 8001b3c:	2114      	movs	r1, #20
 8001b3e:	f001 fc1d 	bl	800337c <snprintf_>
        DebugPrint(buf);
 8001b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fe6c 	bl	8001824 <DebugPrint>
        snprintf(buf, (size_t)20, "%d\r\n", n_heart_rate);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001b52:	4a16      	ldr	r2, [pc, #88]	@ (8001bac <Max30102Loop+0x2e8>)
 8001b54:	2114      	movs	r1, #20
 8001b56:	f001 fc11 	bl	800337c <snprintf_>
        DebugPrint(buf);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fe60 	bl	8001824 <DebugPrint>
 8001b64:	e003      	b.n	8001b6e <Max30102Loop+0x2aa>
      }
      else
      {
        DebugPrint("Not valid. Are you still alive?\r\n");
 8001b66:	4812      	ldr	r0, [pc, #72]	@ (8001bb0 <Max30102Loop+0x2ec>)
 8001b68:	f7ff fe5c 	bl	8001824 <DebugPrint>
      }
    }
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3740      	adds	r7, #64	@ 0x40
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	200001c0 	.word	0x200001c0
 8001b80:	20000350 	.word	0x20000350
 8001b84:	200004e0 	.word	0x200004e0
 8001b88:	200004e4 	.word	0x200004e4
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	437f0000 	.word	0x437f0000
 8001b94:	200004e8 	.word	0x200004e8
 8001b98:	437f0000 	.word	0x437f0000
 8001b9c:	42c80000 	.word	0x42c80000
 8001ba0:	43800000 	.word	0x43800000
 8001ba4:	0003ffff 	.word	0x0003ffff
 8001ba8:	080091b0 	.word	0x080091b0
 8001bac:	080091b8 	.word	0x080091b8
 8001bb0:	080091c0 	.word	0x080091c0

08001bb4 <ADC_Select_CH0>:
void ADC_Select_CH0(void){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4806      	ldr	r0, [pc, #24]	@ (8001bf0 <ADC_Select_CH0+0x3c>)
 8001bd8:	f002 f934 	bl	8003e44 <HAL_ADC_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8001be2:	f000 fabb 	bl	800215c <Error_Handler>
	  }


}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000094 	.word	0x20000094

08001bf4 <ADC_Select_CH1>:
void ADC_Select_CH1(void){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
	 sConfig.Channel = ADC_CHANNEL_1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c12:	463b      	mov	r3, r7
 8001c14:	4619      	mov	r1, r3
 8001c16:	4806      	ldr	r0, [pc, #24]	@ (8001c30 <ADC_Select_CH1+0x3c>)
 8001c18:	f002 f914 	bl	8003e44 <HAL_ADC_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 8001c22:	f000 fa9b 	bl	800215c <Error_Handler>
	  }


}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000094 	.word	0x20000094

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3a:	f001 fd7b 	bl	8003734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3e:	f000 f855 	bl	8001cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c42:	f000 f9c1 	bl	8001fc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c46:	f000 f919 	bl	8001e7c <MX_I2C1_Init>
  MX_TIM4_Init();
 8001c4a:	f000 f945 	bl	8001ed8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001c4e:	f000 f8b5 	bl	8001dbc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001c52:	f000 f98f 	bl	8001f74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c56:	2108      	movs	r1, #8
 8001c58:	481f      	ldr	r0, [pc, #124]	@ (8001cd8 <main+0xa4>)
 8001c5a:	f005 ffd9 	bl	8007c10 <HAL_TIM_PWM_Start>
   Max30102Setup();
 8001c5e:	f7ff fe21 	bl	80018a4 <Max30102Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

Max30102Loop();
 8001c62:	f7ff fe2f 	bl	80018c4 <Max30102Loop>

	  ADC_Select_CH1();
 8001c66:	f7ff ffc5 	bl	8001bf4 <ADC_Select_CH1>
	  	 	  	      	  	         HAL_ADC_Start(&hadc1);
 8001c6a:	481c      	ldr	r0, [pc, #112]	@ (8001cdc <main+0xa8>)
 8001c6c:	f001 fe3c 	bl	80038e8 <HAL_ADC_Start>
	  	 	  	      	  	      	   	HAL_ADC_PollForConversion(&hadc1, 100);
 8001c70:	2164      	movs	r1, #100	@ 0x64
 8001c72:	481a      	ldr	r0, [pc, #104]	@ (8001cdc <main+0xa8>)
 8001c74:	f001 ff1f 	bl	8003ab6 <HAL_ADC_PollForConversion>

	  	 	  	      	  	      	   	adc_val[2]= HAL_ADC_GetValue(&hadc1);
 8001c78:	4818      	ldr	r0, [pc, #96]	@ (8001cdc <main+0xa8>)
 8001c7a:	f002 f8b7 	bl	8003dec <HAL_ADC_GetValue>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	813b      	strh	r3, [r7, #8]
	  	 	  	      	  	      	   	HAL_ADC_Stop(&hadc1);
 8001c84:	4815      	ldr	r0, [pc, #84]	@ (8001cdc <main+0xa8>)
 8001c86:	f001 fee3 	bl	8003a50 <HAL_ADC_Stop>
	  	 	  	      	  	      	HAL_UART_Transmit(&huart2, "GLUCOSE: ", 9, 10);
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	2209      	movs	r2, #9
 8001c8e:	4914      	ldr	r1, [pc, #80]	@ (8001ce0 <main+0xac>)
 8001c90:	4814      	ldr	r0, [pc, #80]	@ (8001ce4 <main+0xb0>)
 8001c92:	f006 fd8d 	bl	80087b0 <HAL_UART_Transmit>
	  	 	  	      	  	      	   print_char(adc_val[2]);
 8001c96:	893b      	ldrh	r3, [r7, #8]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fa11 	bl	80020c0 <print_char>
	  	 	  	      	   	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ca2:	4811      	ldr	r0, [pc, #68]	@ (8001ce8 <main+0xb4>)
 8001ca4:	f002 fde4 	bl	8004870 <HAL_GPIO_TogglePin>
	  	 	  	      	ADC_Select_CH0();
 8001ca8:	f7ff ff84 	bl	8001bb4 <ADC_Select_CH0>
	  	 	  	      		         HAL_ADC_Start(&hadc1);
 8001cac:	480b      	ldr	r0, [pc, #44]	@ (8001cdc <main+0xa8>)
 8001cae:	f001 fe1b 	bl	80038e8 <HAL_ADC_Start>
	  	 	  	      		      	   	HAL_ADC_PollForConversion(&hadc1, 100);
 8001cb2:	2164      	movs	r1, #100	@ 0x64
 8001cb4:	4809      	ldr	r0, [pc, #36]	@ (8001cdc <main+0xa8>)
 8001cb6:	f001 fefe 	bl	8003ab6 <HAL_ADC_PollForConversion>

	  	 	  	      		      	   	adc_val[1]= HAL_ADC_GetValue(&hadc1);
 8001cba:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <main+0xa8>)
 8001cbc:	f002 f896 	bl	8003dec <HAL_ADC_GetValue>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	80fb      	strh	r3, [r7, #6]
	  	 	  	      		      	   	HAL_ADC_Stop(&hadc1);
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <main+0xa8>)
 8001cc8:	f001 fec2 	bl	8003a50 <HAL_ADC_Stop>
	  	 	  	      		      	   	temp_conv(adc_val[1]);
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f9c6 	bl	8002060 <temp_conv>
  {
 8001cd4:	bf00      	nop
 8001cd6:	e7c4      	b.n	8001c62 <main+0x2e>
 8001cd8:	20000130 	.word	0x20000130
 8001cdc:	20000094 	.word	0x20000094
 8001ce0:	080091e4 	.word	0x080091e4
 8001ce4:	20000178 	.word	0x20000178
 8001ce8:	40020800 	.word	0x40020800

08001cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b094      	sub	sp, #80	@ 0x50
 8001cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf2:	f107 0320 	add.w	r3, r7, #32
 8001cf6:	2230      	movs	r2, #48	@ 0x30
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f007 f914 	bl	8008f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <SystemClock_Config+0xc8>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	4a26      	ldr	r2, [pc, #152]	@ (8001db4 <SystemClock_Config+0xc8>)
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d20:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <SystemClock_Config+0xc8>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <SystemClock_Config+0xcc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a20      	ldr	r2, [pc, #128]	@ (8001db8 <SystemClock_Config+0xcc>)
 8001d36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <SystemClock_Config+0xcc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d52:	2302      	movs	r3, #2
 8001d54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d60:	2360      	movs	r3, #96	@ 0x60
 8001d62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	4618      	mov	r0, r3
 8001d72:	f005 faa5 	bl	80072c0 <HAL_RCC_OscConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d7c:	f000 f9ee 	bl	800215c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d80:	230f      	movs	r3, #15
 8001d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d84:	2302      	movs	r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	2103      	movs	r1, #3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f005 fd07 	bl	80077b0 <HAL_RCC_ClockConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001da8:	f000 f9d8 	bl	800215c <Error_Handler>
  }
}
 8001dac:	bf00      	nop
 8001dae:	3750      	adds	r7, #80	@ 0x50
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40007000 	.word	0x40007000

08001dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dce:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001dd0:	4a28      	ldr	r2, [pc, #160]	@ (8001e74 <MX_ADC1_Init+0xb8>)
 8001dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001dd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001de8:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <MX_ADC1_Init+0xbc>)
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e1c:	4814      	ldr	r0, [pc, #80]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001e1e:	f001 fd1f 	bl	8003860 <HAL_ADC_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e28:	f000 f998 	bl	800215c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e38:	463b      	mov	r3, r7
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001e3e:	f002 f801 	bl	8003e44 <HAL_ADC_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e48:	f000 f988 	bl	800215c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e50:	2302      	movs	r3, #2
 8001e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e54:	463b      	mov	r3, r7
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_ADC1_Init+0xb4>)
 8001e5a:	f001 fff3 	bl	8003e44 <HAL_ADC_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001e64:	f000 f97a 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000094 	.word	0x20000094
 8001e74:	40012000 	.word	0x40012000
 8001e78:	0f000001 	.word	0x0f000001

08001e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001e82:	4a13      	ldr	r2, [pc, #76]	@ (8001ed0 <MX_I2C1_Init+0x54>)
 8001e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001e88:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <MX_I2C1_Init+0x58>)
 8001e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001e9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eac:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eb8:	4804      	ldr	r0, [pc, #16]	@ (8001ecc <MX_I2C1_Init+0x50>)
 8001eba:	f002 fcf3 	bl	80048a4 <HAL_I2C_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ec4:	f000 f94a 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200000dc 	.word	0x200000dc
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	000186a0 	.word	0x000186a0

08001ed8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	463b      	mov	r3, r7
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <MX_TIM4_Init+0x98>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f1a:	4814      	ldr	r0, [pc, #80]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001f1c:	f005 fe28 	bl	8007b70 <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001f26:	f000 f919 	bl	800215c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4619      	mov	r1, r3
 8001f36:	480d      	ldr	r0, [pc, #52]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001f38:	f005 ffdc 	bl	8007ef4 <HAL_TIM_ConfigClockSource>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001f42:	f000 f90b 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <MX_TIM4_Init+0x94>)
 8001f54:	f006 fb6e 	bl	8008634 <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001f5e:	f000 f8fd 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000130 	.word	0x20000130
 8001f70:	40000800 	.word	0x40000800

08001f74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <MX_USART2_UART_Init+0x50>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001fac:	f006 fbb0 	bl	8008710 <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fb6:	f000 f8d1 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000178 	.word	0x20000178
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <MX_GPIO_Init+0x90>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <MX_GPIO_Init+0x90>)
 8001fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_GPIO_Init+0x90>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <MX_GPIO_Init+0x90>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a15      	ldr	r2, [pc, #84]	@ (8002058 <MX_GPIO_Init+0x90>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <MX_GPIO_Init+0x90>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_GPIO_Init+0x90>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a0e      	ldr	r2, [pc, #56]	@ (8002058 <MX_GPIO_Init+0x90>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_GPIO_Init+0x90>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002038:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800203c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	4804      	ldr	r0, [pc, #16]	@ (800205c <MX_GPIO_Init+0x94>)
 800204a:	f002 fa75 	bl	8004538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800204e:	bf00      	nop
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40020400 	.word	0x40020400

08002060 <temp_conv>:

/* USER CODE BEGIN 4 */
void temp_conv(uint16_t tempvar)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
	uint32_t var=0;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
	var=(tempvar*8.05);
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa0b 	bl	800048c <__aeabi_i2d>
 8002076:	a310      	add	r3, pc, #64	@ (adr r3, 80020b8 <temp_conv+0x58>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fa70 	bl	8000560 <__aeabi_dmul>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fd42 	bl	8000b10 <__aeabi_d2uiz>
 800208c:	4603      	mov	r3, r0
 800208e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, "temp: ", 6, 10);
 8002090:	230a      	movs	r3, #10
 8002092:	2206      	movs	r2, #6
 8002094:	4906      	ldr	r1, [pc, #24]	@ (80020b0 <temp_conv+0x50>)
 8002096:	4807      	ldr	r0, [pc, #28]	@ (80020b4 <temp_conv+0x54>)
 8002098:	f006 fb8a 	bl	80087b0 <HAL_UART_Transmit>
	print_char(var);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f80f 	bl	80020c0 <print_char>

}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w
 80020b0:	080091f0 	.word	0x080091f0
 80020b4:	20000178 	.word	0x20000178
 80020b8:	9999999a 	.word	0x9999999a
 80020bc:	40201999 	.word	0x40201999

080020c0 <print_char>:
void print_char(uint32_t num_var) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    uint8_t char_num_var[] = "0000000\r\n"; // Initialize as string
 80020c8:	4a21      	ldr	r2, [pc, #132]	@ (8002150 <print_char+0x90>)
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80020d0:	c303      	stmia	r3!, {r0, r1}
 80020d2:	801a      	strh	r2, [r3, #0]
    uint8_t i = 6; // Index of least significant digit in char_num_var
 80020d4:	2306      	movs	r3, #6
 80020d6:	75fb      	strb	r3, [r7, #23]

    // Convert digits of num_var to ASCII characters
    do {
        i--; // Decrement index
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	3b01      	subs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
        if (i == 3) {
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d108      	bne.n	80020f6 <print_char+0x36>
            char_num_var[i] = '.'; // Insert '.' at index 3
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	3318      	adds	r3, #24
 80020e8:	443b      	add	r3, r7
 80020ea:	222e      	movs	r2, #46	@ 0x2e
 80020ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
            i--; // Decrement index
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
        }
        char_num_var[i] = (num_var % 10) + '0'; // Convert digit to ASCII and store
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <print_char+0x94>)
 80020fa:	fba3 2301 	umull	r2, r3, r3, r1
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	1aca      	subs	r2, r1, r3
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	3230      	adds	r2, #48	@ 0x30
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	3318      	adds	r3, #24
 8002114:	443b      	add	r3, r7
 8002116:	f803 2c0c 	strb.w	r2, [r3, #-12]
        num_var /= 10; // Remove least significant digit
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a0d      	ldr	r2, [pc, #52]	@ (8002154 <print_char+0x94>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	607b      	str	r3, [r7, #4]
    } while (num_var != 0 && i > 0); // Continue until num_var is 0 or array is full
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <print_char+0x72>
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1d2      	bne.n	80020d8 <print_char+0x18>

    // Transmit the string via UART
    HAL_UART_Transmit(&huart2, char_num_var, 8, 15);
 8002132:	f107 010c 	add.w	r1, r7, #12
 8002136:	230f      	movs	r3, #15
 8002138:	2208      	movs	r2, #8
 800213a:	4807      	ldr	r0, [pc, #28]	@ (8002158 <print_char+0x98>)
 800213c:	f006 fb38 	bl	80087b0 <HAL_UART_Transmit>
    HAL_Delay(1);
 8002140:	2001      	movs	r0, #1
 8002142:	f001 fb69 	bl	8003818 <HAL_Delay>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	080091f8 	.word	0x080091f8
 8002154:	cccccccd 	.word	0xcccccccd
 8002158:	20000178 	.word	0x20000178

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <maxim_max30102_write_reg>:
*
* \param[in]    uch_addr    - register address
* \param[in]    uch_data    - register data
*/
void maxim_max30102_write_reg(uint8_t uch_addr, uint8_t uch_data)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af04      	add	r7, sp, #16
 8002172:	4603      	mov	r3, r0
 8002174:	460a      	mov	r2, r1
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	4613      	mov	r3, r2
 800217a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, I2C_WRITE_ADDR, uch_addr, 1U, &uch_data, 1U, 100U);
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2364      	movs	r3, #100	@ 0x64
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	2301      	movs	r3, #1
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	1dbb      	adds	r3, r7, #6
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2301      	movs	r3, #1
 800218e:	21ae      	movs	r1, #174	@ 0xae
 8002190:	4803      	ldr	r0, [pc, #12]	@ (80021a0 <maxim_max30102_write_reg+0x34>)
 8002192:	f002 fce1 	bl	8004b58 <HAL_I2C_Mem_Write>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200000dc 	.word	0x200000dc

080021a4 <maxim_max30102_read_reg>:
*
* \param[in]    uch_addr    - register address
* \param[out]   puch_data    - pointer that stores the register data
*/
void maxim_max30102_read_reg(uint8_t uch_addr, uint8_t *puch_data)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af04      	add	r7, sp, #16
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, uch_addr, 1U, puch_data, 1U, 250U);
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	23fa      	movs	r3, #250	@ 0xfa
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	2301      	movs	r3, #1
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2301      	movs	r3, #1
 80021c2:	21af      	movs	r1, #175	@ 0xaf
 80021c4:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <maxim_max30102_read_reg+0x30>)
 80021c6:	f002 fdc1 	bl	8004d4c <HAL_I2C_Mem_Read>

}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200000dc 	.word	0x200000dc

080021d8 <maxim_max30102_init>:
* \par          Details
*               This function initializes the MAX30102
*
* \param        None
*/
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_INTR_ENABLE_1, 0xc0U); 	// INTR setting
 80021dc:	21c0      	movs	r1, #192	@ 0xc0
 80021de:	2002      	movs	r0, #2
 80021e0:	f7ff ffc4 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_INTR_ENABLE_2, 0x00U);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2003      	movs	r0, #3
 80021e8:	f7ff ffc0 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_WR_PTR, 0x00U);  		//FIFO_WR_PTR[4:0]
 80021ec:	2100      	movs	r1, #0
 80021ee:	2004      	movs	r0, #4
 80021f0:	f7ff ffbc 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_OVF_COUNTER, 0x00U);  		//OVF_COUNTER[4:0]
 80021f4:	2100      	movs	r1, #0
 80021f6:	2005      	movs	r0, #5
 80021f8:	f7ff ffb8 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_RD_PTR, 0x00U);  		//FIFO_RD_PTR[4:0]
 80021fc:	2100      	movs	r1, #0
 80021fe:	2006      	movs	r0, #6
 8002200:	f7ff ffb4 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_CONFIG, 0x4fU);  		//sample avg = 4, fifo rollover=false, fifo almost full = 17
 8002204:	214f      	movs	r1, #79	@ 0x4f
 8002206:	2008      	movs	r0, #8
 8002208:	f7ff ffb0 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x03U);   	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 800220c:	2103      	movs	r1, #3
 800220e:	2009      	movs	r0, #9
 8002210:	f7ff ffac 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_SPO2_CONFIG, 0x27U);  		// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (411uS)
 8002214:	2127      	movs	r1, #39	@ 0x27
 8002216:	200a      	movs	r0, #10
 8002218:	f7ff ffa8 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED1_PA, 0x24U);   		//Choose value for ~ 7mA for LED1
 800221c:	2124      	movs	r1, #36	@ 0x24
 800221e:	200c      	movs	r0, #12
 8002220:	f7ff ffa4 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED2_PA, 0x24U);   		// Choose value for ~ 7mA for LED2
 8002224:	2124      	movs	r1, #36	@ 0x24
 8002226:	200d      	movs	r0, #13
 8002228:	f7ff ffa0 	bl	800216c <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_PILOT_PA, 0x7fU);   		// Choose value for ~ 25mA for Pilot LED
 800222c:	217f      	movs	r1, #127	@ 0x7f
 800222e:	2010      	movs	r0, #16
 8002230:	f7ff ff9c 	bl	800216c <maxim_max30102_write_reg>
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <maxim_max30102_read_fifo>:
*
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*/
void maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af04      	add	r7, sp, #16
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t un_temp;
  uint8_t uch_temp;
  uint8_t uch_i2c_data[6];

  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
 8002242:	f107 0313 	add.w	r3, r7, #19
 8002246:	4619      	mov	r1, r3
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff ffab 	bl	80021a4 <maxim_max30102_read_reg>
  maxim_max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);
 800224e:	f107 0313 	add.w	r3, r7, #19
 8002252:	4619      	mov	r1, r3
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff ffa5 	bl	80021a4 <maxim_max30102_read_reg>

  HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, REG_FIFO_DATA, 1U, uch_i2c_data, 6U, 250U);
 800225a:	23fa      	movs	r3, #250	@ 0xfa
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2306      	movs	r3, #6
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2301      	movs	r3, #1
 800226a:	2207      	movs	r2, #7
 800226c:	21af      	movs	r1, #175	@ 0xaf
 800226e:	482a      	ldr	r0, [pc, #168]	@ (8002318 <maxim_max30102_read_fifo+0xe0>)
 8002270:	f002 fd6c 	bl	8004d4c <HAL_I2C_Mem_Read>

  *pun_ir_led = 0UL;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
  *pun_red_led = 0UL;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

  un_temp = (uint32_t)uch_i2c_data[0];
 8002280:	7b3b      	ldrb	r3, [r7, #12]
 8002282:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[1];
 8002296:	7b7b      	ldrb	r3, [r7, #13]
 8002298:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	441a      	add	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[2];
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	441a      	add	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[3];
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	441a      	add	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[4];
 80022d2:	7c3b      	ldrb	r3, [r7, #16]
 80022d4:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	441a      	add	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[5];
 80022e8:	7c7b      	ldrb	r3, [r7, #17]
 80022ea:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	441a      	add	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	601a      	str	r2, [r3, #0]
  *pun_red_led &= 0x03FFFF;  	// Mask MSB [23:18]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
  *pun_ir_led &= 0x03FFFF;  	// Mask MSB [23:18]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	601a      	str	r2, [r3, #0]

}
 8002310:	bf00      	nop
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200000dc 	.word	0x200000dc

0800231c <maxim_max30102_reset>:
*               This function resets the MAX30102
*
* \param        None
*/
void maxim_max30102_reset()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x40U);
 8002320:	2140      	movs	r1, #64	@ 0x40
 8002322:	2009      	movs	r0, #9
 8002324:	f7ff ff22 	bl	800216c <maxim_max30102_write_reg>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d204      	bcs.n	800234e <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	701a      	strb	r2, [r3, #0]
  }
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e002      	b.n	800238c <_strnlen_s+0x16>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <_strnlen_s+0x28>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	603a      	str	r2, [r7, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f3      	bne.n	8002386 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1ad3      	subs	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80023be:	d904      	bls.n	80023ca <_is_digit+0x1a>
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b39      	cmp	r3, #57	@ 0x39
 80023c4:	d801      	bhi.n	80023ca <_is_digit+0x1a>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <_is_digit+0x1c>
 80023ca:	2300      	movs	r3, #0
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80023ea:	e00e      	b.n	800240a <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1c59      	adds	r1, r3, #1
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6011      	str	r1, [r2, #0]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4403      	add	r3, r0
 8002406:	3b30      	subs	r3, #48	@ 0x30
 8002408:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ffcd 	bl	80023b0 <_is_digit>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e7      	bne.n	80023ec <_atoi+0xe>
  }
  return i;
 800241c:	68fb      	ldr	r3, [r7, #12]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002426:	b590      	push	{r4, r7, lr}
 8002428:	b087      	sub	sp, #28
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d125      	bne.n	800248e <_out_rev+0x68>
 8002442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d120      	bne.n	800248e <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800244c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e00a      	b.n	8002468 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	1c53      	adds	r3, r2, #1
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	68fc      	ldr	r4, [r7, #12]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	2020      	movs	r0, #32
 8002460:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	429a      	cmp	r2, r3
 800246e:	d3f0      	bcc.n	8002452 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002470:	e00d      	b.n	800248e <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002474:	3b01      	subs	r3, #1
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247c:	4413      	add	r3, r2
 800247e:	7818      	ldrb	r0, [r3, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	1c53      	adds	r3, r2, #1
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	68fc      	ldr	r4, [r7, #12]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	47a0      	blx	r4
  while (len) {
 800248e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ee      	bne.n	8002472 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00e      	beq.n	80024bc <_out_rev+0x96>
    while (idx - start_idx < width) {
 800249e:	e007      	b.n	80024b0 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	1c53      	adds	r3, r2, #1
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	68fc      	ldr	r4, [r7, #12]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	2020      	movs	r0, #32
 80024ae:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f1      	bhi.n	80024a0 <_out_rev+0x7a>
    }
  }

  return idx;
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}

080024c6 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b088      	sub	sp, #32
 80024ca:	af04      	add	r7, sp, #16
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80024d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d136      	bne.n	800254c <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d018      	beq.n	8002516 <_ntoa_format+0x50>
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d013      	beq.n	8002516 <_ntoa_format+0x50>
 80024ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d104      	bne.n	8002500 <_ntoa_format+0x3a>
 80024f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <_ntoa_format+0x50>
      width--;
 8002500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002502:	3b01      	subs	r3, #1
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002506:	e006      	b.n	8002516 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	61fa      	str	r2, [r7, #28]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	2230      	movs	r2, #48	@ 0x30
 8002514:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251a:	429a      	cmp	r2, r3
 800251c:	d20a      	bcs.n	8002534 <_ntoa_format+0x6e>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b1f      	cmp	r3, #31
 8002522:	d9f1      	bls.n	8002508 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002524:	e006      	b.n	8002534 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	61fa      	str	r2, [r7, #28]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4413      	add	r3, r2
 8002530:	2230      	movs	r2, #48	@ 0x30
 8002532:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <_ntoa_format+0x86>
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002542:	429a      	cmp	r2, r3
 8002544:	d202      	bcs.n	800254c <_ntoa_format+0x86>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b1f      	cmp	r3, #31
 800254a:	d9ec      	bls.n	8002526 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d058      	beq.n	8002608 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d116      	bne.n	800258e <_ntoa_format+0xc8>
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d013      	beq.n	800258e <_ntoa_format+0xc8>
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256a:	429a      	cmp	r2, r3
 800256c:	d003      	beq.n	8002576 <_ntoa_format+0xb0>
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002572:	429a      	cmp	r2, r3
 8002574:	d10b      	bne.n	800258e <_ntoa_format+0xc8>
      len--;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b01      	subs	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <_ntoa_format+0xc8>
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	2b10      	cmp	r3, #16
 8002586:	d102      	bne.n	800258e <_ntoa_format+0xc8>
        len--;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3b01      	subs	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	2b10      	cmp	r3, #16
 8002592:	d10f      	bne.n	80025b4 <_ntoa_format+0xee>
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <_ntoa_format+0xee>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b1f      	cmp	r3, #31
 80025a2:	d807      	bhi.n	80025b4 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	61fa      	str	r2, [r7, #28]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	2278      	movs	r2, #120	@ 0x78
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e01f      	b.n	80025f4 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d10f      	bne.n	80025da <_ntoa_format+0x114>
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <_ntoa_format+0x114>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b1f      	cmp	r3, #31
 80025c8:	d807      	bhi.n	80025da <_ntoa_format+0x114>
      buf[len++] = 'X';
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	61fa      	str	r2, [r7, #28]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4413      	add	r3, r2
 80025d4:	2258      	movs	r2, #88	@ 0x58
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e00c      	b.n	80025f4 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d109      	bne.n	80025f4 <_ntoa_format+0x12e>
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b1f      	cmp	r3, #31
 80025e4:	d806      	bhi.n	80025f4 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	61fa      	str	r2, [r7, #28]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	2262      	movs	r2, #98	@ 0x62
 80025f2:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b1f      	cmp	r3, #31
 80025f8:	d806      	bhi.n	8002608 <_ntoa_format+0x142>
      buf[len++] = '0';
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	61fa      	str	r2, [r7, #28]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4413      	add	r3, r2
 8002604:	2230      	movs	r2, #48	@ 0x30
 8002606:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b1f      	cmp	r3, #31
 800260c:	d824      	bhi.n	8002658 <_ntoa_format+0x192>
    if (negative) {
 800260e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	61fa      	str	r2, [r7, #28]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4413      	add	r3, r2
 8002620:	222d      	movs	r2, #45	@ 0x2d
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e018      	b.n	8002658 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	61fa      	str	r2, [r7, #28]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4413      	add	r3, r2
 800263a:	222b      	movs	r2, #43	@ 0x2b
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e00b      	b.n	8002658 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <_ntoa_format+0x192>
      buf[len++] = ' ';
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	61fa      	str	r2, [r7, #28]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	2220      	movs	r2, #32
 8002656:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265a:	9303      	str	r3, [sp, #12]
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	9302      	str	r3, [sp, #8]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7ff fed9 	bl	8002426 <_out_rev>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b096      	sub	sp, #88	@ 0x58
 8002682:	af08      	add	r7, sp, #32
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8002690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002698:	f023 0310 	bic.w	r3, r3, #16
 800269c:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800269e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <_ntoa_long+0x30>
 80026a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d032      	beq.n	8002714 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80026ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80026b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80026b8:	fb01 f202 	mul.w	r2, r1, r2
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80026c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026c6:	2b09      	cmp	r3, #9
 80026c8:	d804      	bhi.n	80026d4 <_ntoa_long+0x56>
 80026ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026ce:	3330      	adds	r3, #48	@ 0x30
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	e00d      	b.n	80026f0 <_ntoa_long+0x72>
 80026d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <_ntoa_long+0x64>
 80026de:	2241      	movs	r2, #65	@ 0x41
 80026e0:	e000      	b.n	80026e4 <_ntoa_long+0x66>
 80026e2:	2261      	movs	r2, #97	@ 0x61
 80026e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026e8:	4413      	add	r3, r2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3b0a      	subs	r3, #10
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f2:	1c59      	adds	r1, r3, #1
 80026f4:	6379      	str	r1, [r7, #52]	@ 0x34
 80026f6:	3338      	adds	r3, #56	@ 0x38
 80026f8:	443b      	add	r3, r7
 80026fa:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80026fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <_ntoa_long+0x96>
 800270e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002710:	2b1f      	cmp	r3, #31
 8002712:	d9cc      	bls.n	80026ae <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002716:	9306      	str	r3, [sp, #24]
 8002718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800271a:	9305      	str	r3, [sp, #20]
 800271c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800271e:	9304      	str	r3, [sp, #16]
 8002720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002722:	9303      	str	r3, [sp, #12]
 8002724:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	f107 0310 	add.w	r3, r7, #16
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff fec3 	bl	80024c6 <_ntoa_format>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3738      	adds	r7, #56	@ 0x38
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	0000      	movs	r0, r0
 800274c:	0000      	movs	r0, r0
	...

08002750 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b09d      	sub	sp, #116	@ 0x74
 8002754:	af04      	add	r7, sp, #16
 8002756:	6178      	str	r0, [r7, #20]
 8002758:	6139      	str	r1, [r7, #16]
 800275a:	60fa      	str	r2, [r7, #12]
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800277a:	f7fe f959 	bl	8000a30 <__aeabi_dcmpeq>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10f      	bne.n	80027a4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002784:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002786:	9303      	str	r3, [sp, #12]
 8002788:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2303      	movs	r3, #3
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	4ba1      	ldr	r3, [pc, #644]	@ (8002a18 <_ftoa+0x2c8>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6939      	ldr	r1, [r7, #16]
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7ff fe43 	bl	8002426 <_out_rev>
 80027a0:	4603      	mov	r3, r0
 80027a2:	e213      	b.n	8002bcc <_ftoa+0x47c>
  if (value < -DBL_MAX)
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027a8:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 80027ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027b0:	f7fe f948 	bl	8000a44 <__aeabi_dcmplt>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00f      	beq.n	80027da <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80027ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027bc:	9303      	str	r3, [sp, #12]
 80027be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c0:	9302      	str	r3, [sp, #8]
 80027c2:	2304      	movs	r3, #4
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	4b95      	ldr	r3, [pc, #596]	@ (8002a1c <_ftoa+0x2cc>)
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	6939      	ldr	r1, [r7, #16]
 80027d0:	6978      	ldr	r0, [r7, #20]
 80027d2:	f7ff fe28 	bl	8002426 <_out_rev>
 80027d6:	4603      	mov	r3, r0
 80027d8:	e1f8      	b.n	8002bcc <_ftoa+0x47c>
  if (value > DBL_MAX)
 80027da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027de:	4b90      	ldr	r3, [pc, #576]	@ (8002a20 <_ftoa+0x2d0>)
 80027e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027e4:	f7fe f94c 	bl	8000a80 <__aeabi_dcmpgt>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01d      	beq.n	800282a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80027ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <_ftoa+0xac>
 80027f8:	4b8a      	ldr	r3, [pc, #552]	@ (8002a24 <_ftoa+0x2d4>)
 80027fa:	e000      	b.n	80027fe <_ftoa+0xae>
 80027fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002a28 <_ftoa+0x2d8>)
 80027fe:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002800:	f002 0204 	and.w	r2, r2, #4
 8002804:	2a00      	cmp	r2, #0
 8002806:	d001      	beq.n	800280c <_ftoa+0xbc>
 8002808:	2204      	movs	r2, #4
 800280a:	e000      	b.n	800280e <_ftoa+0xbe>
 800280c:	2203      	movs	r2, #3
 800280e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002810:	9103      	str	r1, [sp, #12]
 8002812:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002814:	9102      	str	r1, [sp, #8]
 8002816:	9201      	str	r2, [sp, #4]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	6939      	ldr	r1, [r7, #16]
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f7ff fe00 	bl	8002426 <_out_rev>
 8002826:	4603      	mov	r3, r0
 8002828:	e1d0      	b.n	8002bcc <_ftoa+0x47c>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800282a:	a377      	add	r3, pc, #476	@ (adr r3, 8002a08 <_ftoa+0x2b8>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002834:	f7fe f924 	bl	8000a80 <__aeabi_dcmpgt>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <_ftoa+0x102>
 800283e:	a374      	add	r3, pc, #464	@ (adr r3, 8002a10 <_ftoa+0x2c0>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002848:	f7fe f8fc 	bl	8000a44 <__aeabi_dcmplt>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <_ftoa+0x106>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
#else
    return 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	e1ba      	b.n	8002bcc <_ftoa+0x47c>
#endif
  }

  // test for negative
  bool negative = false;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002868:	f7fe f8ec 	bl	8000a44 <__aeabi_dcmplt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00e      	beq.n	8002890 <_ftoa+0x140>
    negative = true;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 8002878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800287c:	f04f 0000 	mov.w	r0, #0
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	f7fd fcb4 	bl	80001f0 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002890:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10d      	bne.n	80028b6 <_ftoa+0x166>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800289a:	2308      	movs	r3, #8
 800289c:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800289e:	e00a      	b.n	80028b6 <_ftoa+0x166>
    buf[len++] = '0';
 80028a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028a6:	3360      	adds	r3, #96	@ 0x60
 80028a8:	443b      	add	r3, r7
 80028aa:	2230      	movs	r2, #48	@ 0x30
 80028ac:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80028b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028b2:	3b01      	subs	r3, #1
 80028b4:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80028b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b8:	2b1f      	cmp	r3, #31
 80028ba:	d802      	bhi.n	80028c2 <_ftoa+0x172>
 80028bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d8ee      	bhi.n	80028a0 <_ftoa+0x150>
  }

  int whole = (int)value;
 80028c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028c6:	f7fe f8fb 	bl	8000ac0 <__aeabi_d2iz>
 80028ca:	4603      	mov	r3, r0
 80028cc:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 80028ce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80028d0:	f7fd fddc 	bl	800048c <__aeabi_i2d>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028dc:	f7fd fc88 	bl	80001f0 <__aeabi_dsub>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	4a50      	ldr	r2, [pc, #320]	@ (8002a2c <_ftoa+0x2dc>)
 80028ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fe34 	bl	8000560 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 8002900:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002904:	f7fe f904 	bl	8000b10 <__aeabi_d2uiz>
 8002908:	4603      	mov	r3, r0
 800290a:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 800290c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800290e:	f7fd fdad 	bl	800046c <__aeabi_ui2d>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800291a:	f7fd fc69 	bl	80001f0 <__aeabi_dsub>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <_ftoa+0x2e0>)
 800292c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002930:	f7fe f8a6 	bl	8000a80 <__aeabi_dcmpgt>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d016      	beq.n	8002968 <_ftoa+0x218>
    ++frac;
 800293a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800293c:	3301      	adds	r3, #1
 800293e:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002940:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002942:	f7fd fd93 	bl	800046c <__aeabi_ui2d>
 8002946:	4a39      	ldr	r2, [pc, #228]	@ (8002a2c <_ftoa+0x2dc>)
 8002948:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f7fe f88b 	bl	8000a6c <__aeabi_dcmpge>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01a      	beq.n	8002992 <_ftoa+0x242>
      frac = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 8002960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002962:	3301      	adds	r3, #1
 8002964:	657b      	str	r3, [r7, #84]	@ 0x54
 8002966:	e014      	b.n	8002992 <_ftoa+0x242>
    }
  }
  else if (diff < 0.5) {
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <_ftoa+0x2e0>)
 800296e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002972:	f7fe f867 	bl	8000a44 <__aeabi_dcmplt>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <_ftoa+0x242>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800297c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800297e:	2b00      	cmp	r3, #0
 8002980:	d004      	beq.n	800298c <_ftoa+0x23c>
 8002982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <_ftoa+0x242>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800298c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800298e:	3301      	adds	r3, #1
 8002990:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 8002992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002994:	2b00      	cmp	r3, #0
 8002996:	d134      	bne.n	8002a02 <_ftoa+0x2b2>
    diff = value - (double)whole;
 8002998:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800299a:	f7fd fd77 	bl	800048c <__aeabi_i2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029a6:	f7fd fc23 	bl	80001f0 <__aeabi_dsub>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80029b2:	2301      	movs	r3, #1
 80029b4:	461c      	mov	r4, r3
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002a30 <_ftoa+0x2e0>)
 80029bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80029c0:	f7fe f840 	bl	8000a44 <__aeabi_dcmplt>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <_ftoa+0x27e>
 80029ca:	2300      	movs	r3, #0
 80029cc:	461c      	mov	r4, r3
 80029ce:	b2e3      	uxtb	r3, r4
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <_ftoa+0x29e>
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <_ftoa+0x2e0>)
 80029e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80029e4:	f7fe f84c 	bl	8000a80 <__aeabi_dcmpgt>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d063      	beq.n	8002ab6 <_ftoa+0x366>
 80029ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8080 	beq.w	8002afa <_ftoa+0x3aa>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	3301      	adds	r3, #1
 80029fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a00:	e07b      	b.n	8002afa <_ftoa+0x3aa>
    }
  }
  else {
    unsigned int count = prec;
 8002a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a06:	e035      	b.n	8002a74 <_ftoa+0x324>
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	41cdcd65 	.word	0x41cdcd65
 8002a10:	00000000 	.word	0x00000000
 8002a14:	c1cdcd65 	.word	0xc1cdcd65
 8002a18:	08009204 	.word	0x08009204
 8002a1c:	08009208 	.word	0x08009208
 8002a20:	7fefffff 	.word	0x7fefffff
 8002a24:	08009210 	.word	0x08009210
 8002a28:	08009218 	.word	0x08009218
 8002a2c:	08009220 	.word	0x08009220
 8002a30:	3fe00000 	.word	0x3fe00000
      --count;
 8002a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a36:	3b01      	subs	r3, #1
 8002a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002a3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002a3c:	4b65      	ldr	r3, [pc, #404]	@ (8002bd4 <_ftoa+0x484>)
 8002a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	1aca      	subs	r2, r1, r3
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002a56:	3230      	adds	r2, #48	@ 0x30
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	3360      	adds	r3, #96	@ 0x60
 8002a5c:	443b      	add	r3, r7
 8002a5e:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002a62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a64:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd4 <_ftoa+0x484>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	08db      	lsrs	r3, r3, #3
 8002a6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <_ftoa+0x32c>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a76:	2b1f      	cmp	r3, #31
 8002a78:	d9dc      	bls.n	8002a34 <_ftoa+0x2e4>
 8002a7a:	e009      	b.n	8002a90 <_ftoa+0x340>
        break;
 8002a7c:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002a7e:	e007      	b.n	8002a90 <_ftoa+0x340>
      buf[len++] = '0';
 8002a80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a86:	3360      	adds	r3, #96	@ 0x60
 8002a88:	443b      	add	r3, r7
 8002a8a:	2230      	movs	r2, #48	@ 0x30
 8002a8c:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002a90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a92:	2b1f      	cmp	r3, #31
 8002a94:	d804      	bhi.n	8002aa0 <_ftoa+0x350>
 8002a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a98:	1e5a      	subs	r2, r3, #1
 8002a9a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ef      	bne.n	8002a80 <_ftoa+0x330>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002aa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa2:	2b1f      	cmp	r3, #31
 8002aa4:	d829      	bhi.n	8002afa <_ftoa+0x3aa>
      // add decimal
      buf[len++] = '.';
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002aac:	3360      	adds	r3, #96	@ 0x60
 8002aae:	443b      	add	r3, r7
 8002ab0:	222e      	movs	r2, #46	@ 0x2e
 8002ab2:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ab6:	e020      	b.n	8002afa <_ftoa+0x3aa>
    buf[len++] = (char)(48 + (whole % 10));
 8002ab8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <_ftoa+0x488>)
 8002abc:	fb83 1302 	smull	r1, r3, r3, r2
 8002ac0:	1099      	asrs	r1, r3, #2
 8002ac2:	17d3      	asrs	r3, r2, #31
 8002ac4:	1ac9      	subs	r1, r1, r3
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	1ad1      	subs	r1, r2, r3
 8002ad0:	b2ca      	uxtb	r2, r1
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ad4:	1c59      	adds	r1, r3, #1
 8002ad6:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002ad8:	3230      	adds	r2, #48	@ 0x30
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	3360      	adds	r3, #96	@ 0x60
 8002ade:	443b      	add	r3, r7
 8002ae0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8002bd8 <_ftoa+0x488>)
 8002ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8002aec:	1092      	asrs	r2, r2, #2
 8002aee:	17db      	asrs	r3, r3, #31
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <_ftoa+0x3b2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002afc:	2b1f      	cmp	r3, #31
 8002afe:	d9db      	bls.n	8002ab8 <_ftoa+0x368>
 8002b00:	e000      	b.n	8002b04 <_ftoa+0x3b4>
      break;
 8002b02:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d123      	bne.n	8002b56 <_ftoa+0x406>
 8002b0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01e      	beq.n	8002b56 <_ftoa+0x406>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d014      	beq.n	8002b48 <_ftoa+0x3f8>
 8002b1e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <_ftoa+0x3e0>
 8002b26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00b      	beq.n	8002b48 <_ftoa+0x3f8>
      width--;
 8002b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b32:	3b01      	subs	r3, #1
 8002b34:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b36:	e007      	b.n	8002b48 <_ftoa+0x3f8>
      buf[len++] = '0';
 8002b38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b3e:	3360      	adds	r3, #96	@ 0x60
 8002b40:	443b      	add	r3, r7
 8002b42:	2230      	movs	r2, #48	@ 0x30
 8002b44:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d202      	bcs.n	8002b56 <_ftoa+0x406>
 8002b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b52:	2b1f      	cmp	r3, #31
 8002b54:	d9f0      	bls.n	8002b38 <_ftoa+0x3e8>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b58:	2b1f      	cmp	r3, #31
 8002b5a:	d827      	bhi.n	8002bac <_ftoa+0x45c>
    if (negative) {
 8002b5c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <_ftoa+0x426>
      buf[len++] = '-';
 8002b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b6a:	3360      	adds	r3, #96	@ 0x60
 8002b6c:	443b      	add	r3, r7
 8002b6e:	222d      	movs	r2, #45	@ 0x2d
 8002b70:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002b74:	e01a      	b.n	8002bac <_ftoa+0x45c>
    }
    else if (flags & FLAGS_PLUS) {
 8002b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <_ftoa+0x442>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b86:	3360      	adds	r3, #96	@ 0x60
 8002b88:	443b      	add	r3, r7
 8002b8a:	222b      	movs	r2, #43	@ 0x2b
 8002b8c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002b90:	e00c      	b.n	8002bac <_ftoa+0x45c>
    }
    else if (flags & FLAGS_SPACE) {
 8002b92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <_ftoa+0x45c>
      buf[len++] = ' ';
 8002b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ba2:	3360      	adds	r3, #96	@ 0x60
 8002ba4:	443b      	add	r3, r7
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bae:	9303      	str	r3, [sp, #12]
 8002bb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	f107 0318 	add.w	r3, r7, #24
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	6939      	ldr	r1, [r7, #16]
 8002bc4:	6978      	ldr	r0, [r7, #20]
 8002bc6:	f7ff fc2e 	bl	8002426 <_out_rev>
 8002bca:	4603      	mov	r3, r0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3764      	adds	r7, #100	@ 0x64
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd90      	pop	{r4, r7, pc}
 8002bd4:	cccccccd 	.word	0xcccccccd
 8002bd8:	66666667 	.word	0x66666667

08002bdc <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b099      	sub	sp, #100	@ 0x64
 8002be0:	af06      	add	r7, sp, #24
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!buffer) {
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 83ab 	bne.w	800334c <_vsnprintf+0x770>
    // use null output function
    out = _out_null;
 8002bf6:	4ba5      	ldr	r3, [pc, #660]	@ (8002e8c <_vsnprintf+0x2b0>)
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002bfa:	e3a7      	b.n	800334c <_vsnprintf+0x770>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b25      	cmp	r3, #37	@ 0x25
 8002c02:	d00c      	beq.n	8002c1e <_vsnprintf+0x42>
      // no
      out(*format, buffer, idx++, maxlen);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7818      	ldrb	r0, [r3, #0]
 8002c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c0a:	1c53      	adds	r3, r2, #1
 8002c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c0e:	68fc      	ldr	r4, [r7, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	47a0      	blx	r4
      format++;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	603b      	str	r3, [r7, #0]
      continue;
 8002c1c:	e396      	b.n	800334c <_vsnprintf+0x770>
    }
    else {
      // yes, evaluate it
      format++;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	647b      	str	r3, [r7, #68]	@ 0x44
    do {
      switch (*format) {
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3b20      	subs	r3, #32
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d856      	bhi.n	8002ce0 <_vsnprintf+0x104>
 8002c32:	a201      	add	r2, pc, #4	@ (adr r2, 8002c38 <_vsnprintf+0x5c>)
 8002c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c38:	08002cb9 	.word	0x08002cb9
 8002c3c:	08002ce1 	.word	0x08002ce1
 8002c40:	08002ce1 	.word	0x08002ce1
 8002c44:	08002ccd 	.word	0x08002ccd
 8002c48:	08002ce1 	.word	0x08002ce1
 8002c4c:	08002ce1 	.word	0x08002ce1
 8002c50:	08002ce1 	.word	0x08002ce1
 8002c54:	08002ce1 	.word	0x08002ce1
 8002c58:	08002ce1 	.word	0x08002ce1
 8002c5c:	08002ce1 	.word	0x08002ce1
 8002c60:	08002ce1 	.word	0x08002ce1
 8002c64:	08002ca5 	.word	0x08002ca5
 8002c68:	08002ce1 	.word	0x08002ce1
 8002c6c:	08002c91 	.word	0x08002c91
 8002c70:	08002ce1 	.word	0x08002ce1
 8002c74:	08002ce1 	.word	0x08002ce1
 8002c78:	08002c7d 	.word	0x08002c7d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c8e:	e02a      	b.n	8002ce6 <_vsnprintf+0x10a>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ca2:	e020      	b.n	8002ce6 <_vsnprintf+0x10a>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cb6:	e016      	b.n	8002ce6 <_vsnprintf+0x10a>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cba:	f043 0308 	orr.w	r3, r3, #8
 8002cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cca:	e00c      	b.n	8002ce6 <_vsnprintf+0x10a>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cce:	f043 0310 	orr.w	r3, r3, #16
 8002cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cde:	e002      	b.n	8002ce6 <_vsnprintf+0x10a>
        default :                                   n = 0U; break;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ce4:	bf00      	nop
      }
    } while (n);
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d19d      	bne.n	8002c28 <_vsnprintf+0x4c>

    // evaluate width field
    width = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40
    if (_is_digit(*format)) {
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fb5b 	bl	80023b0 <_is_digit>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <_vsnprintf+0x130>
      width = _atoi(&format);
 8002d00:	463b      	mov	r3, r7
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fb6b 	bl	80023de <_atoi>
 8002d08:	6438      	str	r0, [r7, #64]	@ 0x40
 8002d0a:	e018      	b.n	8002d3e <_vsnprintf+0x162>
    }
    else if (*format == '*') {
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d12:	d114      	bne.n	8002d3e <_vsnprintf+0x162>
      const int w = va_arg(va, int);
 8002d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d16:	1d1a      	adds	r2, r3, #4
 8002d18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	623b      	str	r3, [r7, #32]
      if (w < 0) {
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da07      	bge.n	8002d34 <_vsnprintf+0x158>
        flags |= FLAGS_LEFT;    // reverse padding
 8002d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	647b      	str	r3, [r7, #68]	@ 0x44
        width = (unsigned int)-w;
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	425b      	negs	r3, r3
 8002d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d32:	e001      	b.n	8002d38 <_vsnprintf+0x15c>
      }
      else {
        width = (unsigned int)w;
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	643b      	str	r3, [r7, #64]	@ 0x40
      }
      format++;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (*format == '.') {
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d48:	d124      	bne.n	8002d94 <_vsnprintf+0x1b8>
      flags |= FLAGS_PRECISION;
 8002d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d50:	647b      	str	r3, [r7, #68]	@ 0x44
      format++;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fb27 	bl	80023b0 <_is_digit>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <_vsnprintf+0x198>
        precision = _atoi(&format);
 8002d68:	463b      	mov	r3, r7
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fb37 	bl	80023de <_atoi>
 8002d70:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002d72:	e00f      	b.n	8002d94 <_vsnprintf+0x1b8>
      }
      else if (*format == '*') {
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d7a:	d10b      	bne.n	8002d94 <_vsnprintf+0x1b8>
        const int prec = (int)va_arg(va, int);
 8002d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d7e:	1d1a      	adds	r2, r3, #4
 8002d80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61fb      	str	r3, [r7, #28]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        format++;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3b68      	subs	r3, #104	@ 0x68
 8002d9a:	2b12      	cmp	r3, #18
 8002d9c:	d85e      	bhi.n	8002e5c <_vsnprintf+0x280>
 8002d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002da4 <_vsnprintf+0x1c8>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002e17 	.word	0x08002e17
 8002da8:	08002e5d 	.word	0x08002e5d
 8002dac:	08002e3d 	.word	0x08002e3d
 8002db0:	08002e5d 	.word	0x08002e5d
 8002db4:	08002df1 	.word	0x08002df1
 8002db8:	08002e5d 	.word	0x08002e5d
 8002dbc:	08002e5d 	.word	0x08002e5d
 8002dc0:	08002e5d 	.word	0x08002e5d
 8002dc4:	08002e5d 	.word	0x08002e5d
 8002dc8:	08002e5d 	.word	0x08002e5d
 8002dcc:	08002e5d 	.word	0x08002e5d
 8002dd0:	08002e5d 	.word	0x08002e5d
 8002dd4:	08002e5d 	.word	0x08002e5d
 8002dd8:	08002e5d 	.word	0x08002e5d
 8002ddc:	08002e5d 	.word	0x08002e5d
 8002de0:	08002e5d 	.word	0x08002e5d
 8002de4:	08002e5d 	.word	0x08002e5d
 8002de8:	08002e5d 	.word	0x08002e5d
 8002dec:	08002e4d 	.word	0x08002e4d
      case 'l' :
        flags |= FLAGS_LONG;
 8002df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df6:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b6c      	cmp	r3, #108	@ 0x6c
 8002e04:	d12c      	bne.n	8002e60 <_vsnprintf+0x284>
          flags |= FLAGS_LONG_LONG;
 8002e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e0c:	647b      	str	r3, [r7, #68]	@ 0x44
          format++;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	603b      	str	r3, [r7, #0]
        }
        break;
 8002e14:	e024      	b.n	8002e60 <_vsnprintf+0x284>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e1c:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b68      	cmp	r3, #104	@ 0x68
 8002e2a:	d11b      	bne.n	8002e64 <_vsnprintf+0x288>
          flags |= FLAGS_CHAR;
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e32:	647b      	str	r3, [r7, #68]	@ 0x44
          format++;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	603b      	str	r3, [r7, #0]
        }
        break;
 8002e3a:	e013      	b.n	8002e64 <_vsnprintf+0x288>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e42:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	603b      	str	r3, [r7, #0]
        break;
 8002e4a:	e00c      	b.n	8002e66 <_vsnprintf+0x28a>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e52:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	603b      	str	r3, [r7, #0]
        break;
 8002e5a:	e004      	b.n	8002e66 <_vsnprintf+0x28a>
      default :
        break;
 8002e5c:	bf00      	nop
 8002e5e:	e002      	b.n	8002e66 <_vsnprintf+0x28a>
        break;
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <_vsnprintf+0x28a>
        break;
 8002e64:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b78      	cmp	r3, #120	@ 0x78
 8002e6c:	f300 8261 	bgt.w	8003332 <_vsnprintf+0x756>
 8002e70:	2b69      	cmp	r3, #105	@ 0x69
 8002e72:	da0d      	bge.n	8002e90 <_vsnprintf+0x2b4>
 8002e74:	2b25      	cmp	r3, #37	@ 0x25
 8002e76:	f000 8250 	beq.w	800331a <_vsnprintf+0x73e>
 8002e7a:	2b25      	cmp	r3, #37	@ 0x25
 8002e7c:	f2c0 8259 	blt.w	8003332 <_vsnprintf+0x756>
 8002e80:	2b66      	cmp	r3, #102	@ 0x66
 8002e82:	f300 8256 	bgt.w	8003332 <_vsnprintf+0x756>
 8002e86:	2b46      	cmp	r3, #70	@ 0x46
 8002e88:	da25      	bge.n	8002ed6 <_vsnprintf+0x2fa>
 8002e8a:	e252      	b.n	8003332 <_vsnprintf+0x756>
 8002e8c:	0800235b 	.word	0x0800235b
 8002e90:	3b69      	subs	r3, #105	@ 0x69
 8002e92:	2201      	movs	r2, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	f249 0241 	movw	r2, #36929	@ 0x9041
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2201      	movne	r2, #1
 8002ea4:	2200      	moveq	r2, #0
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d15d      	bne.n	8002f68 <_vsnprintf+0x38c>
 8002eac:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002eb0:	2a00      	cmp	r2, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2201      	movne	r2, #1
 8002eb6:	2200      	moveq	r2, #0
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	2a00      	cmp	r2, #0
 8002ebc:	f040 820c 	bne.w	80032d8 <_vsnprintf+0x6fc>
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 81a0 	bne.w	8003214 <_vsnprintf+0x638>
 8002ed4:	e22d      	b.n	8003332 <_vsnprintf+0x756>
 8002ed6:	3b46      	subs	r3, #70	@ 0x46
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	f200 822a 	bhi.w	8003332 <_vsnprintf+0x756>
 8002ede:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <_vsnprintf+0x308>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08003155 	.word	0x08003155
 8002ee8:	08003333 	.word	0x08003333
 8002eec:	08003333 	.word	0x08003333
 8002ef0:	08003333 	.word	0x08003333
 8002ef4:	08003333 	.word	0x08003333
 8002ef8:	08003333 	.word	0x08003333
 8002efc:	08003333 	.word	0x08003333
 8002f00:	08003333 	.word	0x08003333
 8002f04:	08003333 	.word	0x08003333
 8002f08:	08003333 	.word	0x08003333
 8002f0c:	08003333 	.word	0x08003333
 8002f10:	08003333 	.word	0x08003333
 8002f14:	08003333 	.word	0x08003333
 8002f18:	08003333 	.word	0x08003333
 8002f1c:	08003333 	.word	0x08003333
 8002f20:	08003333 	.word	0x08003333
 8002f24:	08003333 	.word	0x08003333
 8002f28:	08003333 	.word	0x08003333
 8002f2c:	08002f69 	.word	0x08002f69
 8002f30:	08003333 	.word	0x08003333
 8002f34:	08003333 	.word	0x08003333
 8002f38:	08003333 	.word	0x08003333
 8002f3c:	08003333 	.word	0x08003333
 8002f40:	08003333 	.word	0x08003333
 8002f44:	08003333 	.word	0x08003333
 8002f48:	08003333 	.word	0x08003333
 8002f4c:	08003333 	.word	0x08003333
 8002f50:	08003333 	.word	0x08003333
 8002f54:	08002f69 	.word	0x08002f69
 8002f58:	080031a1 	.word	0x080031a1
 8002f5c:	08002f69 	.word	0x08002f69
 8002f60:	08003333 	.word	0x08003333
 8002f64:	08003155 	.word	0x08003155
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b78      	cmp	r3, #120	@ 0x78
 8002f6e:	d003      	beq.n	8002f78 <_vsnprintf+0x39c>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b58      	cmp	r3, #88	@ 0x58
 8002f76:	d102      	bne.n	8002f7e <_vsnprintf+0x3a2>
          base = 16U;
 8002f78:	2310      	movs	r3, #16
 8002f7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f7c:	e013      	b.n	8002fa6 <_vsnprintf+0x3ca>
        }
        else if (*format == 'o') {
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b6f      	cmp	r3, #111	@ 0x6f
 8002f84:	d102      	bne.n	8002f8c <_vsnprintf+0x3b0>
          base =  8U;
 8002f86:	2308      	movs	r3, #8
 8002f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f8a:	e00c      	b.n	8002fa6 <_vsnprintf+0x3ca>
        }
        else if (*format == 'b') {
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b62      	cmp	r3, #98	@ 0x62
 8002f92:	d102      	bne.n	8002f9a <_vsnprintf+0x3be>
          base =  2U;
 8002f94:	2302      	movs	r3, #2
 8002f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f98:	e005      	b.n	8002fa6 <_vsnprintf+0x3ca>
        }
        else {
          base = 10U;
 8002f9a:	230a      	movs	r3, #10
 8002f9c:	633b      	str	r3, [r7, #48]	@ 0x30
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa0:	f023 0310 	bic.w	r3, r3, #16
 8002fa4:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        // uppercase
        if (*format == 'X') {
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b58      	cmp	r3, #88	@ 0x58
 8002fac:	d103      	bne.n	8002fb6 <_vsnprintf+0x3da>
          flags |= FLAGS_UPPERCASE;
 8002fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb0:	f043 0320 	orr.w	r3, r3, #32
 8002fb4:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b69      	cmp	r3, #105	@ 0x69
 8002fbc:	d007      	beq.n	8002fce <_vsnprintf+0x3f2>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d003      	beq.n	8002fce <_vsnprintf+0x3f2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fc8:	f023 030c 	bic.w	r3, r3, #12
 8002fcc:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <_vsnprintf+0x404>
          flags &= ~FLAGS_ZEROPAD;
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b69      	cmp	r3, #105	@ 0x69
 8002fe6:	d003      	beq.n	8002ff0 <_vsnprintf+0x414>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b64      	cmp	r3, #100	@ 0x64
 8002fee:	d15e      	bne.n	80030ae <_vsnprintf+0x4d2>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 80a8 	bne.w	800314c <_vsnprintf+0x570>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01e      	beq.n	8003044 <_vsnprintf+0x468>
            const long value = va_arg(va, long);
 8003006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003008:	1d1a      	adds	r2, r3, #4
 800300a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	613b      	str	r3, [r7, #16]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	bfb8      	it	lt
 8003016:	425b      	neglt	r3, r3
 8003018:	4619      	mov	r1, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	0fdb      	lsrs	r3, r3, #31
 800301e:	b2db      	uxtb	r3, r3
 8003020:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003022:	9205      	str	r2, [sp, #20]
 8003024:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003026:	9204      	str	r2, [sp, #16]
 8003028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800302a:	9203      	str	r2, [sp, #12]
 800302c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800302e:	9202      	str	r2, [sp, #8]
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	9100      	str	r1, [sp, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff fb1f 	bl	800267e <_ntoa_long>
 8003040:	6378      	str	r0, [r7, #52]	@ 0x34
          if (flags & FLAGS_LONG_LONG) {
 8003042:	e083      	b.n	800314c <_vsnprintf+0x570>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <_vsnprintf+0x47e>
 800304e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003050:	1d1a      	adds	r2, r3, #4
 8003052:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	e00e      	b.n	8003078 <_vsnprintf+0x49c>
 800305a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800305c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <_vsnprintf+0x494>
 8003064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	65ba      	str	r2, [r7, #88]	@ 0x58
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	b21b      	sxth	r3, r3
 800306e:	e003      	b.n	8003078 <_vsnprintf+0x49c>
 8003070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	617b      	str	r3, [r7, #20]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	bfb8      	it	lt
 8003080:	425b      	neglt	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	0fdb      	lsrs	r3, r3, #31
 8003088:	b2db      	uxtb	r3, r3
 800308a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800308c:	9205      	str	r2, [sp, #20]
 800308e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003090:	9204      	str	r2, [sp, #16]
 8003092:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003094:	9203      	str	r2, [sp, #12]
 8003096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003098:	9202      	str	r2, [sp, #8]
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	9100      	str	r1, [sp, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff faea 	bl	800267e <_ntoa_long>
 80030aa:	6378      	str	r0, [r7, #52]	@ 0x34
          if (flags & FLAGS_LONG_LONG) {
 80030ac:	e04e      	b.n	800314c <_vsnprintf+0x570>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80030ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d149      	bne.n	800314c <_vsnprintf+0x570>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 80030b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <_vsnprintf+0x514>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80030c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030c4:	1d1a      	adds	r2, r3, #4
 80030c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030cc:	9205      	str	r2, [sp, #20]
 80030ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030d0:	9204      	str	r2, [sp, #16]
 80030d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030d4:	9203      	str	r2, [sp, #12]
 80030d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030d8:	9202      	str	r2, [sp, #8]
 80030da:	2200      	movs	r2, #0
 80030dc:	9201      	str	r2, [sp, #4]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff fac9 	bl	800267e <_ntoa_long>
 80030ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80030ee:	e02d      	b.n	800314c <_vsnprintf+0x570>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80030f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <_vsnprintf+0x52a>
 80030fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030fc:	1d1a      	adds	r2, r3, #4
 80030fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e00e      	b.n	8003124 <_vsnprintf+0x548>
 8003106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <_vsnprintf+0x540>
 8003110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	e003      	b.n	8003124 <_vsnprintf+0x548>
 800311c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003128:	9305      	str	r3, [sp, #20]
 800312a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800312c:	9304      	str	r3, [sp, #16]
 800312e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003130:	9303      	str	r3, [sp, #12]
 8003132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003134:	9302      	str	r3, [sp, #8]
 8003136:	2300      	movs	r3, #0
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff fa9a 	bl	800267e <_ntoa_long>
 800314a:	6378      	str	r0, [r7, #52]	@ 0x34
          }
        }
        format++;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	603b      	str	r3, [r7, #0]
        break;
 8003152:	e0fb      	b.n	800334c <_vsnprintf+0x770>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b46      	cmp	r3, #70	@ 0x46
 800315a:	d103      	bne.n	8003164 <_vsnprintf+0x588>
 800315c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315e:	f043 0320 	orr.w	r3, r3, #32
 8003162:	647b      	str	r3, [r7, #68]	@ 0x44
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003166:	3307      	adds	r3, #7
 8003168:	f023 0307 	bic.w	r3, r3, #7
 800316c:	f103 0208 	add.w	r2, r3, #8
 8003170:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003172:	ed93 7b00 	vldr	d7, [r3]
 8003176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003178:	9302      	str	r3, [sp, #8]
 800317a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	eeb0 0a47 	vmov.f32	s0, s14
 8003186:	eef0 0a67 	vmov.f32	s1, s15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff fadd 	bl	8002750 <_ftoa>
 8003196:	6378      	str	r0, [r7, #52]	@ 0x34
        format++;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	603b      	str	r3, [r7, #0]
        break;
 800319e:	e0d5      	b.n	800334c <_vsnprintf+0x770>
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80031a0:	2301      	movs	r3, #1
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80031a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10e      	bne.n	80031cc <_vsnprintf+0x5f0>
          while (l++ < width) {
 80031ae:	e007      	b.n	80031c0 <_vsnprintf+0x5e4>
            out(' ', buffer, idx++, maxlen);
 80031b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031b2:	1c53      	adds	r3, r2, #1
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b6:	68fc      	ldr	r4, [r7, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	2020      	movs	r0, #32
 80031be:	47a0      	blx	r4
          while (l++ < width) {
 80031c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d8f1      	bhi.n	80031b0 <_vsnprintf+0x5d4>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80031cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	b2d8      	uxtb	r0, r3
 80031d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031d8:	1c53      	adds	r3, r2, #1
 80031da:	637b      	str	r3, [r7, #52]	@ 0x34
 80031dc:	68fc      	ldr	r4, [r7, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80031e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00e      	beq.n	800320c <_vsnprintf+0x630>
          while (l++ < width) {
 80031ee:	e007      	b.n	8003200 <_vsnprintf+0x624>
            out(' ', buffer, idx++, maxlen);
 80031f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031f2:	1c53      	adds	r3, r2, #1
 80031f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031f6:	68fc      	ldr	r4, [r7, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	2020      	movs	r0, #32
 80031fe:	47a0      	blx	r4
          while (l++ < width) {
 8003200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003208:	429a      	cmp	r2, r3
 800320a:	d8f1      	bhi.n	80031f0 <_vsnprintf+0x614>
          }
        }
        format++;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	603b      	str	r3, [r7, #0]
        break;
 8003212:	e09b      	b.n	800334c <_vsnprintf+0x770>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003216:	1d1a      	adds	r2, r3, #4
 8003218:	65ba      	str	r2, [r7, #88]	@ 0x58
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800321e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <_vsnprintf+0x64c>
 8003224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003226:	e001      	b.n	800322c <_vsnprintf+0x650>
 8003228:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800322c:	4619      	mov	r1, r3
 800322e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003230:	f7ff f8a1 	bl	8002376 <_strnlen_s>
 8003234:	6278      	str	r0, [r7, #36]	@ 0x24
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <_vsnprintf+0x670>
          l = (l < precision ? l : precision);
 8003240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003244:	4293      	cmp	r3, r2
 8003246:	bf28      	it	cs
 8003248:	4613      	movcs	r3, r2
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (!(flags & FLAGS_LEFT)) {
 800324c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11a      	bne.n	800328c <_vsnprintf+0x6b0>
          while (l++ < width) {
 8003256:	e007      	b.n	8003268 <_vsnprintf+0x68c>
            out(' ', buffer, idx++, maxlen);
 8003258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800325a:	1c53      	adds	r3, r2, #1
 800325c:	637b      	str	r3, [r7, #52]	@ 0x34
 800325e:	68fc      	ldr	r4, [r7, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	2020      	movs	r0, #32
 8003266:	47a0      	blx	r4
          while (l++ < width) {
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	627a      	str	r2, [r7, #36]	@ 0x24
 800326e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003270:	429a      	cmp	r2, r3
 8003272:	d8f1      	bhi.n	8003258 <_vsnprintf+0x67c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003274:	e00a      	b.n	800328c <_vsnprintf+0x6b0>
          out(*(p++), buffer, idx++, maxlen);
 8003276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800327c:	7818      	ldrb	r0, [r3, #0]
 800327e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003280:	1c53      	adds	r3, r2, #1
 8003282:	637b      	str	r3, [r7, #52]	@ 0x34
 8003284:	68fc      	ldr	r4, [r7, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <_vsnprintf+0x6cc>
 8003294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0eb      	beq.n	8003276 <_vsnprintf+0x69a>
 800329e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e6      	bne.n	8003276 <_vsnprintf+0x69a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80032a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <_vsnprintf+0x6f4>
          while (l++ < width) {
 80032b2:	e007      	b.n	80032c4 <_vsnprintf+0x6e8>
            out(' ', buffer, idx++, maxlen);
 80032b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032b6:	1c53      	adds	r3, r2, #1
 80032b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ba:	68fc      	ldr	r4, [r7, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	2020      	movs	r0, #32
 80032c2:	47a0      	blx	r4
          while (l++ < width) {
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80032ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d8f1      	bhi.n	80032b4 <_vsnprintf+0x6d8>
          }
        }
        format++;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	603b      	str	r3, [r7, #0]
        break;
 80032d6:	e039      	b.n	800334c <_vsnprintf+0x770>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80032d8:	2308      	movs	r3, #8
 80032da:	643b      	str	r3, [r7, #64]	@ 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80032dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032de:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 80032e2:	647b      	str	r3, [r7, #68]	@ 0x44
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80032e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f0:	9305      	str	r3, [sp, #20]
 80032f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f4:	9304      	str	r3, [sp, #16]
 80032f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f8:	9303      	str	r3, [sp, #12]
 80032fa:	2310      	movs	r3, #16
 80032fc:	9302      	str	r3, [sp, #8]
 80032fe:	2300      	movs	r3, #0
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	9200      	str	r2, [sp, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff f9b7 	bl	800267e <_ntoa_long>
 8003310:	6378      	str	r0, [r7, #52]	@ 0x34
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	603b      	str	r3, [r7, #0]
        break;
 8003318:	e018      	b.n	800334c <_vsnprintf+0x770>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800331a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800331c:	1c53      	adds	r3, r2, #1
 800331e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003320:	68fc      	ldr	r4, [r7, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	2025      	movs	r0, #37	@ 0x25
 8003328:	47a0      	blx	r4
        format++;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	603b      	str	r3, [r7, #0]
        break;
 8003330:	e00c      	b.n	800334c <_vsnprintf+0x770>

      default :
        out(*format, buffer, idx++, maxlen);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	7818      	ldrb	r0, [r3, #0]
 8003336:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003338:	1c53      	adds	r3, r2, #1
 800333a:	637b      	str	r3, [r7, #52]	@ 0x34
 800333c:	68fc      	ldr	r4, [r7, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	47a0      	blx	r4
        format++;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	603b      	str	r3, [r7, #0]
        break;
 800334a:	bf00      	nop
  while (*format)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f ac53 	bne.w	8002bfc <_vsnprintf+0x20>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <_vsnprintf+0x788>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	e000      	b.n	8003366 <_vsnprintf+0x78a>
 8003364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003366:	68fc      	ldr	r4, [r7, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	2000      	movs	r0, #0
 800336e:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003372:	4618      	mov	r0, r3
 8003374:	374c      	adds	r7, #76	@ 0x4c
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop

0800337c <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 800337c:	b40c      	push	{r2, r3}
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af02      	add	r7, sp, #8
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4805      	ldr	r0, [pc, #20]	@ (80033b0 <snprintf_+0x34>)
 800339a:	f7ff fc1f 	bl	8002bdc <_vsnprintf>
 800339e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80033a0:	68fb      	ldr	r3, [r7, #12]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ac:	b002      	add	sp, #8
 80033ae:	4770      	bx	lr
 80033b0:	0800232d 	.word	0x0800232d

080033b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <HAL_MspInit+0x4c>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003400 <HAL_MspInit+0x4c>)
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <HAL_MspInit+0x4c>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_MspInit+0x4c>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <HAL_MspInit+0x4c>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_MspInit+0x4c>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	@ 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1b      	ldr	r2, [pc, #108]	@ (8003490 <HAL_ADC_MspInit+0x8c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12f      	bne.n	8003486 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <HAL_ADC_MspInit+0x90>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	4a19      	ldr	r2, [pc, #100]	@ (8003494 <HAL_ADC_MspInit+0x90>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003434:	6453      	str	r3, [r2, #68]	@ 0x44
 8003436:	4b17      	ldr	r3, [pc, #92]	@ (8003494 <HAL_ADC_MspInit+0x90>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <HAL_ADC_MspInit+0x90>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <HAL_ADC_MspInit+0x90>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6313      	str	r3, [r2, #48]	@ 0x30
 8003452:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <HAL_ADC_MspInit+0x90>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800345e:	2303      	movs	r3, #3
 8003460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003462:	2303      	movs	r3, #3
 8003464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	4619      	mov	r1, r3
 8003470:	4809      	ldr	r0, [pc, #36]	@ (8003498 <HAL_ADC_MspInit+0x94>)
 8003472:	f001 f861 	bl	8004538 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	2100      	movs	r1, #0
 800347a:	2012      	movs	r0, #18
 800347c:	f000 fff5 	bl	800446a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003480:	2012      	movs	r0, #18
 8003482:	f001 f80e 	bl	80044a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003486:	bf00      	nop
 8003488:	3728      	adds	r7, #40	@ 0x28
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40012000 	.word	0x40012000
 8003494:	40023800 	.word	0x40023800
 8003498:	40020000 	.word	0x40020000

0800349c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	@ 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a21      	ldr	r2, [pc, #132]	@ (8003540 <HAL_I2C_MspInit+0xa4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d13b      	bne.n	8003536 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	4b20      	ldr	r3, [pc, #128]	@ (8003544 <HAL_I2C_MspInit+0xa8>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003544 <HAL_I2C_MspInit+0xa8>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <HAL_I2C_MspInit+0xa8>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034da:	23c0      	movs	r3, #192	@ 0xc0
 80034dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034de:	2312      	movs	r3, #18
 80034e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e6:	2303      	movs	r3, #3
 80034e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034ea:	2304      	movs	r3, #4
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	4814      	ldr	r0, [pc, #80]	@ (8003548 <HAL_I2C_MspInit+0xac>)
 80034f6:	f001 f81f 	bl	8004538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <HAL_I2C_MspInit+0xa8>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <HAL_I2C_MspInit+0xa8>)
 8003504:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003508:	6413      	str	r3, [r2, #64]	@ 0x40
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_I2C_MspInit+0xa8>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	201f      	movs	r0, #31
 800351c:	f000 ffa5 	bl	800446a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003520:	201f      	movs	r0, #31
 8003522:	f000 ffbe 	bl	80044a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	2020      	movs	r0, #32
 800352c:	f000 ff9d 	bl	800446a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003530:	2020      	movs	r0, #32
 8003532:	f000 ffb6 	bl	80044a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	@ 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40005400 	.word	0x40005400
 8003544:	40023800 	.word	0x40023800
 8003548:	40020400 	.word	0x40020400

0800354c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0b      	ldr	r2, [pc, #44]	@ (8003588 <HAL_TIM_Base_MspInit+0x3c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10d      	bne.n	800357a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_TIM_Base_MspInit+0x40>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <HAL_TIM_Base_MspInit+0x40>)
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	6413      	str	r3, [r2, #64]	@ 0x40
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <HAL_TIM_Base_MspInit+0x40>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40000800 	.word	0x40000800
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	@ 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	@ (8003614 <HAL_UART_MspInit+0x84>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d12b      	bne.n	800360a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <HAL_UART_MspInit+0x88>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <HAL_UART_MspInit+0x88>)
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_UART_MspInit+0x88>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <HAL_UART_MspInit+0x88>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	4a10      	ldr	r2, [pc, #64]	@ (8003618 <HAL_UART_MspInit+0x88>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035de:	4b0e      	ldr	r3, [pc, #56]	@ (8003618 <HAL_UART_MspInit+0x88>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035ea:	230c      	movs	r3, #12
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2303      	movs	r3, #3
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035fa:	2307      	movs	r3, #7
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4805      	ldr	r0, [pc, #20]	@ (800361c <HAL_UART_MspInit+0x8c>)
 8003606:	f000 ff97 	bl	8004538 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	@ 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40004400 	.word	0x40004400
 8003618:	40023800 	.word	0x40023800
 800361c:	40020000 	.word	0x40020000

08003620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <NMI_Handler+0x4>

08003628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <HardFault_Handler+0x4>

08003630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <MemManage_Handler+0x4>

08003638 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <BusFault_Handler+0x4>

08003640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003644:	bf00      	nop
 8003646:	e7fd      	b.n	8003644 <UsageFault_Handler+0x4>

08003648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003676:	f000 f8af 	bl	80037d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003684:	4802      	ldr	r0, [pc, #8]	@ (8003690 <ADC_IRQHandler+0x10>)
 8003686:	f000 faa1 	bl	8003bcc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000094 	.word	0x20000094

08003694 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003698:	4802      	ldr	r0, [pc, #8]	@ (80036a4 <I2C1_EV_IRQHandler+0x10>)
 800369a:	f001 fd89 	bl	80051b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200000dc 	.word	0x200000dc

080036a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80036ac:	4802      	ldr	r0, [pc, #8]	@ (80036b8 <I2C1_ER_IRQHandler+0x10>)
 80036ae:	f001 fed2 	bl	8005456 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200000dc 	.word	0x200000dc

080036bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c0:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <SystemInit+0x20>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	4a05      	ldr	r2, [pc, #20]	@ (80036dc <SystemInit+0x20>)
 80036c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003718 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036e4:	f7ff ffea 	bl	80036bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036e8:	480c      	ldr	r0, [pc, #48]	@ (800371c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036ea:	490d      	ldr	r1, [pc, #52]	@ (8003720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f0:	e002      	b.n	80036f8 <LoopCopyDataInit>

080036f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036f6:	3304      	adds	r3, #4

080036f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036fc:	d3f9      	bcc.n	80036f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003700:	4c0a      	ldr	r4, [pc, #40]	@ (800372c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003704:	e001      	b.n	800370a <LoopFillZerobss>

08003706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003708:	3204      	adds	r2, #4

0800370a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800370a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800370c:	d3fb      	bcc.n	8003706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800370e:	f005 fc19 	bl	8008f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003712:	f7fe fa8f 	bl	8001c34 <main>
  bx  lr    
 8003716:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003718:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800371c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003720:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003724:	08009298 	.word	0x08009298
  ldr r2, =_sbss
 8003728:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800372c:	20000628 	.word	0x20000628

08003730 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003730:	e7fe      	b.n	8003730 <DMA1_Stream0_IRQHandler>
	...

08003734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003738:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0d      	ldr	r2, [pc, #52]	@ (8003774 <HAL_Init+0x40>)
 800373e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0a      	ldr	r2, [pc, #40]	@ (8003774 <HAL_Init+0x40>)
 800374a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800374e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003750:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <HAL_Init+0x40>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a07      	ldr	r2, [pc, #28]	@ (8003774 <HAL_Init+0x40>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800375a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375c:	2003      	movs	r0, #3
 800375e:	f000 fe79 	bl	8004454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003762:	200f      	movs	r0, #15
 8003764:	f000 f808 	bl	8003778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003768:	f7ff fe24 	bl	80033b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023c00 	.word	0x40023c00

08003778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003780:	4b12      	ldr	r3, [pc, #72]	@ (80037cc <HAL_InitTick+0x54>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b12      	ldr	r3, [pc, #72]	@ (80037d0 <HAL_InitTick+0x58>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800378e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fe91 	bl	80044be <HAL_SYSTICK_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00e      	b.n	80037c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d80a      	bhi.n	80037c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ac:	2200      	movs	r2, #0
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037b4:	f000 fe59 	bl	800446a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b8:	4a06      	ldr	r2, [pc, #24]	@ (80037d4 <HAL_InitTick+0x5c>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000008 	.word	0x20000008
 80037d0:	20000010 	.word	0x20000010
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_IncTick+0x20>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_IncTick+0x24>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <HAL_IncTick+0x24>)
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000010 	.word	0x20000010
 80037fc:	200004ec 	.word	0x200004ec

08003800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return uwTick;
 8003804:	4b03      	ldr	r3, [pc, #12]	@ (8003814 <HAL_GetTick+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	200004ec 	.word	0x200004ec

08003818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7ff ffee 	bl	8003800 <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003830:	d005      	beq.n	800383e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_Delay+0x44>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800383e:	bf00      	nop
 8003840:	f7ff ffde 	bl	8003800 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d8f7      	bhi.n	8003840 <HAL_Delay+0x28>
  {
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000010 	.word	0x20000010

08003860 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e033      	b.n	80038de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fdc0 	bl	8003404 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d118      	bne.n	80038d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038a6:	f023 0302 	bic.w	r3, r3, #2
 80038aa:	f043 0202 	orr.w	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fbf8 	bl	80040a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	f043 0201 	orr.w	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80038ce:	e001      	b.n	80038d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_Start+0x1a>
 80038fe:	2302      	movs	r3, #2
 8003900:	e097      	b.n	8003a32 <HAL_ADC_Start+0x14a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d018      	beq.n	800394a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003928:	4b45      	ldr	r3, [pc, #276]	@ (8003a40 <HAL_ADC_Start+0x158>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a45      	ldr	r2, [pc, #276]	@ (8003a44 <HAL_ADC_Start+0x15c>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9a      	lsrs	r2, r3, #18
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800393c:	e002      	b.n	8003944 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3b01      	subs	r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f9      	bne.n	800393e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d15f      	bne.n	8003a18 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003982:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003996:	d106      	bne.n	80039a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399c:	f023 0206 	bic.w	r2, r3, #6
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	645a      	str	r2, [r3, #68]	@ 0x44
 80039a4:	e002      	b.n	80039ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b4:	4b24      	ldr	r3, [pc, #144]	@ (8003a48 <HAL_ADC_Start+0x160>)
 80039b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80039c0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d129      	bne.n	8003a30 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	e020      	b.n	8003a30 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <HAL_ADC_Start+0x164>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d11b      	bne.n	8003a30 <HAL_ADC_Start+0x148>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d114      	bne.n	8003a30 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	e00b      	b.n	8003a30 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	f043 0210 	orr.w	r2, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000008 	.word	0x20000008
 8003a44:	431bde83 	.word	0x431bde83
 8003a48:	40012300 	.word	0x40012300
 8003a4c:	40012000 	.word	0x40012000

08003a50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_Stop+0x16>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e021      	b.n	8003aaa <HAL_ADC_Stop+0x5a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	f043 0201 	orr.w	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad2:	d113      	bne.n	8003afc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae2:	d10b      	bne.n	8003afc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e063      	b.n	8003bc4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003afc:	f7ff fe80 	bl	8003800 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b02:	e021      	b.n	8003b48 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b0a:	d01d      	beq.n	8003b48 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_ADC_PollForConversion+0x6c>
 8003b12:	f7ff fe75 	bl	8003800 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d212      	bcs.n	8003b48 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d00b      	beq.n	8003b48 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e03d      	b.n	8003bc4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d1d6      	bne.n	8003b04 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f06f 0212 	mvn.w	r2, #18
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d123      	bne.n	8003bc2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11f      	bne.n	8003bc2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d111      	bne.n	8003bc2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f043 0201 	orr.w	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d049      	beq.n	8003c96 <HAL_ADC_IRQHandler+0xca>
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d046      	beq.n	8003c96 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d12b      	bne.n	8003c86 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d127      	bne.n	8003c86 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d119      	bne.n	8003c86 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0220 	bic.w	r2, r2, #32
 8003c60:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8bd 	bl	8003e06 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0212 	mvn.w	r2, #18
 8003c94:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d057      	beq.n	8003d5c <HAL_ADC_IRQHandler+0x190>
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d054      	beq.n	8003d5c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d139      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d12b      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d124      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11d      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d119      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d26:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 faa7 	bl	80042a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f06f 020c 	mvn.w	r2, #12
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d017      	beq.n	8003da2 <HAL_ADC_IRQHandler+0x1d6>
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d014      	beq.n	8003da2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10d      	bne.n	8003da2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f841 	bl	8003e1a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0201 	mvn.w	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003db0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_ADC_IRQHandler+0x218>
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d012      	beq.n	8003de4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f043 0202 	orr.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f06f 0220 	mvn.w	r2, #32
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f82a 	bl	8003e2e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0220 	mvn.w	r2, #32
 8003de2:	601a      	str	r2, [r3, #0]
  }
}
 8003de4:	bf00      	nop
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x1c>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e113      	b.n	8004088 <HAL_ADC_ConfigChannel+0x244>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b09      	cmp	r3, #9
 8003e6e:	d925      	bls.n	8003ebc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68d9      	ldr	r1, [r3, #12]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	3b1e      	subs	r3, #30
 8003e86:	2207      	movs	r2, #7
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	400a      	ands	r2, r1
 8003e94:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68d9      	ldr	r1, [r3, #12]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4403      	add	r3, r0
 8003eae:	3b1e      	subs	r3, #30
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	e022      	b.n	8003f02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6919      	ldr	r1, [r3, #16]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	400a      	ands	r2, r1
 8003ede:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6919      	ldr	r1, [r3, #16]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4403      	add	r3, r0
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b06      	cmp	r3, #6
 8003f08:	d824      	bhi.n	8003f54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	3b05      	subs	r3, #5
 8003f1c:	221f      	movs	r2, #31
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43da      	mvns	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	400a      	ands	r2, r1
 8003f2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4618      	mov	r0, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	3b05      	subs	r3, #5
 8003f46:	fa00 f203 	lsl.w	r2, r0, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f52:	e04c      	b.n	8003fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	d824      	bhi.n	8003fa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3b23      	subs	r3, #35	@ 0x23
 8003f6e:	221f      	movs	r2, #31
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43da      	mvns	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	3b23      	subs	r3, #35	@ 0x23
 8003f98:	fa00 f203 	lsl.w	r2, r0, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fa4:	e023      	b.n	8003fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3b41      	subs	r3, #65	@ 0x41
 8003fb8:	221f      	movs	r2, #31
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	3b41      	subs	r3, #65	@ 0x41
 8003fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fee:	4b29      	ldr	r3, [pc, #164]	@ (8004094 <HAL_ADC_ConfigChannel+0x250>)
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a28      	ldr	r2, [pc, #160]	@ (8004098 <HAL_ADC_ConfigChannel+0x254>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d10f      	bne.n	800401c <HAL_ADC_ConfigChannel+0x1d8>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b12      	cmp	r3, #18
 8004002:	d10b      	bne.n	800401c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <HAL_ADC_ConfigChannel+0x254>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d12b      	bne.n	800407e <HAL_ADC_ConfigChannel+0x23a>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1c      	ldr	r2, [pc, #112]	@ (800409c <HAL_ADC_ConfigChannel+0x258>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <HAL_ADC_ConfigChannel+0x1f4>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b11      	cmp	r3, #17
 8004036:	d122      	bne.n	800407e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a11      	ldr	r2, [pc, #68]	@ (800409c <HAL_ADC_ConfigChannel+0x258>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d111      	bne.n	800407e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800405a:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <HAL_ADC_ConfigChannel+0x25c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a11      	ldr	r2, [pc, #68]	@ (80040a4 <HAL_ADC_ConfigChannel+0x260>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	0c9a      	lsrs	r2, r3, #18
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004070:	e002      	b.n	8004078 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	3b01      	subs	r3, #1
 8004076:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f9      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40012300 	.word	0x40012300
 8004098:	40012000 	.word	0x40012000
 800409c:	10000012 	.word	0x10000012
 80040a0:	20000008 	.word	0x20000008
 80040a4:	431bde83 	.word	0x431bde83

080040a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040b0:	4b79      	ldr	r3, [pc, #484]	@ (8004298 <ADC_Init+0x1f0>)
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	021a      	lsls	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6899      	ldr	r1, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413a:	4a58      	ldr	r2, [pc, #352]	@ (800429c <ADC_Init+0x1f4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d022      	beq.n	8004186 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800414e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6899      	ldr	r1, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	e00f      	b.n	80041a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0202 	bic.w	r2, r2, #2
 80041b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6899      	ldr	r1, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7e1b      	ldrb	r3, [r3, #24]
 80041c0:	005a      	lsls	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80041f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	3b01      	subs	r3, #1
 8004200:	035a      	lsls	r2, r3, #13
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	e007      	b.n	800421c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800421a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	3b01      	subs	r3, #1
 8004238:	051a      	lsls	r2, r3, #20
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6899      	ldr	r1, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800425e:	025a      	lsls	r2, r3, #9
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6899      	ldr	r1, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	029a      	lsls	r2, r3, #10
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40012300 	.word	0x40012300
 800429c:	0f000001 	.word	0x0f000001

080042a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <__NVIC_SetPriorityGrouping+0x44>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042d0:	4013      	ands	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042e6:	4a04      	ldr	r2, [pc, #16]	@ (80042f8 <__NVIC_SetPriorityGrouping+0x44>)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	60d3      	str	r3, [r2, #12]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004300:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <__NVIC_GetPriorityGrouping+0x18>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	f003 0307 	and.w	r3, r3, #7
}
 800430a:	4618      	mov	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	2b00      	cmp	r3, #0
 8004328:	db0b      	blt.n	8004342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	f003 021f 	and.w	r2, r3, #31
 8004330:	4907      	ldr	r1, [pc, #28]	@ (8004350 <__NVIC_EnableIRQ+0x38>)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2001      	movs	r0, #1
 800433a:	fa00 f202 	lsl.w	r2, r0, r2
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e000e100 	.word	0xe000e100

08004354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	db0a      	blt.n	800437e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	490c      	ldr	r1, [pc, #48]	@ (80043a0 <__NVIC_SetPriority+0x4c>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	440b      	add	r3, r1
 8004378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800437c:	e00a      	b.n	8004394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4908      	ldr	r1, [pc, #32]	@ (80043a4 <__NVIC_SetPriority+0x50>)
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	3b04      	subs	r3, #4
 800438c:	0112      	lsls	r2, r2, #4
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	440b      	add	r3, r1
 8004392:	761a      	strb	r2, [r3, #24]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000e100 	.word	0xe000e100
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	@ 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f1c3 0307 	rsb	r3, r3, #7
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	bf28      	it	cs
 80043c6:	2304      	movcs	r3, #4
 80043c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d902      	bls.n	80043d8 <NVIC_EncodePriority+0x30>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3b03      	subs	r3, #3
 80043d6:	e000      	b.n	80043da <NVIC_EncodePriority+0x32>
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43da      	mvns	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	401a      	ands	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	43d9      	mvns	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004400:	4313      	orrs	r3, r2
         );
}
 8004402:	4618      	mov	r0, r3
 8004404:	3724      	adds	r7, #36	@ 0x24
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004420:	d301      	bcc.n	8004426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004422:	2301      	movs	r3, #1
 8004424:	e00f      	b.n	8004446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004426:	4a0a      	ldr	r2, [pc, #40]	@ (8004450 <SysTick_Config+0x40>)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3b01      	subs	r3, #1
 800442c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800442e:	210f      	movs	r1, #15
 8004430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004434:	f7ff ff8e 	bl	8004354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004438:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <SysTick_Config+0x40>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800443e:	4b04      	ldr	r3, [pc, #16]	@ (8004450 <SysTick_Config+0x40>)
 8004440:	2207      	movs	r2, #7
 8004442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	e000e010 	.word	0xe000e010

08004454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff29 	bl	80042b4 <__NVIC_SetPriorityGrouping>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800447c:	f7ff ff3e 	bl	80042fc <__NVIC_GetPriorityGrouping>
 8004480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	6978      	ldr	r0, [r7, #20]
 8004488:	f7ff ff8e 	bl	80043a8 <NVIC_EncodePriority>
 800448c:	4602      	mov	r2, r0
 800448e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ff5d 	bl	8004354 <__NVIC_SetPriority>
}
 800449a:	bf00      	nop
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	4603      	mov	r3, r0
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff31 	bl	8004318 <__NVIC_EnableIRQ>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff ffa2 	bl	8004410 <SysTick_Config>
 80044cc:	4603      	mov	r3, r0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d004      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2280      	movs	r2, #128	@ 0x80
 80044ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e00c      	b.n	800450e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2205      	movs	r2, #5
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004528:	b2db      	uxtb	r3, r3
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	@ 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e159      	b.n	8004808 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004554:	2201      	movs	r2, #1
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	429a      	cmp	r2, r3
 800456e:	f040 8148 	bne.w	8004802 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d005      	beq.n	800458a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004586:	2b02      	cmp	r3, #2
 8004588:	d130      	bne.n	80045ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	2203      	movs	r2, #3
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045c0:	2201      	movs	r2, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 0201 	and.w	r2, r3, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d017      	beq.n	8004628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	2203      	movs	r2, #3
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d123      	bne.n	800467c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	08da      	lsrs	r2, r3, #3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3208      	adds	r2, #8
 800463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	220f      	movs	r2, #15
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	08da      	lsrs	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3208      	adds	r2, #8
 8004676:	69b9      	ldr	r1, [r7, #24]
 8004678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	2203      	movs	r2, #3
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0203 	and.w	r2, r3, #3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80a2 	beq.w	8004802 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b57      	ldr	r3, [pc, #348]	@ (8004820 <HAL_GPIO_Init+0x2e8>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c6:	4a56      	ldr	r2, [pc, #344]	@ (8004820 <HAL_GPIO_Init+0x2e8>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ce:	4b54      	ldr	r3, [pc, #336]	@ (8004820 <HAL_GPIO_Init+0x2e8>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046da:	4a52      	ldr	r2, [pc, #328]	@ (8004824 <HAL_GPIO_Init+0x2ec>)
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	3302      	adds	r3, #2
 80046e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	220f      	movs	r2, #15
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a49      	ldr	r2, [pc, #292]	@ (8004828 <HAL_GPIO_Init+0x2f0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d019      	beq.n	800473a <HAL_GPIO_Init+0x202>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a48      	ldr	r2, [pc, #288]	@ (800482c <HAL_GPIO_Init+0x2f4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_GPIO_Init+0x1fe>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a47      	ldr	r2, [pc, #284]	@ (8004830 <HAL_GPIO_Init+0x2f8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00d      	beq.n	8004732 <HAL_GPIO_Init+0x1fa>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a46      	ldr	r2, [pc, #280]	@ (8004834 <HAL_GPIO_Init+0x2fc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <HAL_GPIO_Init+0x1f6>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a45      	ldr	r2, [pc, #276]	@ (8004838 <HAL_GPIO_Init+0x300>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_GPIO_Init+0x1f2>
 8004726:	2304      	movs	r3, #4
 8004728:	e008      	b.n	800473c <HAL_GPIO_Init+0x204>
 800472a:	2307      	movs	r3, #7
 800472c:	e006      	b.n	800473c <HAL_GPIO_Init+0x204>
 800472e:	2303      	movs	r3, #3
 8004730:	e004      	b.n	800473c <HAL_GPIO_Init+0x204>
 8004732:	2302      	movs	r3, #2
 8004734:	e002      	b.n	800473c <HAL_GPIO_Init+0x204>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_GPIO_Init+0x204>
 800473a:	2300      	movs	r3, #0
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	f002 0203 	and.w	r2, r2, #3
 8004742:	0092      	lsls	r2, r2, #2
 8004744:	4093      	lsls	r3, r2
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800474c:	4935      	ldr	r1, [pc, #212]	@ (8004824 <HAL_GPIO_Init+0x2ec>)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	3302      	adds	r3, #2
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800475a:	4b38      	ldr	r3, [pc, #224]	@ (800483c <HAL_GPIO_Init+0x304>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800477e:	4a2f      	ldr	r2, [pc, #188]	@ (800483c <HAL_GPIO_Init+0x304>)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004784:	4b2d      	ldr	r3, [pc, #180]	@ (800483c <HAL_GPIO_Init+0x304>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047a8:	4a24      	ldr	r2, [pc, #144]	@ (800483c <HAL_GPIO_Init+0x304>)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ae:	4b23      	ldr	r3, [pc, #140]	@ (800483c <HAL_GPIO_Init+0x304>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047d2:	4a1a      	ldr	r2, [pc, #104]	@ (800483c <HAL_GPIO_Init+0x304>)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047d8:	4b18      	ldr	r3, [pc, #96]	@ (800483c <HAL_GPIO_Init+0x304>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047fc:	4a0f      	ldr	r2, [pc, #60]	@ (800483c <HAL_GPIO_Init+0x304>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3301      	adds	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2b0f      	cmp	r3, #15
 800480c:	f67f aea2 	bls.w	8004554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	3724      	adds	r7, #36	@ 0x24
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	40013800 	.word	0x40013800
 8004828:	40020000 	.word	0x40020000
 800482c:	40020400 	.word	0x40020400
 8004830:	40020800 	.word	0x40020800
 8004834:	40020c00 	.word	0x40020c00
 8004838:	40021000 	.word	0x40021000
 800483c:	40013c00 	.word	0x40013c00

08004840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e001      	b.n	8004862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4013      	ands	r3, r2
 8004888:	041a      	lsls	r2, r3, #16
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43d9      	mvns	r1, r3
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	400b      	ands	r3, r1
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	619a      	str	r2, [r3, #24]
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e12b      	b.n	8004b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fe fde6 	bl	800349c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2224      	movs	r2, #36	@ 0x24
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004908:	f003 f90a 	bl	8007b20 <HAL_RCC_GetPCLK1Freq>
 800490c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4a81      	ldr	r2, [pc, #516]	@ (8004b18 <HAL_I2C_Init+0x274>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d807      	bhi.n	8004928 <HAL_I2C_Init+0x84>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a80      	ldr	r2, [pc, #512]	@ (8004b1c <HAL_I2C_Init+0x278>)
 800491c:	4293      	cmp	r3, r2
 800491e:	bf94      	ite	ls
 8004920:	2301      	movls	r3, #1
 8004922:	2300      	movhi	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e006      	b.n	8004936 <HAL_I2C_Init+0x92>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a7d      	ldr	r2, [pc, #500]	@ (8004b20 <HAL_I2C_Init+0x27c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	bf94      	ite	ls
 8004930:	2301      	movls	r3, #1
 8004932:	2300      	movhi	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0e7      	b.n	8004b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a78      	ldr	r2, [pc, #480]	@ (8004b24 <HAL_I2C_Init+0x280>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0c9b      	lsrs	r3, r3, #18
 8004948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b18 <HAL_I2C_Init+0x274>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d802      	bhi.n	8004978 <HAL_I2C_Init+0xd4>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3301      	adds	r3, #1
 8004976:	e009      	b.n	800498c <HAL_I2C_Init+0xe8>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	4a69      	ldr	r2, [pc, #420]	@ (8004b28 <HAL_I2C_Init+0x284>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	3301      	adds	r3, #1
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	430b      	orrs	r3, r1
 8004992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800499e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	495c      	ldr	r1, [pc, #368]	@ (8004b18 <HAL_I2C_Init+0x274>)
 80049a8:	428b      	cmp	r3, r1
 80049aa:	d819      	bhi.n	80049e0 <HAL_I2C_Init+0x13c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1e59      	subs	r1, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ba:	1c59      	adds	r1, r3, #1
 80049bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049c0:	400b      	ands	r3, r1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_I2C_Init+0x138>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1e59      	subs	r1, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d4:	3301      	adds	r3, #1
 80049d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049da:	e051      	b.n	8004a80 <HAL_I2C_Init+0x1dc>
 80049dc:	2304      	movs	r3, #4
 80049de:	e04f      	b.n	8004a80 <HAL_I2C_Init+0x1dc>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d111      	bne.n	8004a0c <HAL_I2C_Init+0x168>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1e58      	subs	r0, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	440b      	add	r3, r1
 80049f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049fa:	3301      	adds	r3, #1
 80049fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e012      	b.n	8004a32 <HAL_I2C_Init+0x18e>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1e58      	subs	r0, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	0099      	lsls	r1, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a22:	3301      	adds	r3, #1
 8004a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Init+0x196>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e022      	b.n	8004a80 <HAL_I2C_Init+0x1dc>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10e      	bne.n	8004a60 <HAL_I2C_Init+0x1bc>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1e58      	subs	r0, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	440b      	add	r3, r1
 8004a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a5e:	e00f      	b.n	8004a80 <HAL_I2C_Init+0x1dc>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1e58      	subs	r0, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6859      	ldr	r1, [r3, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	0099      	lsls	r1, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a76:	3301      	adds	r3, #1
 8004a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	6809      	ldr	r1, [r1, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69da      	ldr	r2, [r3, #28]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004aae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6911      	ldr	r1, [r2, #16]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68d2      	ldr	r2, [r2, #12]
 8004aba:	4311      	orrs	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	000186a0 	.word	0x000186a0
 8004b1c:	001e847f 	.word	0x001e847f
 8004b20:	003d08ff 	.word	0x003d08ff
 8004b24:	431bde83 	.word	0x431bde83
 8004b28:	10624dd3 	.word	0x10624dd3

08004b2c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3e:	2b80      	cmp	r3, #128	@ 0x80
 8004b40:	d103      	bne.n	8004b4a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	611a      	str	r2, [r3, #16]
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	817b      	strh	r3, [r7, #10]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	813b      	strh	r3, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b72:	f7fe fe45 	bl	8003800 <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	f040 80d9 	bne.w	8004d38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2319      	movs	r3, #25
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	496d      	ldr	r1, [pc, #436]	@ (8004d44 <HAL_I2C_Mem_Write+0x1ec>)
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f002 f911 	bl	8006db8 <I2C_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e0cc      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_I2C_Mem_Write+0x56>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e0c5      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d007      	beq.n	8004bd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2221      	movs	r2, #33	@ 0x21
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2240      	movs	r2, #64	@ 0x40
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a3a      	ldr	r2, [r7, #32]
 8004bfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a4d      	ldr	r2, [pc, #308]	@ (8004d48 <HAL_I2C_Mem_Write+0x1f0>)
 8004c14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c16:	88f8      	ldrh	r0, [r7, #6]
 8004c18:	893a      	ldrh	r2, [r7, #8]
 8004c1a:	8979      	ldrh	r1, [r7, #10]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4603      	mov	r3, r0
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f001 fea0 	bl	800696c <I2C_RequestMemoryWrite>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d052      	beq.n	8004cd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e081      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f002 f9d6 	bl	8006fec <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06b      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_I2C_Mem_Write+0x180>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1aa      	bne.n	8004c36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f002 f9c9 	bl	800707c <I2C_WaitOnBTFFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d107      	bne.n	8004d08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e016      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e000      	b.n	8004d3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	00100002 	.word	0x00100002
 8004d48:	ffff0000 	.word	0xffff0000

08004d4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	@ 0x30
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	817b      	strh	r3, [r7, #10]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	813b      	strh	r3, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d66:	f7fe fd4b 	bl	8003800 <HAL_GetTick>
 8004d6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	f040 8214 	bne.w	80051a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2319      	movs	r3, #25
 8004d80:	2201      	movs	r2, #1
 8004d82:	497b      	ldr	r1, [pc, #492]	@ (8004f70 <HAL_I2C_Mem_Read+0x224>)
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f002 f817 	bl	8006db8 <I2C_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
 8004d92:	e207      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_I2C_Mem_Read+0x56>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e200      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d007      	beq.n	8004dc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2222      	movs	r2, #34	@ 0x22
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2240      	movs	r2, #64	@ 0x40
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a5b      	ldr	r2, [pc, #364]	@ (8004f74 <HAL_I2C_Mem_Read+0x228>)
 8004e08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e0a:	88f8      	ldrh	r0, [r7, #6]
 8004e0c:	893a      	ldrh	r2, [r7, #8]
 8004e0e:	8979      	ldrh	r1, [r7, #10]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4603      	mov	r3, r0
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f001 fe3c 	bl	8006a98 <I2C_RequestMemoryRead>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e1bc      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d113      	bne.n	8004e5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e32:	2300      	movs	r3, #0
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e190      	b.n	800517c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d11b      	bne.n	8004e9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e170      	b.n	800517c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d11b      	bne.n	8004eda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	e150      	b.n	800517c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ef0:	e144      	b.n	800517c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	f200 80f1 	bhi.w	80050de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d123      	bne.n	8004f4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f002 f931 	bl	8007170 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e145      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f4a:	e117      	b.n	800517c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d14e      	bne.n	8004ff2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4906      	ldr	r1, [pc, #24]	@ (8004f78 <HAL_I2C_Mem_Read+0x22c>)
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f001 ff2a 	bl	8006db8 <I2C_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e11a      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
 8004f6e:	bf00      	nop
 8004f70:	00100002 	.word	0x00100002
 8004f74:	ffff0000 	.word	0xffff0000
 8004f78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ff0:	e0c4      	b.n	800517c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	496c      	ldr	r1, [pc, #432]	@ (80051ac <HAL_I2C_Mem_Read+0x460>)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f001 fedb 	bl	8006db8 <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0cb      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800501a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	2200      	movs	r2, #0
 8005056:	4955      	ldr	r1, [pc, #340]	@ (80051ac <HAL_I2C_Mem_Read+0x460>)
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f001 fead 	bl	8006db8 <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e09d      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050dc:	e04e      	b.n	800517c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f002 f844 	bl	8007170 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e058      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d124      	bne.n	800517c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005136:	2b03      	cmp	r3, #3
 8005138:	d107      	bne.n	800514a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005148:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	f47f aeb6 	bne.w	8004ef2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	e000      	b.n	80051a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
  }
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3728      	adds	r7, #40	@ 0x28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	00010004 	.word	0x00010004

080051b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d003      	beq.n	80051e8 <HAL_I2C_EV_IRQHandler+0x38>
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b40      	cmp	r3, #64	@ 0x40
 80051e4:	f040 80b1 	bne.w	800534a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10d      	bne.n	800521e <HAL_I2C_EV_IRQHandler+0x6e>
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005208:	d003      	beq.n	8005212 <HAL_I2C_EV_IRQHandler+0x62>
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005210:	d101      	bne.n	8005216 <HAL_I2C_EV_IRQHandler+0x66>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_I2C_EV_IRQHandler+0x68>
 8005216:	2300      	movs	r3, #0
 8005218:	2b01      	cmp	r3, #1
 800521a:	f000 8114 	beq.w	8005446 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_I2C_EV_IRQHandler+0x90>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f002 f828 	bl	8007288 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fd7a 	bl	8005d32 <I2C_Master_SB>
 800523e:	e083      	b.n	8005348 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_I2C_EV_IRQHandler+0xac>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fdf2 	bl	8005e3e <I2C_Master_ADD10>
 800525a:	e075      	b.n	8005348 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_I2C_EV_IRQHandler+0xc8>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fe0e 	bl	8005e92 <I2C_Master_ADDR>
 8005276:	e067      	b.n	8005348 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d036      	beq.n	80052f0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800528c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005290:	f000 80db 	beq.w	800544a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00d      	beq.n	80052ba <HAL_I2C_EV_IRQHandler+0x10a>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_I2C_EV_IRQHandler+0x10a>
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f9d6 	bl	8005664 <I2C_MasterTransmit_TXE>
 80052b8:	e046      	b.n	8005348 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80c2 	beq.w	800544a <HAL_I2C_EV_IRQHandler+0x29a>
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80bc 	beq.w	800544a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052d2:	7bbb      	ldrb	r3, [r7, #14]
 80052d4:	2b21      	cmp	r3, #33	@ 0x21
 80052d6:	d103      	bne.n	80052e0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fa5f 	bl	800579c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052de:	e0b4      	b.n	800544a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b40      	cmp	r3, #64	@ 0x40
 80052e4:	f040 80b1 	bne.w	800544a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 facd 	bl	8005888 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ee:	e0ac      	b.n	800544a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052fe:	f000 80a4 	beq.w	800544a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00d      	beq.n	8005328 <HAL_I2C_EV_IRQHandler+0x178>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_I2C_EV_IRQHandler+0x178>
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d103      	bne.n	8005328 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fb49 	bl	80059b8 <I2C_MasterReceive_RXNE>
 8005326:	e00f      	b.n	8005348 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 808b 	beq.w	800544a <HAL_I2C_EV_IRQHandler+0x29a>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8085 	beq.w	800544a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fc01 	bl	8005b48 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005346:	e080      	b.n	800544a <HAL_I2C_EV_IRQHandler+0x29a>
 8005348:	e07f      	b.n	800544a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	e007      	b.n	800536c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d011      	beq.n	800539a <HAL_I2C_EV_IRQHandler+0x1ea>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00c      	beq.n	800539a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005390:	69b9      	ldr	r1, [r7, #24]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 ffcc 	bl	8006330 <I2C_Slave_ADDR>
 8005398:	e05a      	b.n	8005450 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_I2C_EV_IRQHandler+0x206>
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 f806 	bl	80063c0 <I2C_Slave_STOPF>
 80053b4:	e04c      	b.n	8005450 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053b6:	7bbb      	ldrb	r3, [r7, #14]
 80053b8:	2b21      	cmp	r3, #33	@ 0x21
 80053ba:	d002      	beq.n	80053c2 <HAL_I2C_EV_IRQHandler+0x212>
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	2b29      	cmp	r3, #41	@ 0x29
 80053c0:	d120      	bne.n	8005404 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <HAL_I2C_EV_IRQHandler+0x238>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_I2C_EV_IRQHandler+0x238>
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fee7 	bl	80061b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053e6:	e032      	b.n	800544e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d02d      	beq.n	800544e <HAL_I2C_EV_IRQHandler+0x29e>
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d028      	beq.n	800544e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 ff16 	bl	800622e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005402:	e024      	b.n	800544e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00d      	beq.n	800542a <HAL_I2C_EV_IRQHandler+0x27a>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_I2C_EV_IRQHandler+0x27a>
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 ff24 	bl	8006270 <I2C_SlaveReceive_RXNE>
 8005428:	e012      	b.n	8005450 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00d      	beq.n	8005450 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 ff54 	bl	80062ec <I2C_SlaveReceive_BTF>
 8005444:	e004      	b.n	8005450 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005446:	bf00      	nop
 8005448:	e002      	b.n	8005450 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800544a:	bf00      	nop
 800544c:	e000      	b.n	8005450 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800544e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b08a      	sub	sp, #40	@ 0x28
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005478:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <HAL_I2C_ER_IRQHandler+0x4a>
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800549e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <HAL_I2C_ER_IRQHandler+0x70>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	f043 0302 	orr.w	r3, r3, #2
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80054c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d03e      	beq.n	800554e <HAL_I2C_ER_IRQHandler+0xf8>
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d039      	beq.n	800554e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80054da:	7efb      	ldrb	r3, [r7, #27]
 80054dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80054f4:	7ebb      	ldrb	r3, [r7, #26]
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d112      	bne.n	8005520 <HAL_I2C_ER_IRQHandler+0xca>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10f      	bne.n	8005520 <HAL_I2C_ER_IRQHandler+0xca>
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	2b21      	cmp	r3, #33	@ 0x21
 8005504:	d008      	beq.n	8005518 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005506:	7cfb      	ldrb	r3, [r7, #19]
 8005508:	2b29      	cmp	r3, #41	@ 0x29
 800550a:	d005      	beq.n	8005518 <HAL_I2C_ER_IRQHandler+0xc2>
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	2b28      	cmp	r3, #40	@ 0x28
 8005510:	d106      	bne.n	8005520 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b21      	cmp	r3, #33	@ 0x21
 8005516:	d103      	bne.n	8005520 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f001 f881 	bl	8006620 <I2C_Slave_AF>
 800551e:	e016      	b.n	800554e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005528:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	f043 0304 	orr.w	r3, r3, #4
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005532:	7efb      	ldrb	r3, [r7, #27]
 8005534:	2b10      	cmp	r3, #16
 8005536:	d002      	beq.n	800553e <HAL_I2C_ER_IRQHandler+0xe8>
 8005538:	7efb      	ldrb	r3, [r7, #27]
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d107      	bne.n	800554e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800554c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <HAL_I2C_ER_IRQHandler+0x11e>
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	f043 0308 	orr.w	r3, r3, #8
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005572:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	2b00      	cmp	r3, #0
 8005578:	d008      	beq.n	800558c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f001 f8be 	bl	8006708 <I2C_ITError>
  }
}
 800558c:	bf00      	nop
 800558e:	3728      	adds	r7, #40	@ 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
 80055f0:	4613      	mov	r3, r2
 80055f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005672:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800567a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005680:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d150      	bne.n	800572c <I2C_MasterTransmit_TXE+0xc8>
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b21      	cmp	r3, #33	@ 0x21
 800568e:	d14d      	bne.n	800572c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b08      	cmp	r3, #8
 8005694:	d01d      	beq.n	80056d2 <I2C_MasterTransmit_TXE+0x6e>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b20      	cmp	r3, #32
 800569a:	d01a      	beq.n	80056d2 <I2C_MasterTransmit_TXE+0x6e>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056a2:	d016      	beq.n	80056d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2211      	movs	r2, #17
 80056b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff62 	bl	8005594 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056d0:	e060      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b40      	cmp	r3, #64	@ 0x40
 800570a:	d107      	bne.n	800571c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff7d 	bl	8005614 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800571a:	e03b      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff35 	bl	8005594 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800572a:	e033      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b21      	cmp	r3, #33	@ 0x21
 8005730:	d005      	beq.n	800573e <I2C_MasterTransmit_TXE+0xda>
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	2b40      	cmp	r3, #64	@ 0x40
 8005736:	d12d      	bne.n	8005794 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b22      	cmp	r3, #34	@ 0x22
 800573c:	d12a      	bne.n	8005794 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005756:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005758:	e01c      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b40      	cmp	r3, #64	@ 0x40
 8005764:	d103      	bne.n	800576e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f88e 	bl	8005888 <I2C_MemoryTransmit_TXE_BTF>
}
 800576c:	e012      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005792:	e7ff      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b21      	cmp	r3, #33	@ 0x21
 80057b4:	d164      	bne.n	8005880 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d012      	beq.n	80057e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80057e4:	e04c      	b.n	8005880 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d01d      	beq.n	8005828 <I2C_MasterTransmit_BTF+0x8c>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d01a      	beq.n	8005828 <I2C_MasterTransmit_BTF+0x8c>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057f8:	d016      	beq.n	8005828 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005808:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2211      	movs	r2, #17
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff feb7 	bl	8005594 <HAL_I2C_MasterTxCpltCallback>
}
 8005826:	e02b      	b.n	8005880 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005836:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005846:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b40      	cmp	r3, #64	@ 0x40
 8005860:	d107      	bne.n	8005872 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fed2 	bl	8005614 <HAL_I2C_MemTxCpltCallback>
}
 8005870:	e006      	b.n	8005880 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fe8a 	bl	8005594 <HAL_I2C_MasterTxCpltCallback>
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005896:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11d      	bne.n	80058dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d10b      	bne.n	80058c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b8:	1c9a      	adds	r2, r3, #2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80058be:	e077      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	121b      	asrs	r3, r3, #8
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058da:	e069      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10b      	bne.n	80058fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058fa:	e059      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005900:	2b02      	cmp	r3, #2
 8005902:	d152      	bne.n	80059aa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b22      	cmp	r3, #34	@ 0x22
 8005908:	d10d      	bne.n	8005926 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005918:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005924:	e044      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b21      	cmp	r3, #33	@ 0x21
 8005934:	d112      	bne.n	800595c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	781a      	ldrb	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800595a:	e029      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d124      	bne.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b21      	cmp	r3, #33	@ 0x21
 800596a:	d121      	bne.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800597a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800598a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff fe36 	bl	8005614 <HAL_I2C_MemTxCpltCallback>
}
 80059a8:	e002      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff f8be 	bl	8004b2c <I2C_Flush_DR>
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b22      	cmp	r3, #34	@ 0x22
 80059ca:	f040 80b9 	bne.w	8005b40 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d921      	bls.n	8005a26 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	f040 8096 	bne.w	8005b40 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a22:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005a24:	e08c      	b.n	8005b40 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d07f      	beq.n	8005b2e <I2C_MasterReceive_RXNE+0x176>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d002      	beq.n	8005a3a <I2C_MasterReceive_RXNE+0x82>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d179      	bne.n	8005b2e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 fb66 	bl	800710c <I2C_WaitOnSTOPRequestThroughIT>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d14c      	bne.n	8005ae0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a54:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a64:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b40      	cmp	r3, #64	@ 0x40
 8005a9e:	d10a      	bne.n	8005ab6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fdba 	bl	8005628 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ab4:	e044      	b.n	8005b40 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d002      	beq.n	8005aca <I2C_MasterReceive_RXNE+0x112>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d103      	bne.n	8005ad2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ad0:	e002      	b.n	8005ad8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2212      	movs	r2, #18
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff fd65 	bl	80055a8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ade:	e02f      	b.n	8005b40 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005aee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fd88 	bl	800563c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b2c:	e008      	b.n	8005b40 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b3c:	605a      	str	r2, [r3, #4]
}
 8005b3e:	e7ff      	b.n	8005b40 <I2C_MasterReceive_RXNE+0x188>
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b54:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d11b      	bne.n	8005b98 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b6e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005b96:	e0c8      	b.n	8005d2a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d129      	bne.n	8005bf6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d00a      	beq.n	8005bce <I2C_MasterReceive_BTF+0x86>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d007      	beq.n	8005bce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bcc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005bf4:	e099      	b.n	8005d2a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	f040 8081 	bne.w	8005d04 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d002      	beq.n	8005c0e <I2C_MasterReceive_BTF+0xc6>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b10      	cmp	r3, #16
 8005c0c:	d108      	bne.n	8005c20 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e019      	b.n	8005c54 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d002      	beq.n	8005c2c <I2C_MasterReceive_BTF+0xe4>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d108      	bne.n	8005c3e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e00a      	b.n	8005c54 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d007      	beq.n	8005c54 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c52:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005cae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b40      	cmp	r3, #64	@ 0x40
 8005cc2:	d10a      	bne.n	8005cda <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fca8 	bl	8005628 <HAL_I2C_MemRxCpltCallback>
}
 8005cd8:	e027      	b.n	8005d2a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d002      	beq.n	8005cee <I2C_MasterReceive_BTF+0x1a6>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d103      	bne.n	8005cf6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cf4:	e002      	b.n	8005cfc <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2212      	movs	r2, #18
 8005cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff fc53 	bl	80055a8 <HAL_I2C_MasterRxCpltCallback>
}
 8005d02:	e012      	b.n	8005d2a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d117      	bne.n	8005d76 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d5e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d60:	e067      	b.n	8005e32 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	611a      	str	r2, [r3, #16]
}
 8005d74:	e05d      	b.n	8005e32 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d7e:	d133      	bne.n	8005de8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b21      	cmp	r3, #33	@ 0x21
 8005d8a:	d109      	bne.n	8005da0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	e008      	b.n	8005db2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <I2C_Master_SB+0x92>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d108      	bne.n	8005dd6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d032      	beq.n	8005e32 <I2C_Master_SB+0x100>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d02d      	beq.n	8005e32 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005de4:	605a      	str	r2, [r3, #4]
}
 8005de6:	e024      	b.n	8005e32 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10e      	bne.n	8005e0e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	11db      	asrs	r3, r3, #7
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f003 0306 	and.w	r3, r3, #6
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f063 030f 	orn	r3, r3, #15
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	611a      	str	r2, [r3, #16]
}
 8005e0c:	e011      	b.n	8005e32 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d10d      	bne.n	8005e32 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	11db      	asrs	r3, r3, #7
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 0306 	and.w	r3, r3, #6
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f063 030e 	orn	r3, r3, #14
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	611a      	str	r2, [r3, #16]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <I2C_Master_ADD10+0x26>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d108      	bne.n	8005e76 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <I2C_Master_ADD10+0x48>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e84:	605a      	str	r2, [r3, #4]
  }
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b091      	sub	sp, #68	@ 0x44
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ea0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b22      	cmp	r3, #34	@ 0x22
 8005eba:	f040 8169 	bne.w	8006190 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10f      	bne.n	8005ee6 <I2C_Master_ADDR+0x54>
 8005ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005eca:	2b40      	cmp	r3, #64	@ 0x40
 8005ecc:	d10b      	bne.n	8005ee6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	e160      	b.n	80061a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d11d      	bne.n	8005f2a <I2C_Master_ADDR+0x98>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ef6:	d118      	bne.n	8005f2a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f1c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	651a      	str	r2, [r3, #80]	@ 0x50
 8005f28:	e13e      	b.n	80061a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d113      	bne.n	8005f5c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e115      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	f040 808a 	bne.w	800607c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f6e:	d137      	bne.n	8005fe0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f7e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f8e:	d113      	bne.n	8005fb8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f9e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	e0e7      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	623b      	str	r3, [r7, #32]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	623b      	str	r3, [r7, #32]
 8005fcc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e0d3      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d02e      	beq.n	8006044 <I2C_Master_ADDR+0x1b2>
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d02b      	beq.n	8006044 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fee:	2b12      	cmp	r3, #18
 8005ff0:	d102      	bne.n	8005ff8 <I2C_Master_ADDR+0x166>
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d125      	bne.n	8006044 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d00e      	beq.n	800601c <I2C_Master_ADDR+0x18a>
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	2b02      	cmp	r3, #2
 8006002:	d00b      	beq.n	800601c <I2C_Master_ADDR+0x18a>
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	2b10      	cmp	r3, #16
 8006008:	d008      	beq.n	800601c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e007      	b.n	800602c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800602a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	e0a1      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006052:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006054:	2300      	movs	r3, #0
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e085      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d14d      	bne.n	8006122 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006088:	2b04      	cmp	r3, #4
 800608a:	d016      	beq.n	80060ba <I2C_Master_ADDR+0x228>
 800608c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608e:	2b02      	cmp	r3, #2
 8006090:	d013      	beq.n	80060ba <I2C_Master_ADDR+0x228>
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	2b10      	cmp	r3, #16
 8006096:	d010      	beq.n	80060ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e007      	b.n	80060ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060d8:	d117      	bne.n	800610a <I2C_Master_ADDR+0x278>
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060e0:	d00b      	beq.n	80060fa <I2C_Master_ADDR+0x268>
 80060e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d008      	beq.n	80060fa <I2C_Master_ADDR+0x268>
 80060e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d005      	beq.n	80060fa <I2C_Master_ADDR+0x268>
 80060ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d002      	beq.n	80060fa <I2C_Master_ADDR+0x268>
 80060f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d107      	bne.n	800610a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006108:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	e032      	b.n	8006188 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006130:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800613c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006140:	d117      	bne.n	8006172 <I2C_Master_ADDR+0x2e0>
 8006142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006144:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006148:	d00b      	beq.n	8006162 <I2C_Master_ADDR+0x2d0>
 800614a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614c:	2b01      	cmp	r3, #1
 800614e:	d008      	beq.n	8006162 <I2C_Master_ADDR+0x2d0>
 8006150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006152:	2b08      	cmp	r3, #8
 8006154:	d005      	beq.n	8006162 <I2C_Master_ADDR+0x2d0>
 8006156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006158:	2b10      	cmp	r3, #16
 800615a:	d002      	beq.n	8006162 <I2C_Master_ADDR+0x2d0>
 800615c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615e:	2b20      	cmp	r3, #32
 8006160:	d107      	bne.n	8006172 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006170:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800618e:	e00b      	b.n	80061a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
}
 80061a6:	e7ff      	b.n	80061a8 <I2C_Master_ADDR+0x316>
 80061a8:	bf00      	nop
 80061aa:	3744      	adds	r7, #68	@ 0x44
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d02b      	beq.n	8006226 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d114      	bne.n	8006226 <I2C_SlaveTransmit_TXE+0x72>
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b29      	cmp	r3, #41	@ 0x29
 8006200:	d111      	bne.n	8006226 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006210:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2221      	movs	r2, #33	@ 0x21
 8006216:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2228      	movs	r2, #40	@ 0x28
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff f9cb 	bl	80055bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d011      	beq.n	8006264 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800627e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02c      	beq.n	80062e4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d114      	bne.n	80062e4 <I2C_SlaveReceive_RXNE+0x74>
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80062be:	d111      	bne.n	80062e4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2222      	movs	r2, #34	@ 0x22
 80062d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2228      	movs	r2, #40	@ 0x28
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff f976 	bl	80055d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d012      	beq.n	8006324 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800634a:	2b28      	cmp	r3, #40	@ 0x28
 800634c:	d125      	bne.n	800639a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800635c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	81bb      	strh	r3, [r7, #12]
 800637c:	e002      	b.n	8006384 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800638c:	89ba      	ldrh	r2, [r7, #12]
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff f926 	bl	80055e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006398:	e00e      	b.n	80063b8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80063de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80063e0:	2300      	movs	r3, #0
 80063e2:	60bb      	str	r3, [r7, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800640c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800641c:	d172      	bne.n	8006504 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b22      	cmp	r3, #34	@ 0x22
 8006422:	d002      	beq.n	800642a <I2C_Slave_STOPF+0x6a>
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	2b2a      	cmp	r3, #42	@ 0x2a
 8006428:	d135      	bne.n	8006496 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d005      	beq.n	800644e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f043 0204 	orr.w	r2, r3, #4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800645c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe f859 	bl	800451a <HAL_DMA_GetState>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d049      	beq.n	8006502 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006472:	4a69      	ldr	r2, [pc, #420]	@ (8006618 <I2C_Slave_STOPF+0x258>)
 8006474:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe f82b 	bl	80044d6 <HAL_DMA_Abort_IT>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d03d      	beq.n	8006502 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006494:	e035      	b.n	8006502 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	f043 0204 	orr.w	r2, r3, #4
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe f823 	bl	800451a <HAL_DMA_GetState>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d014      	beq.n	8006504 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064de:	4a4e      	ldr	r2, [pc, #312]	@ (8006618 <I2C_Slave_STOPF+0x258>)
 80064e0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fd fff5 	bl	80044d6 <HAL_DMA_Abort_IT>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064fc:	4610      	mov	r0, r2
 80064fe:	4798      	blx	r3
 8006500:	e000      	b.n	8006504 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006502:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d03e      	beq.n	800658c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b04      	cmp	r3, #4
 800651a:	d112      	bne.n	8006542 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	d112      	bne.n	8006576 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006584:	f043 0204 	orr.w	r2, r3, #4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f8b7 	bl	8006708 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800659a:	e039      	b.n	8006610 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a0:	d109      	bne.n	80065b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2228      	movs	r2, #40	@ 0x28
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff f80d 	bl	80055d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b28      	cmp	r3, #40	@ 0x28
 80065c0:	d111      	bne.n	80065e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a15      	ldr	r2, [pc, #84]	@ (800661c <I2C_Slave_STOPF+0x25c>)
 80065c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff f80e 	bl	8005600 <HAL_I2C_ListenCpltCallback>
}
 80065e4:	e014      	b.n	8006610 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ea:	2b22      	cmp	r3, #34	@ 0x22
 80065ec:	d002      	beq.n	80065f4 <I2C_Slave_STOPF+0x234>
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b22      	cmp	r3, #34	@ 0x22
 80065f2:	d10d      	bne.n	8006610 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fe ffe0 	bl	80055d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	08006c69 	.word	0x08006c69
 800661c:	ffff0000 	.word	0xffff0000

08006620 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800662e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d002      	beq.n	8006642 <I2C_Slave_AF+0x22>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b20      	cmp	r3, #32
 8006640:	d129      	bne.n	8006696 <I2C_Slave_AF+0x76>
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	2b28      	cmp	r3, #40	@ 0x28
 8006646:	d126      	bne.n	8006696 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a2e      	ldr	r2, [pc, #184]	@ (8006704 <I2C_Slave_AF+0xe4>)
 800664c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800665c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006666:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006676:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2220      	movs	r2, #32
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fe ffb6 	bl	8005600 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006694:	e031      	b.n	80066fa <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	2b21      	cmp	r3, #33	@ 0x21
 800669a:	d129      	bne.n	80066f0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a19      	ldr	r2, [pc, #100]	@ (8006704 <I2C_Slave_AF+0xe4>)
 80066a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2221      	movs	r2, #33	@ 0x21
 80066a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066d0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066e0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fe fa22 	bl	8004b2c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fe ff67 	bl	80055bc <HAL_I2C_SlaveTxCpltCallback>
}
 80066ee:	e004      	b.n	80066fa <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066f8:	615a      	str	r2, [r3, #20]
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	ffff0000 	.word	0xffff0000

08006708 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006716:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800671e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	2b10      	cmp	r3, #16
 8006724:	d002      	beq.n	800672c <I2C_ITError+0x24>
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	2b40      	cmp	r3, #64	@ 0x40
 800672a:	d10a      	bne.n	8006742 <I2C_ITError+0x3a>
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b22      	cmp	r3, #34	@ 0x22
 8006730:	d107      	bne.n	8006742 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006740:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006748:	2b28      	cmp	r3, #40	@ 0x28
 800674a:	d107      	bne.n	800675c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2228      	movs	r2, #40	@ 0x28
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800675a:	e015      	b.n	8006788 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006766:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800676a:	d00a      	beq.n	8006782 <I2C_ITError+0x7a>
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b60      	cmp	r3, #96	@ 0x60
 8006770:	d007      	beq.n	8006782 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006796:	d162      	bne.n	800685e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d020      	beq.n	80067f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ba:	4a6a      	ldr	r2, [pc, #424]	@ (8006964 <I2C_ITError+0x25c>)
 80067bc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd fe87 	bl	80044d6 <HAL_DMA_Abort_IT>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 8089 	beq.w	80068e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067f2:	4610      	mov	r0, r2
 80067f4:	4798      	blx	r3
 80067f6:	e074      	b.n	80068e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fc:	4a59      	ldr	r2, [pc, #356]	@ (8006964 <I2C_ITError+0x25c>)
 80067fe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006804:	4618      	mov	r0, r3
 8006806:	f7fd fe66 	bl	80044d6 <HAL_DMA_Abort_IT>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d068      	beq.n	80068e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681a:	2b40      	cmp	r3, #64	@ 0x40
 800681c:	d10b      	bne.n	8006836 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006858:	4610      	mov	r0, r2
 800685a:	4798      	blx	r3
 800685c:	e041      	b.n	80068e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b60      	cmp	r3, #96	@ 0x60
 8006868:	d125      	bne.n	80068b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006882:	2b40      	cmp	r3, #64	@ 0x40
 8006884:	d10b      	bne.n	800689e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fe fece 	bl	8005650 <HAL_I2C_AbortCpltCallback>
 80068b4:	e015      	b.n	80068e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c0:	2b40      	cmp	r3, #64	@ 0x40
 80068c2:	d10b      	bne.n	80068dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fe fead 	bl	800563c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10e      	bne.n	8006910 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800691e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006926:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b04      	cmp	r3, #4
 8006932:	d113      	bne.n	800695c <I2C_ITError+0x254>
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	2b28      	cmp	r3, #40	@ 0x28
 8006938:	d110      	bne.n	800695c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a0a      	ldr	r2, [pc, #40]	@ (8006968 <I2C_ITError+0x260>)
 800693e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fe fe52 	bl	8005600 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	08006c69 	.word	0x08006c69
 8006968:	ffff0000 	.word	0xffff0000

0800696c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	4608      	mov	r0, r1
 8006976:	4611      	mov	r1, r2
 8006978:	461a      	mov	r2, r3
 800697a:	4603      	mov	r3, r0
 800697c:	817b      	strh	r3, [r7, #10]
 800697e:	460b      	mov	r3, r1
 8006980:	813b      	strh	r3, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	2200      	movs	r2, #0
 800699e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 fa08 	bl	8006db8 <I2C_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00d      	beq.n	80069ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069bc:	d103      	bne.n	80069c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e05f      	b.n	8006a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069ca:	897b      	ldrh	r3, [r7, #10]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	492d      	ldr	r1, [pc, #180]	@ (8006a94 <I2C_RequestMemoryWrite+0x128>)
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fa63 	bl	8006eac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e04c      	b.n	8006a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a08:	6a39      	ldr	r1, [r7, #32]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 faee 	bl	8006fec <I2C_WaitOnTXEFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d107      	bne.n	8006a2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e02b      	b.n	8006a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d105      	bne.n	8006a44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a38:	893b      	ldrh	r3, [r7, #8]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	611a      	str	r2, [r3, #16]
 8006a42:	e021      	b.n	8006a88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a44:	893b      	ldrh	r3, [r7, #8]
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a54:	6a39      	ldr	r1, [r7, #32]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fac8 	bl	8006fec <I2C_WaitOnTXEFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d107      	bne.n	8006a7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e005      	b.n	8006a8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a7e:	893b      	ldrh	r3, [r7, #8]
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	00010002 	.word	0x00010002

08006a98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	817b      	strh	r3, [r7, #10]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	813b      	strh	r3, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f96a 	bl	8006db8 <I2C_WaitOnFlagUntilTimeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00d      	beq.n	8006b06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af8:	d103      	bne.n	8006b02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e0aa      	b.n	8006c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b06:	897b      	ldrh	r3, [r7, #10]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	6a3a      	ldr	r2, [r7, #32]
 8006b1a:	4952      	ldr	r1, [pc, #328]	@ (8006c64 <I2C_RequestMemoryRead+0x1cc>)
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f9c5 	bl	8006eac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e097      	b.n	8006c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b44:	6a39      	ldr	r1, [r7, #32]
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 fa50 	bl	8006fec <I2C_WaitOnTXEFlagUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00d      	beq.n	8006b6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d107      	bne.n	8006b6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e076      	b.n	8006c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d105      	bne.n	8006b80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b74:	893b      	ldrh	r3, [r7, #8]
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	611a      	str	r2, [r3, #16]
 8006b7e:	e021      	b.n	8006bc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b80:	893b      	ldrh	r3, [r7, #8]
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b90:	6a39      	ldr	r1, [r7, #32]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fa2a 	bl	8006fec <I2C_WaitOnTXEFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00d      	beq.n	8006bba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d107      	bne.n	8006bb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e050      	b.n	8006c5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bba:	893b      	ldrh	r3, [r7, #8]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc6:	6a39      	ldr	r1, [r7, #32]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fa0f 	bl	8006fec <I2C_WaitOnTXEFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d107      	bne.n	8006bec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e035      	b.n	8006c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f8d3 	bl	8006db8 <I2C_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00d      	beq.n	8006c34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c26:	d103      	bne.n	8006c30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e013      	b.n	8006c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c34:	897b      	ldrh	r3, [r7, #10]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	6a3a      	ldr	r2, [r7, #32]
 8006c48:	4906      	ldr	r1, [pc, #24]	@ (8006c64 <I2C_RequestMemoryRead+0x1cc>)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f92e 	bl	8006eac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	00010002 	.word	0x00010002

08006c68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c82:	4b4b      	ldr	r3, [pc, #300]	@ (8006db0 <I2C_DMAAbort+0x148>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	08db      	lsrs	r3, r3, #3
 8006c88:	4a4a      	ldr	r2, [pc, #296]	@ (8006db4 <I2C_DMAAbort+0x14c>)
 8006c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8e:	0a1a      	lsrs	r2, r3, #8
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	00da      	lsls	r2, r3, #3
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	f043 0220 	orr.w	r2, r3, #32
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006cae:	e00a      	b.n	8006cc6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cc4:	d0ea      	beq.n	8006c9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cf4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d08:	2200      	movs	r2, #0
 8006d0a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	2200      	movs	r2, #0
 8006d1a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b60      	cmp	r3, #96	@ 0x60
 8006d36:	d10e      	bne.n	8006d56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f7fe fc7e 	bl	8005650 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d54:	e027      	b.n	8006da6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d56:	7cfb      	ldrb	r3, [r7, #19]
 8006d58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d5c:	2b28      	cmp	r3, #40	@ 0x28
 8006d5e:	d117      	bne.n	8006d90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2200      	movs	r2, #0
 8006d84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2228      	movs	r2, #40	@ 0x28
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d8e:	e007      	b.n	8006da0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006da0:	6978      	ldr	r0, [r7, #20]
 8006da2:	f7fe fc4b 	bl	800563c <HAL_I2C_ErrorCallback>
}
 8006da6:	bf00      	nop
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000008 	.word	0x20000008
 8006db4:	14f8b589 	.word	0x14f8b589

08006db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dc8:	e048      	b.n	8006e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dd0:	d044      	beq.n	8006e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fc fd15 	bl	8003800 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d139      	bne.n	8006e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	0c1b      	lsrs	r3, r3, #16
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d10d      	bne.n	8006e0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	e00c      	b.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	43da      	mvns	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d116      	bne.n	8006e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e48:	f043 0220 	orr.w	r2, r3, #32
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e023      	b.n	8006ea4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	0c1b      	lsrs	r3, r3, #16
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d10d      	bne.n	8006e82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	43da      	mvns	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4013      	ands	r3, r2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	e00c      	b.n	8006e9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	43da      	mvns	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bf0c      	ite	eq
 8006e94:	2301      	moveq	r3, #1
 8006e96:	2300      	movne	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d093      	beq.n	8006dca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006eba:	e071      	b.n	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eca:	d123      	bne.n	8006f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ee4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f00:	f043 0204 	orr.w	r2, r3, #4
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e067      	b.n	8006fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f1a:	d041      	beq.n	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1c:	f7fc fc70 	bl	8003800 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d302      	bcc.n	8006f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d136      	bne.n	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	0c1b      	lsrs	r3, r3, #16
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d10c      	bne.n	8006f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	43da      	mvns	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4013      	ands	r3, r2
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	e00b      	b.n	8006f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	43da      	mvns	r2, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4013      	ands	r3, r2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bf14      	ite	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2300      	moveq	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d016      	beq.n	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8c:	f043 0220 	orr.w	r2, r3, #32
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e021      	b.n	8006fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d10c      	bne.n	8006fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	43da      	mvns	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf14      	ite	ne
 8006fbc:	2301      	movne	r3, #1
 8006fbe:	2300      	moveq	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	e00b      	b.n	8006fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	43da      	mvns	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf14      	ite	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	2300      	moveq	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f47f af6d 	bne.w	8006ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ff8:	e034      	b.n	8007064 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 f915 	bl	800722a <I2C_IsAcknowledgeFailed>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e034      	b.n	8007074 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007010:	d028      	beq.n	8007064 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007012:	f7fc fbf5 	bl	8003800 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	429a      	cmp	r2, r3
 8007020:	d302      	bcc.n	8007028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11d      	bne.n	8007064 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007032:	2b80      	cmp	r3, #128	@ 0x80
 8007034:	d016      	beq.n	8007064 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007050:	f043 0220 	orr.w	r2, r3, #32
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e007      	b.n	8007074 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706e:	2b80      	cmp	r3, #128	@ 0x80
 8007070:	d1c3      	bne.n	8006ffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007088:	e034      	b.n	80070f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f8cd 	bl	800722a <I2C_IsAcknowledgeFailed>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e034      	b.n	8007104 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070a0:	d028      	beq.n	80070f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a2:	f7fc fbad 	bl	8003800 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d302      	bcc.n	80070b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d11d      	bne.n	80070f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d016      	beq.n	80070f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e0:	f043 0220 	orr.w	r2, r3, #32
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e007      	b.n	8007104 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d1c3      	bne.n	800708a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007118:	4b13      	ldr	r3, [pc, #76]	@ (8007168 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	4a13      	ldr	r2, [pc, #76]	@ (800716c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007120:	fba2 2303 	umull	r2, r3, r2, r3
 8007124:	0a1a      	lsrs	r2, r3, #8
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3b01      	subs	r3, #1
 8007132:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d107      	bne.n	800714a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	f043 0220 	orr.w	r2, r3, #32
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e008      	b.n	800715c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007158:	d0e9      	beq.n	800712e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20000008 	.word	0x20000008
 800716c:	14f8b589 	.word	0x14f8b589

08007170 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800717c:	e049      	b.n	8007212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b10      	cmp	r3, #16
 800718a:	d119      	bne.n	80071c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0210 	mvn.w	r2, #16
 8007194:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e030      	b.n	8007222 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c0:	f7fc fb1e 	bl	8003800 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d302      	bcc.n	80071d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d11d      	bne.n	8007212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e0:	2b40      	cmp	r3, #64	@ 0x40
 80071e2:	d016      	beq.n	8007212 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e007      	b.n	8007222 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721c:	2b40      	cmp	r3, #64	@ 0x40
 800721e:	d1ae      	bne.n	800717e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007240:	d11b      	bne.n	800727a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800724a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	f043 0204 	orr.w	r2, r3, #4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007298:	d103      	bne.n	80072a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80072a0:	e007      	b.n	80072b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80072aa:	d102      	bne.n	80072b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2208      	movs	r2, #8
 80072b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
	...

080072c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e267      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d075      	beq.n	80073ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072de:	4b88      	ldr	r3, [pc, #544]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 030c 	and.w	r3, r3, #12
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d00c      	beq.n	8007304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ea:	4b85      	ldr	r3, [pc, #532]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d112      	bne.n	800731c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072f6:	4b82      	ldr	r3, [pc, #520]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007302:	d10b      	bne.n	800731c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007304:	4b7e      	ldr	r3, [pc, #504]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d05b      	beq.n	80073c8 <HAL_RCC_OscConfig+0x108>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d157      	bne.n	80073c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e242      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007324:	d106      	bne.n	8007334 <HAL_RCC_OscConfig+0x74>
 8007326:	4b76      	ldr	r3, [pc, #472]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a75      	ldr	r2, [pc, #468]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 800732c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	e01d      	b.n	8007370 <HAL_RCC_OscConfig+0xb0>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800733c:	d10c      	bne.n	8007358 <HAL_RCC_OscConfig+0x98>
 800733e:	4b70      	ldr	r3, [pc, #448]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a6f      	ldr	r2, [pc, #444]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	4b6d      	ldr	r3, [pc, #436]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a6c      	ldr	r2, [pc, #432]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e00b      	b.n	8007370 <HAL_RCC_OscConfig+0xb0>
 8007358:	4b69      	ldr	r3, [pc, #420]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a68      	ldr	r2, [pc, #416]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 800735e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	4b66      	ldr	r3, [pc, #408]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a65      	ldr	r2, [pc, #404]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 800736a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800736e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d013      	beq.n	80073a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007378:	f7fc fa42 	bl	8003800 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007380:	f7fc fa3e 	bl	8003800 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b64      	cmp	r3, #100	@ 0x64
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e207      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007392:	4b5b      	ldr	r3, [pc, #364]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0xc0>
 800739e:	e014      	b.n	80073ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a0:	f7fc fa2e 	bl	8003800 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073a8:	f7fc fa2a 	bl	8003800 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b64      	cmp	r3, #100	@ 0x64
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e1f3      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ba:	4b51      	ldr	r3, [pc, #324]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0xe8>
 80073c6:	e000      	b.n	80073ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d063      	beq.n	800749e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073d6:	4b4a      	ldr	r3, [pc, #296]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 030c 	and.w	r3, r3, #12
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073e2:	4b47      	ldr	r3, [pc, #284]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073ea:	2b08      	cmp	r3, #8
 80073ec:	d11c      	bne.n	8007428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ee:	4b44      	ldr	r3, [pc, #272]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d116      	bne.n	8007428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073fa:	4b41      	ldr	r3, [pc, #260]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_RCC_OscConfig+0x152>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d001      	beq.n	8007412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e1c7      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007412:	4b3b      	ldr	r3, [pc, #236]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	4937      	ldr	r1, [pc, #220]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007422:	4313      	orrs	r3, r2
 8007424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007426:	e03a      	b.n	800749e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d020      	beq.n	8007472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007430:	4b34      	ldr	r3, [pc, #208]	@ (8007504 <HAL_RCC_OscConfig+0x244>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007436:	f7fc f9e3 	bl	8003800 <HAL_GetTick>
 800743a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800743c:	e008      	b.n	8007450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800743e:	f7fc f9df 	bl	8003800 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	d901      	bls.n	8007450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e1a8      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007450:	4b2b      	ldr	r3, [pc, #172]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0f0      	beq.n	800743e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800745c:	4b28      	ldr	r3, [pc, #160]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4925      	ldr	r1, [pc, #148]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 800746c:	4313      	orrs	r3, r2
 800746e:	600b      	str	r3, [r1, #0]
 8007470:	e015      	b.n	800749e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007472:	4b24      	ldr	r3, [pc, #144]	@ (8007504 <HAL_RCC_OscConfig+0x244>)
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007478:	f7fc f9c2 	bl	8003800 <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007480:	f7fc f9be 	bl	8003800 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e187      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007492:	4b1b      	ldr	r3, [pc, #108]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f0      	bne.n	8007480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d036      	beq.n	8007518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d016      	beq.n	80074e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074b2:	4b15      	ldr	r3, [pc, #84]	@ (8007508 <HAL_RCC_OscConfig+0x248>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b8:	f7fc f9a2 	bl	8003800 <HAL_GetTick>
 80074bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074c0:	f7fc f99e 	bl	8003800 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e167      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <HAL_RCC_OscConfig+0x240>)
 80074d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0f0      	beq.n	80074c0 <HAL_RCC_OscConfig+0x200>
 80074de:	e01b      	b.n	8007518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074e0:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <HAL_RCC_OscConfig+0x248>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074e6:	f7fc f98b 	bl	8003800 <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ec:	e00e      	b.n	800750c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074ee:	f7fc f987 	bl	8003800 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d907      	bls.n	800750c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e150      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
 8007500:	40023800 	.word	0x40023800
 8007504:	42470000 	.word	0x42470000
 8007508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800750c:	4b88      	ldr	r3, [pc, #544]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 800750e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1ea      	bne.n	80074ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8097 	beq.w	8007654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800752a:	4b81      	ldr	r3, [pc, #516]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10f      	bne.n	8007556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	4b7d      	ldr	r3, [pc, #500]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 800753c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753e:	4a7c      	ldr	r2, [pc, #496]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 8007540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007544:	6413      	str	r3, [r2, #64]	@ 0x40
 8007546:	4b7a      	ldr	r3, [pc, #488]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 8007548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800754e:	60bb      	str	r3, [r7, #8]
 8007550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007552:	2301      	movs	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007556:	4b77      	ldr	r3, [pc, #476]	@ (8007734 <HAL_RCC_OscConfig+0x474>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800755e:	2b00      	cmp	r3, #0
 8007560:	d118      	bne.n	8007594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007562:	4b74      	ldr	r3, [pc, #464]	@ (8007734 <HAL_RCC_OscConfig+0x474>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a73      	ldr	r2, [pc, #460]	@ (8007734 <HAL_RCC_OscConfig+0x474>)
 8007568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800756c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800756e:	f7fc f947 	bl	8003800 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007574:	e008      	b.n	8007588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007576:	f7fc f943 	bl	8003800 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e10c      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007588:	4b6a      	ldr	r3, [pc, #424]	@ (8007734 <HAL_RCC_OscConfig+0x474>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0f0      	beq.n	8007576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d106      	bne.n	80075aa <HAL_RCC_OscConfig+0x2ea>
 800759c:	4b64      	ldr	r3, [pc, #400]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 800759e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a0:	4a63      	ldr	r2, [pc, #396]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075a8:	e01c      	b.n	80075e4 <HAL_RCC_OscConfig+0x324>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2b05      	cmp	r3, #5
 80075b0:	d10c      	bne.n	80075cc <HAL_RCC_OscConfig+0x30c>
 80075b2:	4b5f      	ldr	r3, [pc, #380]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b6:	4a5e      	ldr	r2, [pc, #376]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075b8:	f043 0304 	orr.w	r3, r3, #4
 80075bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80075be:	4b5c      	ldr	r3, [pc, #368]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c2:	4a5b      	ldr	r2, [pc, #364]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075c4:	f043 0301 	orr.w	r3, r3, #1
 80075c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80075ca:	e00b      	b.n	80075e4 <HAL_RCC_OscConfig+0x324>
 80075cc:	4b58      	ldr	r3, [pc, #352]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d0:	4a57      	ldr	r2, [pc, #348]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075d2:	f023 0301 	bic.w	r3, r3, #1
 80075d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075d8:	4b55      	ldr	r3, [pc, #340]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075dc:	4a54      	ldr	r2, [pc, #336]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80075de:	f023 0304 	bic.w	r3, r3, #4
 80075e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d015      	beq.n	8007618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ec:	f7fc f908 	bl	8003800 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f2:	e00a      	b.n	800760a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075f4:	f7fc f904 	bl	8003800 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e0cb      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800760a:	4b49      	ldr	r3, [pc, #292]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0ee      	beq.n	80075f4 <HAL_RCC_OscConfig+0x334>
 8007616:	e014      	b.n	8007642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007618:	f7fc f8f2 	bl	8003800 <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800761e:	e00a      	b.n	8007636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007620:	f7fc f8ee 	bl	8003800 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800762e:	4293      	cmp	r3, r2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e0b5      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007636:	4b3e      	ldr	r3, [pc, #248]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1ee      	bne.n	8007620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d105      	bne.n	8007654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007648:	4b39      	ldr	r3, [pc, #228]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 800764a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764c:	4a38      	ldr	r2, [pc, #224]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 800764e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007652:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80a1 	beq.w	80077a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800765e:	4b34      	ldr	r3, [pc, #208]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 030c 	and.w	r3, r3, #12
 8007666:	2b08      	cmp	r3, #8
 8007668:	d05c      	beq.n	8007724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d141      	bne.n	80076f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007672:	4b31      	ldr	r3, [pc, #196]	@ (8007738 <HAL_RCC_OscConfig+0x478>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007678:	f7fc f8c2 	bl	8003800 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007680:	f7fc f8be 	bl	8003800 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e087      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007692:	4b27      	ldr	r3, [pc, #156]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f0      	bne.n	8007680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69da      	ldr	r2, [r3, #28]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ac:	019b      	lsls	r3, r3, #6
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	3b01      	subs	r3, #1
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	061b      	lsls	r3, r3, #24
 80076c2:	491b      	ldr	r1, [pc, #108]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007738 <HAL_RCC_OscConfig+0x478>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ce:	f7fc f897 	bl	8003800 <HAL_GetTick>
 80076d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d6:	f7fc f893 	bl	8003800 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e05c      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076e8:	4b11      	ldr	r3, [pc, #68]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <HAL_RCC_OscConfig+0x416>
 80076f4:	e054      	b.n	80077a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f6:	4b10      	ldr	r3, [pc, #64]	@ (8007738 <HAL_RCC_OscConfig+0x478>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076fc:	f7fc f880 	bl	8003800 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007704:	f7fc f87c 	bl	8003800 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e045      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007716:	4b06      	ldr	r3, [pc, #24]	@ (8007730 <HAL_RCC_OscConfig+0x470>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1f0      	bne.n	8007704 <HAL_RCC_OscConfig+0x444>
 8007722:	e03d      	b.n	80077a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d107      	bne.n	800773c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e038      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
 8007730:	40023800 	.word	0x40023800
 8007734:	40007000 	.word	0x40007000
 8007738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800773c:	4b1b      	ldr	r3, [pc, #108]	@ (80077ac <HAL_RCC_OscConfig+0x4ec>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d028      	beq.n	800779c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007754:	429a      	cmp	r2, r3
 8007756:	d121      	bne.n	800779c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007762:	429a      	cmp	r2, r3
 8007764:	d11a      	bne.n	800779c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800776c:	4013      	ands	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007774:	4293      	cmp	r3, r2
 8007776:	d111      	bne.n	800779c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	3b01      	subs	r3, #1
 8007786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007788:	429a      	cmp	r2, r3
 800778a:	d107      	bne.n	800779c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007798:	429a      	cmp	r2, r3
 800779a:	d001      	beq.n	80077a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40023800 	.word	0x40023800

080077b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e0cc      	b.n	800795e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077c4:	4b68      	ldr	r3, [pc, #416]	@ (8007968 <HAL_RCC_ClockConfig+0x1b8>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d90c      	bls.n	80077ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077d2:	4b65      	ldr	r3, [pc, #404]	@ (8007968 <HAL_RCC_ClockConfig+0x1b8>)
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077da:	4b63      	ldr	r3, [pc, #396]	@ (8007968 <HAL_RCC_ClockConfig+0x1b8>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d001      	beq.n	80077ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0b8      	b.n	800795e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d020      	beq.n	800783a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007804:	4b59      	ldr	r3, [pc, #356]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	4a58      	ldr	r2, [pc, #352]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800780e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800781c:	4b53      	ldr	r3, [pc, #332]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4a52      	ldr	r2, [pc, #328]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007828:	4b50      	ldr	r3, [pc, #320]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	494d      	ldr	r1, [pc, #308]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	4313      	orrs	r3, r2
 8007838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d044      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d107      	bne.n	800785e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800784e:	4b47      	ldr	r3, [pc, #284]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d119      	bne.n	800788e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e07f      	b.n	800795e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d003      	beq.n	800786e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800786a:	2b03      	cmp	r3, #3
 800786c:	d107      	bne.n	800787e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800786e:	4b3f      	ldr	r3, [pc, #252]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e06f      	b.n	800795e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800787e:	4b3b      	ldr	r3, [pc, #236]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e067      	b.n	800795e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800788e:	4b37      	ldr	r3, [pc, #220]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f023 0203 	bic.w	r2, r3, #3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	4934      	ldr	r1, [pc, #208]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 800789c:	4313      	orrs	r3, r2
 800789e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078a0:	f7fb ffae 	bl	8003800 <HAL_GetTick>
 80078a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078a6:	e00a      	b.n	80078be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078a8:	f7fb ffaa 	bl	8003800 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e04f      	b.n	800795e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078be:	4b2b      	ldr	r3, [pc, #172]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 020c 	and.w	r2, r3, #12
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d1eb      	bne.n	80078a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078d0:	4b25      	ldr	r3, [pc, #148]	@ (8007968 <HAL_RCC_ClockConfig+0x1b8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d20c      	bcs.n	80078f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078de:	4b22      	ldr	r3, [pc, #136]	@ (8007968 <HAL_RCC_ClockConfig+0x1b8>)
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e6:	4b20      	ldr	r3, [pc, #128]	@ (8007968 <HAL_RCC_ClockConfig+0x1b8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d001      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e032      	b.n	800795e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007904:	4b19      	ldr	r3, [pc, #100]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4916      	ldr	r1, [pc, #88]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007912:	4313      	orrs	r3, r2
 8007914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007922:	4b12      	ldr	r3, [pc, #72]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	490e      	ldr	r1, [pc, #56]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	4313      	orrs	r3, r2
 8007934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007936:	f000 f821 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800793a:	4602      	mov	r2, r0
 800793c:	4b0b      	ldr	r3, [pc, #44]	@ (800796c <HAL_RCC_ClockConfig+0x1bc>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	091b      	lsrs	r3, r3, #4
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	490a      	ldr	r1, [pc, #40]	@ (8007970 <HAL_RCC_ClockConfig+0x1c0>)
 8007948:	5ccb      	ldrb	r3, [r1, r3]
 800794a:	fa22 f303 	lsr.w	r3, r2, r3
 800794e:	4a09      	ldr	r2, [pc, #36]	@ (8007974 <HAL_RCC_ClockConfig+0x1c4>)
 8007950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007952:	4b09      	ldr	r3, [pc, #36]	@ (8007978 <HAL_RCC_ClockConfig+0x1c8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7fb ff0e 	bl	8003778 <HAL_InitTick>

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40023c00 	.word	0x40023c00
 800796c:	40023800 	.word	0x40023800
 8007970:	08009270 	.word	0x08009270
 8007974:	20000008 	.word	0x20000008
 8007978:	2000000c 	.word	0x2000000c

0800797c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007980:	b090      	sub	sp, #64	@ 0x40
 8007982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	637b      	str	r3, [r7, #52]	@ 0x34
 8007988:	2300      	movs	r3, #0
 800798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800798c:	2300      	movs	r3, #0
 800798e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007994:	4b59      	ldr	r3, [pc, #356]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x180>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 030c 	and.w	r3, r3, #12
 800799c:	2b08      	cmp	r3, #8
 800799e:	d00d      	beq.n	80079bc <HAL_RCC_GetSysClockFreq+0x40>
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	f200 80a1 	bhi.w	8007ae8 <HAL_RCC_GetSysClockFreq+0x16c>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_RCC_GetSysClockFreq+0x34>
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d003      	beq.n	80079b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079ae:	e09b      	b.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079b0:	4b53      	ldr	r3, [pc, #332]	@ (8007b00 <HAL_RCC_GetSysClockFreq+0x184>)
 80079b2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80079b4:	e09b      	b.n	8007aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079b6:	4b53      	ldr	r3, [pc, #332]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80079b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079ba:	e098      	b.n	8007aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079bc:	4b4f      	ldr	r3, [pc, #316]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x180>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079c6:	4b4d      	ldr	r3, [pc, #308]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x180>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d028      	beq.n	8007a24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079d2:	4b4a      	ldr	r3, [pc, #296]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x180>)
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	099b      	lsrs	r3, r3, #6
 80079d8:	2200      	movs	r2, #0
 80079da:	623b      	str	r3, [r7, #32]
 80079dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80079e4:	2100      	movs	r1, #0
 80079e6:	4b47      	ldr	r3, [pc, #284]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80079e8:	fb03 f201 	mul.w	r2, r3, r1
 80079ec:	2300      	movs	r3, #0
 80079ee:	fb00 f303 	mul.w	r3, r0, r3
 80079f2:	4413      	add	r3, r2
 80079f4:	4a43      	ldr	r2, [pc, #268]	@ (8007b04 <HAL_RCC_GetSysClockFreq+0x188>)
 80079f6:	fba0 1202 	umull	r1, r2, r0, r2
 80079fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079fc:	460a      	mov	r2, r1
 80079fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a02:	4413      	add	r3, r2
 8007a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a08:	2200      	movs	r2, #0
 8007a0a:	61bb      	str	r3, [r7, #24]
 8007a0c:	61fa      	str	r2, [r7, #28]
 8007a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007a16:	f7f9 f8eb 	bl	8000bf0 <__aeabi_uldivmod>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4613      	mov	r3, r2
 8007a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a22:	e053      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a24:	4b35      	ldr	r3, [pc, #212]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x180>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	099b      	lsrs	r3, r3, #6
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	617a      	str	r2, [r7, #20]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a36:	f04f 0b00 	mov.w	fp, #0
 8007a3a:	4652      	mov	r2, sl
 8007a3c:	465b      	mov	r3, fp
 8007a3e:	f04f 0000 	mov.w	r0, #0
 8007a42:	f04f 0100 	mov.w	r1, #0
 8007a46:	0159      	lsls	r1, r3, #5
 8007a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a4c:	0150      	lsls	r0, r2, #5
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	ebb2 080a 	subs.w	r8, r2, sl
 8007a56:	eb63 090b 	sbc.w	r9, r3, fp
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a6e:	ebb2 0408 	subs.w	r4, r2, r8
 8007a72:	eb63 0509 	sbc.w	r5, r3, r9
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	00eb      	lsls	r3, r5, #3
 8007a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a84:	00e2      	lsls	r2, r4, #3
 8007a86:	4614      	mov	r4, r2
 8007a88:	461d      	mov	r5, r3
 8007a8a:	eb14 030a 	adds.w	r3, r4, sl
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	eb45 030b 	adc.w	r3, r5, fp
 8007a94:	607b      	str	r3, [r7, #4]
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	028b      	lsls	r3, r1, #10
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007aac:	4621      	mov	r1, r4
 8007aae:	028a      	lsls	r2, r1, #10
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	60fa      	str	r2, [r7, #12]
 8007abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ac0:	f7f9 f896 	bl	8000bf0 <__aeabi_uldivmod>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4613      	mov	r3, r2
 8007aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007acc:	4b0b      	ldr	r3, [pc, #44]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	0c1b      	lsrs	r3, r3, #16
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007adc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ae6:	e002      	b.n	8007aee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ae8:	4b05      	ldr	r3, [pc, #20]	@ (8007b00 <HAL_RCC_GetSysClockFreq+0x184>)
 8007aea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3740      	adds	r7, #64	@ 0x40
 8007af4:	46bd      	mov	sp, r7
 8007af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afa:	bf00      	nop
 8007afc:	40023800 	.word	0x40023800
 8007b00:	00f42400 	.word	0x00f42400
 8007b04:	017d7840 	.word	0x017d7840

08007b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b0c:	4b03      	ldr	r3, [pc, #12]	@ (8007b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20000008 	.word	0x20000008

08007b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b24:	f7ff fff0 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	4b05      	ldr	r3, [pc, #20]	@ (8007b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	0a9b      	lsrs	r3, r3, #10
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	4903      	ldr	r1, [pc, #12]	@ (8007b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b36:	5ccb      	ldrb	r3, [r1, r3]
 8007b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	40023800 	.word	0x40023800
 8007b44:	08009280 	.word	0x08009280

08007b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b4c:	f7ff ffdc 	bl	8007b08 <HAL_RCC_GetHCLKFreq>
 8007b50:	4602      	mov	r2, r0
 8007b52:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	0b5b      	lsrs	r3, r3, #13
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	4903      	ldr	r1, [pc, #12]	@ (8007b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b5e:	5ccb      	ldrb	r3, [r1, r3]
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	08009280 	.word	0x08009280

08007b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e041      	b.n	8007c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7fb fcd8 	bl	800354c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4619      	mov	r1, r3
 8007bae:	4610      	mov	r0, r2
 8007bb0:	f000 fa68 	bl	8008084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <HAL_TIM_PWM_Start+0x24>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	bf14      	ite	ne
 8007c2c:	2301      	movne	r3, #1
 8007c2e:	2300      	moveq	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	e022      	b.n	8007c7a <HAL_TIM_PWM_Start+0x6a>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d109      	bne.n	8007c4e <HAL_TIM_PWM_Start+0x3e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	bf14      	ite	ne
 8007c46:	2301      	movne	r3, #1
 8007c48:	2300      	moveq	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	e015      	b.n	8007c7a <HAL_TIM_PWM_Start+0x6a>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d109      	bne.n	8007c68 <HAL_TIM_PWM_Start+0x58>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	e008      	b.n	8007c7a <HAL_TIM_PWM_Start+0x6a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	bf14      	ite	ne
 8007c74:	2301      	movne	r3, #1
 8007c76:	2300      	moveq	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e068      	b.n	8007d54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <HAL_TIM_PWM_Start+0x82>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c90:	e013      	b.n	8007cba <HAL_TIM_PWM_Start+0xaa>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d104      	bne.n	8007ca2 <HAL_TIM_PWM_Start+0x92>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ca0:	e00b      	b.n	8007cba <HAL_TIM_PWM_Start+0xaa>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d104      	bne.n	8007cb2 <HAL_TIM_PWM_Start+0xa2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cb0:	e003      	b.n	8007cba <HAL_TIM_PWM_Start+0xaa>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fc90 	bl	80085e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a23      	ldr	r2, [pc, #140]	@ (8007d5c <HAL_TIM_PWM_Start+0x14c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d107      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8007d5c <HAL_TIM_PWM_Start+0x14c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d018      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x10e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf4:	d013      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x10e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a19      	ldr	r2, [pc, #100]	@ (8007d60 <HAL_TIM_PWM_Start+0x150>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x10e>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a17      	ldr	r2, [pc, #92]	@ (8007d64 <HAL_TIM_PWM_Start+0x154>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x10e>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	@ (8007d68 <HAL_TIM_PWM_Start+0x158>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x10e>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a14      	ldr	r2, [pc, #80]	@ (8007d6c <HAL_TIM_PWM_Start+0x15c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d111      	bne.n	8007d42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 0307 	and.w	r3, r3, #7
 8007d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b06      	cmp	r3, #6
 8007d2e:	d010      	beq.n	8007d52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d40:	e007      	b.n	8007d52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0201 	orr.w	r2, r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40010000 	.word	0x40010000
 8007d60:	40000400 	.word	0x40000400
 8007d64:	40000800 	.word	0x40000800
 8007d68:	40000c00 	.word	0x40000c00
 8007d6c:	40014000 	.word	0x40014000

08007d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e0ae      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b0c      	cmp	r3, #12
 8007d9a:	f200 809f 	bhi.w	8007edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dd9 	.word	0x08007dd9
 8007da8:	08007edd 	.word	0x08007edd
 8007dac:	08007edd 	.word	0x08007edd
 8007db0:	08007edd 	.word	0x08007edd
 8007db4:	08007e19 	.word	0x08007e19
 8007db8:	08007edd 	.word	0x08007edd
 8007dbc:	08007edd 	.word	0x08007edd
 8007dc0:	08007edd 	.word	0x08007edd
 8007dc4:	08007e5b 	.word	0x08007e5b
 8007dc8:	08007edd 	.word	0x08007edd
 8007dcc:	08007edd 	.word	0x08007edd
 8007dd0:	08007edd 	.word	0x08007edd
 8007dd4:	08007e9b 	.word	0x08007e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68b9      	ldr	r1, [r7, #8]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 f9dc 	bl	800819c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f042 0208 	orr.w	r2, r2, #8
 8007df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0204 	bic.w	r2, r2, #4
 8007e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6999      	ldr	r1, [r3, #24]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	691a      	ldr	r2, [r3, #16]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	619a      	str	r2, [r3, #24]
      break;
 8007e16:	e064      	b.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68b9      	ldr	r1, [r7, #8]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fa22 	bl	8008268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	699a      	ldr	r2, [r3, #24]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6999      	ldr	r1, [r3, #24]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	021a      	lsls	r2, r3, #8
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	619a      	str	r2, [r3, #24]
      break;
 8007e58:	e043      	b.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68b9      	ldr	r1, [r7, #8]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fa6d 	bl	8008340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69da      	ldr	r2, [r3, #28]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0208 	orr.w	r2, r2, #8
 8007e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69da      	ldr	r2, [r3, #28]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0204 	bic.w	r2, r2, #4
 8007e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69d9      	ldr	r1, [r3, #28]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	61da      	str	r2, [r3, #28]
      break;
 8007e98:	e023      	b.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fab7 	bl	8008414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69da      	ldr	r2, [r3, #28]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69d9      	ldr	r1, [r3, #28]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	021a      	lsls	r2, r3, #8
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	61da      	str	r2, [r3, #28]
      break;
 8007eda:	e002      	b.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_TIM_ConfigClockSource+0x1c>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e0b4      	b.n	800807a <HAL_TIM_ConfigClockSource+0x186>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f48:	d03e      	beq.n	8007fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8007f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f4e:	f200 8087 	bhi.w	8008060 <HAL_TIM_ConfigClockSource+0x16c>
 8007f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f56:	f000 8086 	beq.w	8008066 <HAL_TIM_ConfigClockSource+0x172>
 8007f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f5e:	d87f      	bhi.n	8008060 <HAL_TIM_ConfigClockSource+0x16c>
 8007f60:	2b70      	cmp	r3, #112	@ 0x70
 8007f62:	d01a      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0xa6>
 8007f64:	2b70      	cmp	r3, #112	@ 0x70
 8007f66:	d87b      	bhi.n	8008060 <HAL_TIM_ConfigClockSource+0x16c>
 8007f68:	2b60      	cmp	r3, #96	@ 0x60
 8007f6a:	d050      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x11a>
 8007f6c:	2b60      	cmp	r3, #96	@ 0x60
 8007f6e:	d877      	bhi.n	8008060 <HAL_TIM_ConfigClockSource+0x16c>
 8007f70:	2b50      	cmp	r3, #80	@ 0x50
 8007f72:	d03c      	beq.n	8007fee <HAL_TIM_ConfigClockSource+0xfa>
 8007f74:	2b50      	cmp	r3, #80	@ 0x50
 8007f76:	d873      	bhi.n	8008060 <HAL_TIM_ConfigClockSource+0x16c>
 8007f78:	2b40      	cmp	r3, #64	@ 0x40
 8007f7a:	d058      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x13a>
 8007f7c:	2b40      	cmp	r3, #64	@ 0x40
 8007f7e:	d86f      	bhi.n	8008060 <HAL_TIM_ConfigClockSource+0x16c>
 8007f80:	2b30      	cmp	r3, #48	@ 0x30
 8007f82:	d064      	beq.n	800804e <HAL_TIM_ConfigClockSource+0x15a>
 8007f84:	2b30      	cmp	r3, #48	@ 0x30
 8007f86:	d86b      	bhi.n	8008060 <HAL_TIM_ConfigClockSource+0x16c>
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d060      	beq.n	800804e <HAL_TIM_ConfigClockSource+0x15a>
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d867      	bhi.n	8008060 <HAL_TIM_ConfigClockSource+0x16c>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d05c      	beq.n	800804e <HAL_TIM_ConfigClockSource+0x15a>
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d05a      	beq.n	800804e <HAL_TIM_ConfigClockSource+0x15a>
 8007f98:	e062      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007faa:	f000 fafd 	bl	80085a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	609a      	str	r2, [r3, #8]
      break;
 8007fc6:	e04f      	b.n	8008068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fd8:	f000 fae6 	bl	80085a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fea:	609a      	str	r2, [r3, #8]
      break;
 8007fec:	e03c      	b.n	8008068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f000 fa5a 	bl	80084b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2150      	movs	r1, #80	@ 0x50
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fab3 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 800800c:	e02c      	b.n	8008068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800801a:	461a      	mov	r2, r3
 800801c:	f000 fa79 	bl	8008512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2160      	movs	r1, #96	@ 0x60
 8008026:	4618      	mov	r0, r3
 8008028:	f000 faa3 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 800802c:	e01c      	b.n	8008068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800803a:	461a      	mov	r2, r3
 800803c:	f000 fa3a 	bl	80084b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2140      	movs	r1, #64	@ 0x40
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fa93 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 800804c:	e00c      	b.n	8008068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f000 fa8a 	bl	8008572 <TIM_ITRx_SetConfig>
      break;
 800805e:	e003      	b.n	8008068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	73fb      	strb	r3, [r7, #15]
      break;
 8008064:	e000      	b.n	8008068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a3a      	ldr	r2, [pc, #232]	@ (8008180 <TIM_Base_SetConfig+0xfc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00f      	beq.n	80080bc <TIM_Base_SetConfig+0x38>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a2:	d00b      	beq.n	80080bc <TIM_Base_SetConfig+0x38>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a37      	ldr	r2, [pc, #220]	@ (8008184 <TIM_Base_SetConfig+0x100>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d007      	beq.n	80080bc <TIM_Base_SetConfig+0x38>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a36      	ldr	r2, [pc, #216]	@ (8008188 <TIM_Base_SetConfig+0x104>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_Base_SetConfig+0x38>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a35      	ldr	r2, [pc, #212]	@ (800818c <TIM_Base_SetConfig+0x108>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d108      	bne.n	80080ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008180 <TIM_Base_SetConfig+0xfc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d01b      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080dc:	d017      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a28      	ldr	r2, [pc, #160]	@ (8008184 <TIM_Base_SetConfig+0x100>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a27      	ldr	r2, [pc, #156]	@ (8008188 <TIM_Base_SetConfig+0x104>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00f      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a26      	ldr	r2, [pc, #152]	@ (800818c <TIM_Base_SetConfig+0x108>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00b      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a25      	ldr	r2, [pc, #148]	@ (8008190 <TIM_Base_SetConfig+0x10c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d007      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a24      	ldr	r2, [pc, #144]	@ (8008194 <TIM_Base_SetConfig+0x110>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d003      	beq.n	800810e <TIM_Base_SetConfig+0x8a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a23      	ldr	r2, [pc, #140]	@ (8008198 <TIM_Base_SetConfig+0x114>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d108      	bne.n	8008120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a0e      	ldr	r2, [pc, #56]	@ (8008180 <TIM_Base_SetConfig+0xfc>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d103      	bne.n	8008154 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b01      	cmp	r3, #1
 8008164:	d105      	bne.n	8008172 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	611a      	str	r2, [r3, #16]
  }
}
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010000 	.word	0x40010000
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	40000c00 	.word	0x40000c00
 8008190:	40014000 	.word	0x40014000
 8008194:	40014400 	.word	0x40014400
 8008198:	40014800 	.word	0x40014800

0800819c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	f023 0201 	bic.w	r2, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f023 0302 	bic.w	r3, r3, #2
 80081e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008264 <TIM_OC1_SetConfig+0xc8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d10c      	bne.n	8008212 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f023 0308 	bic.w	r3, r3, #8
 80081fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f023 0304 	bic.w	r3, r3, #4
 8008210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a13      	ldr	r2, [pc, #76]	@ (8008264 <TIM_OC1_SetConfig+0xc8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d111      	bne.n	800823e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	621a      	str	r2, [r3, #32]
}
 8008258:	bf00      	nop
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40010000 	.word	0x40010000

08008268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f023 0210 	bic.w	r2, r3, #16
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800829e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f023 0320 	bic.w	r3, r3, #32
 80082b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a1e      	ldr	r2, [pc, #120]	@ (800833c <TIM_OC2_SetConfig+0xd4>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d10d      	bne.n	80082e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a15      	ldr	r2, [pc, #84]	@ (800833c <TIM_OC2_SetConfig+0xd4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d113      	bne.n	8008314 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4313      	orrs	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	621a      	str	r2, [r3, #32]
}
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40010000 	.word	0x40010000

08008340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800836e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	021b      	lsls	r3, r3, #8
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a1d      	ldr	r2, [pc, #116]	@ (8008410 <TIM_OC3_SetConfig+0xd0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d10d      	bne.n	80083ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	021b      	lsls	r3, r3, #8
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a14      	ldr	r2, [pc, #80]	@ (8008410 <TIM_OC3_SetConfig+0xd0>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d113      	bne.n	80083ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	40010000 	.word	0x40010000

08008414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800844a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4313      	orrs	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800845e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	031b      	lsls	r3, r3, #12
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	4313      	orrs	r3, r2
 800846a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a10      	ldr	r2, [pc, #64]	@ (80084b0 <TIM_OC4_SetConfig+0x9c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d109      	bne.n	8008488 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800847a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	019b      	lsls	r3, r3, #6
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	4313      	orrs	r3, r2
 8008486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	621a      	str	r2, [r3, #32]
}
 80084a2:	bf00      	nop
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40010000 	.word	0x40010000

080084b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f023 030a 	bic.w	r3, r3, #10
 80084f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008512:	b480      	push	{r7}
 8008514:	b087      	sub	sp, #28
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	f023 0210 	bic.w	r2, r3, #16
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800853c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800854e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	621a      	str	r2, [r3, #32]
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	f043 0307 	orr.w	r3, r3, #7
 8008594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	609a      	str	r2, [r3, #8]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	021a      	lsls	r2, r3, #8
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	431a      	orrs	r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	609a      	str	r2, [r3, #8]
}
 80085dc:	bf00      	nop
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f003 031f 	and.w	r3, r3, #31
 80085fa:	2201      	movs	r2, #1
 80085fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1a      	ldr	r2, [r3, #32]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	43db      	mvns	r3, r3
 800860a:	401a      	ands	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a1a      	ldr	r2, [r3, #32]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f003 031f 	and.w	r3, r3, #31
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	fa01 f303 	lsl.w	r3, r1, r3
 8008620:	431a      	orrs	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
	...

08008634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008648:	2302      	movs	r3, #2
 800864a:	e050      	b.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1c      	ldr	r2, [pc, #112]	@ (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d018      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008698:	d013      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a18      	ldr	r2, [pc, #96]	@ (8008700 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00e      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a16      	ldr	r2, [pc, #88]	@ (8008704 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d009      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a15      	ldr	r2, [pc, #84]	@ (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d004      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a13      	ldr	r2, [pc, #76]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d10c      	bne.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40010000 	.word	0x40010000
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800
 8008708:	40000c00 	.word	0x40000c00
 800870c:	40014000 	.word	0x40014000

08008710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e042      	b.n	80087a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d106      	bne.n	800873c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7fa ff2a 	bl	8003590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2224      	movs	r2, #36	@ 0x24
 8008740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68da      	ldr	r2, [r3, #12]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f973 	bl	8008a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	@ 0x28
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	4613      	mov	r3, r2
 80087be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	d175      	bne.n	80088bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <HAL_UART_Transmit+0x2c>
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e06e      	b.n	80088be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2221      	movs	r2, #33	@ 0x21
 80087ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087ee:	f7fb f807 	bl	8003800 <HAL_GetTick>
 80087f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	88fa      	ldrh	r2, [r7, #6]
 80087f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	88fa      	ldrh	r2, [r7, #6]
 80087fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008808:	d108      	bne.n	800881c <HAL_UART_Transmit+0x6c>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d104      	bne.n	800881c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	61bb      	str	r3, [r7, #24]
 800881a:	e003      	b.n	8008824 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008820:	2300      	movs	r3, #0
 8008822:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008824:	e02e      	b.n	8008884 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2200      	movs	r2, #0
 800882e:	2180      	movs	r1, #128	@ 0x80
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f848 	bl	80088c6 <UART_WaitOnFlagUntilTimeout>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2220      	movs	r2, #32
 8008840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e03a      	b.n	80088be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800885c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	3302      	adds	r3, #2
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	e007      	b.n	8008876 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	3301      	adds	r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800887a:	b29b      	uxth	r3, r3
 800887c:	3b01      	subs	r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1cb      	bne.n	8008826 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2200      	movs	r2, #0
 8008896:	2140      	movs	r1, #64	@ 0x40
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 f814 	bl	80088c6 <UART_WaitOnFlagUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e006      	b.n	80088be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	e000      	b.n	80088be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80088bc:	2302      	movs	r3, #2
  }
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3720      	adds	r7, #32
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b086      	sub	sp, #24
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	603b      	str	r3, [r7, #0]
 80088d2:	4613      	mov	r3, r2
 80088d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088d6:	e03b      	b.n	8008950 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088de:	d037      	beq.n	8008950 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088e0:	f7fa ff8e 	bl	8003800 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d302      	bcc.n	80088f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e03a      	b.n	8008970 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d023      	beq.n	8008950 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b80      	cmp	r3, #128	@ 0x80
 800890c:	d020      	beq.n	8008950 <UART_WaitOnFlagUntilTimeout+0x8a>
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b40      	cmp	r3, #64	@ 0x40
 8008912:	d01d      	beq.n	8008950 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	2b08      	cmp	r3, #8
 8008920:	d116      	bne.n	8008950 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008922:	2300      	movs	r3, #0
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f81d 	bl	8008978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2208      	movs	r2, #8
 8008942:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e00f      	b.n	8008970 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	4013      	ands	r3, r2
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	429a      	cmp	r2, r3
 800895e:	bf0c      	ite	eq
 8008960:	2301      	moveq	r3, #1
 8008962:	2300      	movne	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	461a      	mov	r2, r3
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	429a      	cmp	r2, r3
 800896c:	d0b4      	beq.n	80088d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b095      	sub	sp, #84	@ 0x54
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	330c      	adds	r3, #12
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	330c      	adds	r3, #12
 800899e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e5      	bne.n	8008980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3314      	adds	r3, #20
 80089ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f023 0301 	bic.w	r3, r3, #1
 80089ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3314      	adds	r3, #20
 80089d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e5      	bne.n	80089b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d119      	bne.n	8008a24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	330c      	adds	r3, #12
 80089f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	e853 3f00 	ldrex	r3, [r3]
 80089fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f023 0310 	bic.w	r3, r3, #16
 8008a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a10:	61ba      	str	r2, [r7, #24]
 8008a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6979      	ldr	r1, [r7, #20]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e5      	bne.n	80089f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008a32:	bf00      	nop
 8008a34:	3754      	adds	r7, #84	@ 0x54
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a44:	b0c0      	sub	sp, #256	@ 0x100
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a5c:	68d9      	ldr	r1, [r3, #12]
 8008a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	ea40 0301 	orr.w	r3, r0, r1
 8008a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	431a      	orrs	r2, r3
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008a98:	f021 010c 	bic.w	r1, r1, #12
 8008a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008aa6:	430b      	orrs	r3, r1
 8008aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aba:	6999      	ldr	r1, [r3, #24]
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	ea40 0301 	orr.w	r3, r0, r1
 8008ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	4b8f      	ldr	r3, [pc, #572]	@ (8008d0c <UART_SetConfig+0x2cc>)
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d005      	beq.n	8008ae0 <UART_SetConfig+0xa0>
 8008ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4b8d      	ldr	r3, [pc, #564]	@ (8008d10 <UART_SetConfig+0x2d0>)
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d104      	bne.n	8008aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ae0:	f7ff f832 	bl	8007b48 <HAL_RCC_GetPCLK2Freq>
 8008ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ae8:	e003      	b.n	8008af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008aea:	f7ff f819 	bl	8007b20 <HAL_RCC_GetPCLK1Freq>
 8008aee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008afc:	f040 810c 	bne.w	8008d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b04:	2200      	movs	r2, #0
 8008b06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b12:	4622      	mov	r2, r4
 8008b14:	462b      	mov	r3, r5
 8008b16:	1891      	adds	r1, r2, r2
 8008b18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b1a:	415b      	adcs	r3, r3
 8008b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b22:	4621      	mov	r1, r4
 8008b24:	eb12 0801 	adds.w	r8, r2, r1
 8008b28:	4629      	mov	r1, r5
 8008b2a:	eb43 0901 	adc.w	r9, r3, r1
 8008b2e:	f04f 0200 	mov.w	r2, #0
 8008b32:	f04f 0300 	mov.w	r3, #0
 8008b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b42:	4690      	mov	r8, r2
 8008b44:	4699      	mov	r9, r3
 8008b46:	4623      	mov	r3, r4
 8008b48:	eb18 0303 	adds.w	r3, r8, r3
 8008b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b50:	462b      	mov	r3, r5
 8008b52:	eb49 0303 	adc.w	r3, r9, r3
 8008b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b6e:	460b      	mov	r3, r1
 8008b70:	18db      	adds	r3, r3, r3
 8008b72:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b74:	4613      	mov	r3, r2
 8008b76:	eb42 0303 	adc.w	r3, r2, r3
 8008b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008b84:	f7f8 f834 	bl	8000bf0 <__aeabi_uldivmod>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4b61      	ldr	r3, [pc, #388]	@ (8008d14 <UART_SetConfig+0x2d4>)
 8008b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b92:	095b      	lsrs	r3, r3, #5
 8008b94:	011c      	lsls	r4, r3, #4
 8008b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008ba8:	4642      	mov	r2, r8
 8008baa:	464b      	mov	r3, r9
 8008bac:	1891      	adds	r1, r2, r2
 8008bae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008bb0:	415b      	adcs	r3, r3
 8008bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008bb8:	4641      	mov	r1, r8
 8008bba:	eb12 0a01 	adds.w	sl, r2, r1
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bd8:	4692      	mov	sl, r2
 8008bda:	469b      	mov	fp, r3
 8008bdc:	4643      	mov	r3, r8
 8008bde:	eb1a 0303 	adds.w	r3, sl, r3
 8008be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008be6:	464b      	mov	r3, r9
 8008be8:	eb4b 0303 	adc.w	r3, fp, r3
 8008bec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c04:	460b      	mov	r3, r1
 8008c06:	18db      	adds	r3, r3, r3
 8008c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	eb42 0303 	adc.w	r3, r2, r3
 8008c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c1a:	f7f7 ffe9 	bl	8000bf0 <__aeabi_uldivmod>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4611      	mov	r1, r2
 8008c24:	4b3b      	ldr	r3, [pc, #236]	@ (8008d14 <UART_SetConfig+0x2d4>)
 8008c26:	fba3 2301 	umull	r2, r3, r3, r1
 8008c2a:	095b      	lsrs	r3, r3, #5
 8008c2c:	2264      	movs	r2, #100	@ 0x64
 8008c2e:	fb02 f303 	mul.w	r3, r2, r3
 8008c32:	1acb      	subs	r3, r1, r3
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c3a:	4b36      	ldr	r3, [pc, #216]	@ (8008d14 <UART_SetConfig+0x2d4>)
 8008c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8008c40:	095b      	lsrs	r3, r3, #5
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008c48:	441c      	add	r4, r3
 8008c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	464b      	mov	r3, r9
 8008c60:	1891      	adds	r1, r2, r2
 8008c62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008c64:	415b      	adcs	r3, r3
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	1851      	adds	r1, r2, r1
 8008c70:	6339      	str	r1, [r7, #48]	@ 0x30
 8008c72:	4649      	mov	r1, r9
 8008c74:	414b      	adcs	r3, r1
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c78:	f04f 0200 	mov.w	r2, #0
 8008c7c:	f04f 0300 	mov.w	r3, #0
 8008c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008c84:	4659      	mov	r1, fp
 8008c86:	00cb      	lsls	r3, r1, #3
 8008c88:	4651      	mov	r1, sl
 8008c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c8e:	4651      	mov	r1, sl
 8008c90:	00ca      	lsls	r2, r1, #3
 8008c92:	4610      	mov	r0, r2
 8008c94:	4619      	mov	r1, r3
 8008c96:	4603      	mov	r3, r0
 8008c98:	4642      	mov	r2, r8
 8008c9a:	189b      	adds	r3, r3, r2
 8008c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	460a      	mov	r2, r1
 8008ca4:	eb42 0303 	adc.w	r3, r2, r3
 8008ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	18db      	adds	r3, r3, r3
 8008cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	eb42 0303 	adc.w	r3, r2, r3
 8008ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008cd6:	f7f7 ff8b 	bl	8000bf0 <__aeabi_uldivmod>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <UART_SetConfig+0x2d4>)
 8008ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ce4:	095b      	lsrs	r3, r3, #5
 8008ce6:	2164      	movs	r1, #100	@ 0x64
 8008ce8:	fb01 f303 	mul.w	r3, r1, r3
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	3332      	adds	r3, #50	@ 0x32
 8008cf2:	4a08      	ldr	r2, [pc, #32]	@ (8008d14 <UART_SetConfig+0x2d4>)
 8008cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf8:	095b      	lsrs	r3, r3, #5
 8008cfa:	f003 0207 	and.w	r2, r3, #7
 8008cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4422      	add	r2, r4
 8008d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d08:	e106      	b.n	8008f18 <UART_SetConfig+0x4d8>
 8008d0a:	bf00      	nop
 8008d0c:	40011000 	.word	0x40011000
 8008d10:	40011400 	.word	0x40011400
 8008d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d2a:	4642      	mov	r2, r8
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	1891      	adds	r1, r2, r2
 8008d30:	6239      	str	r1, [r7, #32]
 8008d32:	415b      	adcs	r3, r3
 8008d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d3a:	4641      	mov	r1, r8
 8008d3c:	1854      	adds	r4, r2, r1
 8008d3e:	4649      	mov	r1, r9
 8008d40:	eb43 0501 	adc.w	r5, r3, r1
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	00eb      	lsls	r3, r5, #3
 8008d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d52:	00e2      	lsls	r2, r4, #3
 8008d54:	4614      	mov	r4, r2
 8008d56:	461d      	mov	r5, r3
 8008d58:	4643      	mov	r3, r8
 8008d5a:	18e3      	adds	r3, r4, r3
 8008d5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d60:	464b      	mov	r3, r9
 8008d62:	eb45 0303 	adc.w	r3, r5, r3
 8008d66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d7a:	f04f 0200 	mov.w	r2, #0
 8008d7e:	f04f 0300 	mov.w	r3, #0
 8008d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008d86:	4629      	mov	r1, r5
 8008d88:	008b      	lsls	r3, r1, #2
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d90:	4621      	mov	r1, r4
 8008d92:	008a      	lsls	r2, r1, #2
 8008d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008d98:	f7f7 ff2a 	bl	8000bf0 <__aeabi_uldivmod>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4b60      	ldr	r3, [pc, #384]	@ (8008f24 <UART_SetConfig+0x4e4>)
 8008da2:	fba3 2302 	umull	r2, r3, r3, r2
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	011c      	lsls	r4, r3, #4
 8008daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008db4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008dbc:	4642      	mov	r2, r8
 8008dbe:	464b      	mov	r3, r9
 8008dc0:	1891      	adds	r1, r2, r2
 8008dc2:	61b9      	str	r1, [r7, #24]
 8008dc4:	415b      	adcs	r3, r3
 8008dc6:	61fb      	str	r3, [r7, #28]
 8008dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dcc:	4641      	mov	r1, r8
 8008dce:	1851      	adds	r1, r2, r1
 8008dd0:	6139      	str	r1, [r7, #16]
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	414b      	adcs	r3, r1
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	f04f 0200 	mov.w	r2, #0
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008de4:	4659      	mov	r1, fp
 8008de6:	00cb      	lsls	r3, r1, #3
 8008de8:	4651      	mov	r1, sl
 8008dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dee:	4651      	mov	r1, sl
 8008df0:	00ca      	lsls	r2, r1, #3
 8008df2:	4610      	mov	r0, r2
 8008df4:	4619      	mov	r1, r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	4642      	mov	r2, r8
 8008dfa:	189b      	adds	r3, r3, r2
 8008dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e00:	464b      	mov	r3, r9
 8008e02:	460a      	mov	r2, r1
 8008e04:	eb42 0303 	adc.w	r3, r2, r3
 8008e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e24:	4649      	mov	r1, r9
 8008e26:	008b      	lsls	r3, r1, #2
 8008e28:	4641      	mov	r1, r8
 8008e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e2e:	4641      	mov	r1, r8
 8008e30:	008a      	lsls	r2, r1, #2
 8008e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e36:	f7f7 fedb 	bl	8000bf0 <__aeabi_uldivmod>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4b38      	ldr	r3, [pc, #224]	@ (8008f24 <UART_SetConfig+0x4e4>)
 8008e42:	fba3 2301 	umull	r2, r3, r3, r1
 8008e46:	095b      	lsrs	r3, r3, #5
 8008e48:	2264      	movs	r2, #100	@ 0x64
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
 8008e4e:	1acb      	subs	r3, r1, r3
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	3332      	adds	r3, #50	@ 0x32
 8008e54:	4a33      	ldr	r2, [pc, #204]	@ (8008f24 <UART_SetConfig+0x4e4>)
 8008e56:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5a:	095b      	lsrs	r3, r3, #5
 8008e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e60:	441c      	add	r4, r3
 8008e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e66:	2200      	movs	r2, #0
 8008e68:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008e6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008e70:	4642      	mov	r2, r8
 8008e72:	464b      	mov	r3, r9
 8008e74:	1891      	adds	r1, r2, r2
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	415b      	adcs	r3, r3
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e80:	4641      	mov	r1, r8
 8008e82:	1851      	adds	r1, r2, r1
 8008e84:	6039      	str	r1, [r7, #0]
 8008e86:	4649      	mov	r1, r9
 8008e88:	414b      	adcs	r3, r1
 8008e8a:	607b      	str	r3, [r7, #4]
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e98:	4659      	mov	r1, fp
 8008e9a:	00cb      	lsls	r3, r1, #3
 8008e9c:	4651      	mov	r1, sl
 8008e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ea2:	4651      	mov	r1, sl
 8008ea4:	00ca      	lsls	r2, r1, #3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4642      	mov	r2, r8
 8008eae:	189b      	adds	r3, r3, r2
 8008eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	460a      	mov	r2, r1
 8008eb6:	eb42 0303 	adc.w	r3, r2, r3
 8008eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ec6:	667a      	str	r2, [r7, #100]	@ 0x64
 8008ec8:	f04f 0200 	mov.w	r2, #0
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	008b      	lsls	r3, r1, #2
 8008ed8:	4641      	mov	r1, r8
 8008eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ede:	4641      	mov	r1, r8
 8008ee0:	008a      	lsls	r2, r1, #2
 8008ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008ee6:	f7f7 fe83 	bl	8000bf0 <__aeabi_uldivmod>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <UART_SetConfig+0x4e4>)
 8008ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ef4:	095b      	lsrs	r3, r3, #5
 8008ef6:	2164      	movs	r1, #100	@ 0x64
 8008ef8:	fb01 f303 	mul.w	r3, r1, r3
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	3332      	adds	r3, #50	@ 0x32
 8008f02:	4a08      	ldr	r2, [pc, #32]	@ (8008f24 <UART_SetConfig+0x4e4>)
 8008f04:	fba2 2303 	umull	r2, r3, r2, r3
 8008f08:	095b      	lsrs	r3, r3, #5
 8008f0a:	f003 020f 	and.w	r2, r3, #15
 8008f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4422      	add	r2, r4
 8008f16:	609a      	str	r2, [r3, #8]
}
 8008f18:	bf00      	nop
 8008f1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f24:	51eb851f 	.word	0x51eb851f

08008f28 <memset>:
 8008f28:	4402      	add	r2, r0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d100      	bne.n	8008f32 <memset+0xa>
 8008f30:	4770      	bx	lr
 8008f32:	f803 1b01 	strb.w	r1, [r3], #1
 8008f36:	e7f9      	b.n	8008f2c <memset+0x4>

08008f38 <__errno>:
 8008f38:	4b01      	ldr	r3, [pc, #4]	@ (8008f40 <__errno+0x8>)
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000014 	.word	0x20000014

08008f44 <__libc_init_array>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	4d0d      	ldr	r5, [pc, #52]	@ (8008f7c <__libc_init_array+0x38>)
 8008f48:	4c0d      	ldr	r4, [pc, #52]	@ (8008f80 <__libc_init_array+0x3c>)
 8008f4a:	1b64      	subs	r4, r4, r5
 8008f4c:	10a4      	asrs	r4, r4, #2
 8008f4e:	2600      	movs	r6, #0
 8008f50:	42a6      	cmp	r6, r4
 8008f52:	d109      	bne.n	8008f68 <__libc_init_array+0x24>
 8008f54:	4d0b      	ldr	r5, [pc, #44]	@ (8008f84 <__libc_init_array+0x40>)
 8008f56:	4c0c      	ldr	r4, [pc, #48]	@ (8008f88 <__libc_init_array+0x44>)
 8008f58:	f000 f91e 	bl	8009198 <_init>
 8008f5c:	1b64      	subs	r4, r4, r5
 8008f5e:	10a4      	asrs	r4, r4, #2
 8008f60:	2600      	movs	r6, #0
 8008f62:	42a6      	cmp	r6, r4
 8008f64:	d105      	bne.n	8008f72 <__libc_init_array+0x2e>
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6c:	4798      	blx	r3
 8008f6e:	3601      	adds	r6, #1
 8008f70:	e7ee      	b.n	8008f50 <__libc_init_array+0xc>
 8008f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f76:	4798      	blx	r3
 8008f78:	3601      	adds	r6, #1
 8008f7a:	e7f2      	b.n	8008f62 <__libc_init_array+0x1e>
 8008f7c:	08009290 	.word	0x08009290
 8008f80:	08009290 	.word	0x08009290
 8008f84:	08009290 	.word	0x08009290
 8008f88:	08009294 	.word	0x08009294

08008f8c <sqrt>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	ed2d 8b02 	vpush	{d8}
 8008f92:	ec55 4b10 	vmov	r4, r5, d0
 8008f96:	f000 f825 	bl	8008fe4 <__ieee754_sqrt>
 8008f9a:	4622      	mov	r2, r4
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	eeb0 8a40 	vmov.f32	s16, s0
 8008fa6:	eef0 8a60 	vmov.f32	s17, s1
 8008faa:	f7f7 fd73 	bl	8000a94 <__aeabi_dcmpun>
 8008fae:	b990      	cbnz	r0, 8008fd6 <sqrt+0x4a>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	f7f7 fd44 	bl	8000a44 <__aeabi_dcmplt>
 8008fbc:	b158      	cbz	r0, 8008fd6 <sqrt+0x4a>
 8008fbe:	f7ff ffbb 	bl	8008f38 <__errno>
 8008fc2:	2321      	movs	r3, #33	@ 0x21
 8008fc4:	6003      	str	r3, [r0, #0]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f7f7 fbf1 	bl	80007b4 <__aeabi_ddiv>
 8008fd2:	ec41 0b18 	vmov	d8, r0, r1
 8008fd6:	eeb0 0a48 	vmov.f32	s0, s16
 8008fda:	eef0 0a68 	vmov.f32	s1, s17
 8008fde:	ecbd 8b02 	vpop	{d8}
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}

08008fe4 <__ieee754_sqrt>:
 8008fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	4a68      	ldr	r2, [pc, #416]	@ (800918c <__ieee754_sqrt+0x1a8>)
 8008fea:	ec55 4b10 	vmov	r4, r5, d0
 8008fee:	43aa      	bics	r2, r5
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	d110      	bne.n	8009018 <__ieee754_sqrt+0x34>
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 fab0 	bl	8000560 <__aeabi_dmul>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4620      	mov	r0, r4
 8009006:	4629      	mov	r1, r5
 8009008:	f7f7 f8f4 	bl	80001f4 <__adddf3>
 800900c:	4604      	mov	r4, r0
 800900e:	460d      	mov	r5, r1
 8009010:	ec45 4b10 	vmov	d0, r4, r5
 8009014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	2d00      	cmp	r5, #0
 800901a:	dc0e      	bgt.n	800903a <__ieee754_sqrt+0x56>
 800901c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009020:	4322      	orrs	r2, r4
 8009022:	d0f5      	beq.n	8009010 <__ieee754_sqrt+0x2c>
 8009024:	b19d      	cbz	r5, 800904e <__ieee754_sqrt+0x6a>
 8009026:	4622      	mov	r2, r4
 8009028:	4620      	mov	r0, r4
 800902a:	4629      	mov	r1, r5
 800902c:	f7f7 f8e0 	bl	80001f0 <__aeabi_dsub>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	f7f7 fbbe 	bl	80007b4 <__aeabi_ddiv>
 8009038:	e7e8      	b.n	800900c <__ieee754_sqrt+0x28>
 800903a:	152a      	asrs	r2, r5, #20
 800903c:	d115      	bne.n	800906a <__ieee754_sqrt+0x86>
 800903e:	2000      	movs	r0, #0
 8009040:	e009      	b.n	8009056 <__ieee754_sqrt+0x72>
 8009042:	0acb      	lsrs	r3, r1, #11
 8009044:	3a15      	subs	r2, #21
 8009046:	0549      	lsls	r1, r1, #21
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0fa      	beq.n	8009042 <__ieee754_sqrt+0x5e>
 800904c:	e7f7      	b.n	800903e <__ieee754_sqrt+0x5a>
 800904e:	462a      	mov	r2, r5
 8009050:	e7fa      	b.n	8009048 <__ieee754_sqrt+0x64>
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	3001      	adds	r0, #1
 8009056:	02dc      	lsls	r4, r3, #11
 8009058:	d5fb      	bpl.n	8009052 <__ieee754_sqrt+0x6e>
 800905a:	1e44      	subs	r4, r0, #1
 800905c:	1b12      	subs	r2, r2, r4
 800905e:	f1c0 0420 	rsb	r4, r0, #32
 8009062:	fa21 f404 	lsr.w	r4, r1, r4
 8009066:	4323      	orrs	r3, r4
 8009068:	4081      	lsls	r1, r0
 800906a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800906e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009076:	07d2      	lsls	r2, r2, #31
 8009078:	bf5c      	itt	pl
 800907a:	005b      	lslpl	r3, r3, #1
 800907c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009080:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009084:	bf58      	it	pl
 8009086:	0049      	lslpl	r1, r1, #1
 8009088:	2600      	movs	r6, #0
 800908a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800908e:	106d      	asrs	r5, r5, #1
 8009090:	0049      	lsls	r1, r1, #1
 8009092:	2016      	movs	r0, #22
 8009094:	4632      	mov	r2, r6
 8009096:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800909a:	1917      	adds	r7, r2, r4
 800909c:	429f      	cmp	r7, r3
 800909e:	bfde      	ittt	le
 80090a0:	193a      	addle	r2, r7, r4
 80090a2:	1bdb      	suble	r3, r3, r7
 80090a4:	1936      	addle	r6, r6, r4
 80090a6:	0fcf      	lsrs	r7, r1, #31
 80090a8:	3801      	subs	r0, #1
 80090aa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80090ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80090b2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80090b6:	d1f0      	bne.n	800909a <__ieee754_sqrt+0xb6>
 80090b8:	4604      	mov	r4, r0
 80090ba:	2720      	movs	r7, #32
 80090bc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80090c0:	429a      	cmp	r2, r3
 80090c2:	eb00 0e0c 	add.w	lr, r0, ip
 80090c6:	db02      	blt.n	80090ce <__ieee754_sqrt+0xea>
 80090c8:	d113      	bne.n	80090f2 <__ieee754_sqrt+0x10e>
 80090ca:	458e      	cmp	lr, r1
 80090cc:	d811      	bhi.n	80090f2 <__ieee754_sqrt+0x10e>
 80090ce:	f1be 0f00 	cmp.w	lr, #0
 80090d2:	eb0e 000c 	add.w	r0, lr, ip
 80090d6:	da42      	bge.n	800915e <__ieee754_sqrt+0x17a>
 80090d8:	2800      	cmp	r0, #0
 80090da:	db40      	blt.n	800915e <__ieee754_sqrt+0x17a>
 80090dc:	f102 0801 	add.w	r8, r2, #1
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	458e      	cmp	lr, r1
 80090e4:	bf88      	it	hi
 80090e6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80090ea:	eba1 010e 	sub.w	r1, r1, lr
 80090ee:	4464      	add	r4, ip
 80090f0:	4642      	mov	r2, r8
 80090f2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80090f6:	3f01      	subs	r7, #1
 80090f8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80090fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009100:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009104:	d1dc      	bne.n	80090c0 <__ieee754_sqrt+0xdc>
 8009106:	4319      	orrs	r1, r3
 8009108:	d01b      	beq.n	8009142 <__ieee754_sqrt+0x15e>
 800910a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009190 <__ieee754_sqrt+0x1ac>
 800910e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009194 <__ieee754_sqrt+0x1b0>
 8009112:	e9da 0100 	ldrd	r0, r1, [sl]
 8009116:	e9db 2300 	ldrd	r2, r3, [fp]
 800911a:	f7f7 f869 	bl	80001f0 <__aeabi_dsub>
 800911e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4640      	mov	r0, r8
 8009128:	4649      	mov	r1, r9
 800912a:	f7f7 fc95 	bl	8000a58 <__aeabi_dcmple>
 800912e:	b140      	cbz	r0, 8009142 <__ieee754_sqrt+0x15e>
 8009130:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8009134:	e9da 0100 	ldrd	r0, r1, [sl]
 8009138:	e9db 2300 	ldrd	r2, r3, [fp]
 800913c:	d111      	bne.n	8009162 <__ieee754_sqrt+0x17e>
 800913e:	3601      	adds	r6, #1
 8009140:	463c      	mov	r4, r7
 8009142:	1072      	asrs	r2, r6, #1
 8009144:	0863      	lsrs	r3, r4, #1
 8009146:	07f1      	lsls	r1, r6, #31
 8009148:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800914c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009150:	bf48      	it	mi
 8009152:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009156:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800915a:	4618      	mov	r0, r3
 800915c:	e756      	b.n	800900c <__ieee754_sqrt+0x28>
 800915e:	4690      	mov	r8, r2
 8009160:	e7be      	b.n	80090e0 <__ieee754_sqrt+0xfc>
 8009162:	f7f7 f847 	bl	80001f4 <__adddf3>
 8009166:	e9da 8900 	ldrd	r8, r9, [sl]
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	f7f7 fc67 	bl	8000a44 <__aeabi_dcmplt>
 8009176:	b120      	cbz	r0, 8009182 <__ieee754_sqrt+0x19e>
 8009178:	1ca0      	adds	r0, r4, #2
 800917a:	bf08      	it	eq
 800917c:	3601      	addeq	r6, #1
 800917e:	3402      	adds	r4, #2
 8009180:	e7df      	b.n	8009142 <__ieee754_sqrt+0x15e>
 8009182:	1c63      	adds	r3, r4, #1
 8009184:	f023 0401 	bic.w	r4, r3, #1
 8009188:	e7db      	b.n	8009142 <__ieee754_sqrt+0x15e>
 800918a:	bf00      	nop
 800918c:	7ff00000 	.word	0x7ff00000
 8009190:	20000070 	.word	0x20000070
 8009194:	20000068 	.word	0x20000068

08009198 <_init>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	bf00      	nop
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr

080091a4 <_fini>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr
